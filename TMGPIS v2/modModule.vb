Imports System.Net.Mail

Module modModule
    Dim userFullName As String
    Dim username As String
    Dim userPosition As String
    Dim fileName As String

    Public Sub setFileName(ByVal fn As String)
        fileName = fn
    End Sub

    Public Function getFileName() As String
        Return fileName
    End Function

    Public Function getSystemTitle()
        Return "Tri-Marine International Ltd. - Operations Information System v." & Application.ProductVersion
    End Function

    Public Sub setUserFullName(ByVal u As String)
        userfullname = u
    End Sub

    Public Function getUserFullName() As String
        Return userfullname
    End Function

    Public Sub setUsername(ByVal u As String)
        username = u
    End Sub

    Public Function getUsername() As String
        Return username
    End Function

    Public Sub setPositionUser(ByVal u As String)
        userPosition = u
    End Sub

    Public Function getPositionUser() As String
        Return userPosition
    End Function

    Public Function getProductVersion() As String
        Return Application.ProductVersion
    End Function

    Public Function getMachineName() As String
        Return Environment.MachineName
    End Function

    Public Function getConnectionString() As String
        Try
            Dim fileName As String = Environment.CurrentDirectory & "\ois.ini"

            'MsgBox(Environment.CurrentDirectory)
            Dim connectionString As String

            If System.IO.File.Exists(fileName) Then
                Dim myReader As New System.IO.StreamReader(fileName)

                Do While myReader.Peek <> -1
                    connectionString &= myReader.ReadLine()
                Loop

                Return connectionString
            Else
                MsgBox("File doesn't exists", MsgBoxStyle.Exclamation, "Warning")
            End If

            'USE THIS CONNECTION IF YOU ARE USING MS SQL SERVER 2005
            'WINDOWS 2003
            'Return "Server=SAGE-SRV1\SQLEXPRESS2005;Database=TRAKIM;Persist Security Info=FALSE;"     'LOCAL

            'SOLTAI OFFICE
            'Return "Server=SAGE-SRV\SAGE;Database=TRAKIM2;Trusted_Connection=TRUE;"          'TRAKIM

            '*********************************************************************************************************
            '*********************************************************************************************************
            'BACKUP SERVER - ACCTGSERVER\ SAMOA
            'Return "Server=ACCTGSVR\SAGE2;Database=TRAKIM2;Trusted_Connection=TRUE;"     'LOCAL
            'TRAKIM2
            '182.236.118.238

            'LENOVO LAPTOP - egudez
            'Return "Server=EGUDEZ\PIS;Database=dbPIS;Trusted_Connection=TRUE;"     'LOCAL

            'SAMOA SERVER - egudez
            'NQUE-PC\SQLEXPRESS
            'Return "Server=NQUE-PC\SQLEXPRESS;Database=dbPIS;Trusted_Connection=TRUE;"     'LOCAL
            '*********************************************************************************************************
            '*********************************************************************************************************

            'SQL 2008 TOSHIBA FOR TESTING AND SIMULATIONS
            'Return "Server=MHOND\SQLEXPRESS;Database=TRAKIM2;Trusted_Connection=TRUE;"          'TRAKIM

            'SQL 2005 TOSHIBA FOR TESTING AND SIMULATIONS
            'Return "Server=MHOND\SQLEXPRESS2005;Database=dbPIS;Trusted_Connection=TRUE;"          'TRAKIM

            'USE THIS CONNECTION IF YOU ARE USING MS SQL SERVER 2008 R2 EXPRESS
            'Return "Server=SAGE-SRV\SQLEXPRESS;Database=mstmg;Persist Security Info=FALSE;"

            'USE THIS CONNECTION IF YOU ARE USING MS SQL SERVER 2000
            'Return "Server=SAGE-SRV\SQL2000;Database=TRAKIM;Persist Security Info=FALSE;"

            '& "User Id=sa;Password='trakim'"
            'Return "Data Source=SAGE-SRV;Initial Catalog=mstmg;Persist Security Info=FALSE;" & _
            '    "User Id=sa;Password='trakim'"
        Catch ex As Exception
            MsgBox(ex.Message)
            'sendExcemptionError(ex.Message, "Module: Get Connectionstring")

            'Dim reply As String = MsgBox("Would you like to terminate the application?", MsgBoxStyle.YesNo + MsgBoxStyle.Question, "Confirmation")
            'If reply = vbYes Then
            '    End
            'End If
        End Try
    End Function

    Public Function getServerDateTime() As DateTime
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = getConnectionString()
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandType = CommandType.StoredProcedure
            cmd.CommandText = "proc_Acctg_getServerDateTime"
            cmd.Connection = c

            Dim dr As SqlClient.SqlDataReader
            dr = cmd.ExecuteReader

            Dim serverDateTime As DateTime
            If dr.Read Then
                serverDateTime = dr.GetDateTime(0)
            End If

            dr.Close()
            c.Close()

            Return serverDateTime
        Catch ex As Exception
            MsgBox(ex.Message)
            'sendExcemptionError(ex.Message, "Module: System Date and Time")
        End Try
    End Function

    Public Function getAllFishBins() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_displayAll_FishBins"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch ex As Exception
            MsgBox(ex.Message)
            'sendExcemptionError(ex.Message, "Module: Display of all Fish Bins")
        Finally
        End Try
    End Function

    Public Function getAllFishBins_AvailableForDeposit() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_display_FishBinsAvailableForTransfer2"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch ex As Exception
            MsgBox(ex.Message)
            'sendExcemptionError(ex.Message, "Module: Display available fish bins")
        Finally
        End Try
    End Function

    Public Function getAllFishDeposits() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_displayAll_FishDeposits"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch ex As Exception
            MsgBox(ex.Message)
            'sendExcemptionError(ex.Message, "Module: Display of all fish bins in the cold storage")
        Finally
        End Try
    End Function

    Public Function getAllMeatRecovery() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_displayAll_MeatRecovery"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch ex As Exception
            MsgBox(ex.Message)
            'sendExcemptionError(ex.Message, "Module: Display of meat recovery")
        Finally
        End Try
    End Function

    Public Function getFishBins() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_display_FishBins"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch ex As Exception
            MsgBox(ex.Message)
            ' sendExcemptionError(ex.Message, "Module: Display Fish Bins")
        Finally
        End Try
    End Function

    Public Function getFishBins_Deposited() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_display_FishBins_Deposited"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch ex As Exception
            MsgBox(ex.Message)
            '  sendExcemptionError(ex.Message, "Module: Display of all fish bins in the cold storage")
        Finally
        End Try
    End Function

    Public Function getColdStorage() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_display_ColdStorage"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getLocation() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand("SELECT DISTINCT location AS Lane " & _
                " FROM dbo.tblFishDeposit " & _
                " WHERE (NOT (location LIKE '')) " & _
                " ORDER BY Location", c)

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getPosition() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand("SELECT DISTINCT position AS Position " & _
                " FROM dbo.tblFishDeposit " & _
                " WHERE (NOT (position LIKE '')) " & _
                " ORDER BY Position", c)

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getHeight() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand("SELECT DISTINCT height AS Height " & _
                " FROM dbo.tblFishDeposit " & _
                " WHERE (NOT (height LIKE '')) " & _
                " ORDER BY height", c)

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getFAOAreaCode() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_display_FAOAreaCode"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getFAOOCean() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_display_FAOOCean"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getAllFishingVessel() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_displayAll_FishingVessel"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getAllFishLots() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_displayAll_FishLots"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getAllFishSupplier() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_displayAll_Supplier"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getAllFishSpecie() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_displayAll_FishSpecie"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getAllFishSpecie2() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_displayAll_FishSpecie2"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getAllMeatType() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_displayAll_MeatType"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getAllCC() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_displayAll_CC"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getAllCOS() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_displayAll_COS"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getAllCOP() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_displayAll_COP"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getFishingVessel() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_display_FishingVessel"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getCarrier() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_displayAll_Carrier"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getAllCatchAreas() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_displayAll_CatchAreas"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getCC_Reference() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_display_CCReference"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    'Checks if string has only numbers
    '(Since parameter is String instead of Object, it should be faster)
    '12453 -> True
    '234d3 -> False
    Public Function IsNumeric(ByVal str As String) As Boolean
        Dim i As Integer
        For i = 0 To str.Length - 1
            If Not (AscW(str.Substring(i, 1)) >= 44 AndAlso AscW(str.Substring(i, 1)) <= 57) Then 'asc value range of numbers
                Return False
            End If
        Next
        Return True
    End Function

    Public Function getFishBinCounter() As Long
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getCounter_FishBins"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim ctr As Long
            If drCode.Read Then
                ctr = drCode.GetInt64(0) + 1
            Else
                ctr = 1
            End If

            drCode.Close()
            c.Close()
            Return ctr
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getMeatRecoveryCounter() As Long
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getCounter_MeatRecoveryCounter"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim ctr As Long
            If drCode.Read Then
                ctr = drCode.GetInt64(0) + 1
            Else
                ctr = 1
            End If

            drCode.Close()
            c.Close()
            Return ctr
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getFAOCounter() As Long
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getCounter_FAO"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim ctr As Long
            If drCode.Read Then
                ctr = drCode.GetInt64(0) + 1
            Else
                ctr = 1
            End If

            drCode.Close()
            c.Close()
            Return ctr
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getFishSpecieCounter() As Long
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getCounter_Specie"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim ctr As Long
            If drCode.Read Then
                ctr = drCode.GetInt64(0) + 1
            Else
                ctr = 1
            End If

            drCode.Close()
            c.Close()
            Return ctr
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getCOSCounter() As Long
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getCounter_COS"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim ctr As Long
            If drCode.Read Then
                ctr = drCode.GetInt64(0) + 1
            Else
                ctr = 1
            End If

            drCode.Close()
            c.Close()
            Return ctr
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getCOPCounter() As Long
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getCounter_COP"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim ctr As Long
            If drCode.Read Then
                ctr = drCode.GetInt64(0) + 1
            Else
                ctr = 1
            End If

            drCode.Close()
            c.Close()
            Return ctr
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getFishSupplierCounter() As Long
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getCounter_FishSupplier"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim ctr As Long
            If drCode.Read Then
                ctr = drCode.GetInt64(0) + 1
            Else
                ctr = 1
            End If

            drCode.Close()
            c.Close()
            Return ctr
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getSICCCounter() As Long
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getCounter_SICC"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim ctr As Long
            If drCode.Read Then
                ctr = drCode.GetInt64(0) + 1
            Else
                ctr = 1
            End If

            drCode.Close()
            c.Close()
            Return ctr
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getFishingVesselCounter() As Long
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getCounter_FishingVessel"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim ctr As Long
            If drCode.Read Then
                ctr = drCode.GetInt64(0) + 1
            Else
                ctr = 1
            End If

            drCode.Close()
            c.Close()
            Return ctr
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getFishLotCounter() As Long
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getCounter_FishLots"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim ctr As Long
            If drCode.Read Then
                ctr = drCode.GetInt64(0) + 1
            Else
                ctr = 1
            End If

            drCode.Close()
            c.Close()
            Return ctr
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub updateFishBins(ByVal binCode As String, ByVal bin As String, ByVal weight As String, ByVal dummy As String)
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_update_FishBins"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@binCode"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = binCode

            Dim p3 As New SqlClient.SqlParameter()
            p3.ParameterName = "@bin#"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = bin.ToUpper

            Dim p4 As New SqlClient.SqlParameter()
            p4.ParameterName = "@tareWeight"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.Float
            p4.Value = weight

            Dim p5 As New SqlClient.SqlParameter()
            p5.ParameterName = "@dummyBin"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.VarChar
            p5.Value = dummy

            Dim p6 As New SqlClient.SqlParameter()
            p6.ParameterName = "@optr"
            p6.Direction = ParameterDirection.Input
            p6.SqlDbType = SqlDbType.VarChar
            p6.Value = modModule.getUsername

            Dim p7 As New SqlClient.SqlParameter()
            p7.ParameterName = "@dateTimeEncoded"
            p7.Direction = ParameterDirection.Input
            p7.SqlDbType = SqlDbType.DateTime
            p7.Value = getServerDateTime()

            Dim paramRecCount As New SqlClient.SqlParameter()
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)
            cmd.Parameters.Add(p7)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter()
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Function validateFishLot(ByVal lot As String) As Boolean
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getExistence_FishLots"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@batchlot"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = lot

            Dim paramRecCount As New SqlClient.SqlParameter()
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(paramRecCount)

            Dim da As New SqlClient.SqlDataAdapter()
            Dim ds As New DataSet("dbPPICIS")

            da.SelectCommand = cmd
            da.Fill(ds)

            If Val(cmd.Parameters("@recCount").Value) > 0 Then
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return True
            Else
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return False
            End If
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function validateFishLotDetails(ByVal lot As String, ByVal method As String, _
    ByVal sublot As String) As Boolean
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getExistence_FishLotsDetails"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@lot"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = lot

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@method"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = method

            Dim p3 As New SqlClient.SqlParameter()
            p3.ParameterName = "@sublot"
            p3.SqlDbType = SqlDbType.VarChar
            p3.Direction = ParameterDirection.Input
            p3.Value = sublot

            Dim paramRecCount As New SqlClient.SqlParameter()
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(paramRecCount)

            Dim da As New SqlClient.SqlDataAdapter()
            Dim ds As New DataSet("dbPPICIS")

            da.SelectCommand = cmd
            da.Fill(ds)

            If Val(cmd.Parameters("@recCount").Value) > 0 Then
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return True
            Else
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return False
            End If
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function validateFishBins(ByVal bin As String) As Boolean
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getExistence_FishBins"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@binNo"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = bin

            Dim paramRecCount As New SqlClient.SqlParameter()
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(paramRecCount)

            Dim da As New SqlClient.SqlDataAdapter()
            Dim ds As New DataSet("dbPPICIS")

            da.SelectCommand = cmd
            da.Fill(ds)

            If Val(cmd.Parameters("@recCount").Value) > 0 Then
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return True
            Else
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return False
            End If
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function validateFishSpecie(ByVal specie As String, ByVal weight As String) As Boolean
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getExistence_FishSpecie"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@specie"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = specie

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@weight"
            p2.SqlDbType = SqlDbType.Float
            p2.Direction = ParameterDirection.Input
            p2.Value = weight

            Dim paramRecCount As New SqlClient.SqlParameter()
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(paramRecCount)

            Dim da As New SqlClient.SqlDataAdapter()
            Dim ds As New DataSet("dbPPICIS")

            da.SelectCommand = cmd
            da.Fill(ds)

            If Val(cmd.Parameters("@recCount").Value) > 0 Then
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return True
            Else
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return False
            End If
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function validateSpecie(ByVal code As String, ByVal specie As String) As Boolean
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getExistence_Specie"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@specieCode"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = code

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@specie"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = specie

            Dim paramRecCount As New SqlClient.SqlParameter()
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(paramRecCount)

            Dim da As New SqlClient.SqlDataAdapter()
            Dim ds As New DataSet("dbPPICIS")

            da.SelectCommand = cmd
            da.Fill(ds)

            If Val(cmd.Parameters("@recCount").Value) > 0 Then
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return True
            Else
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return False
            End If
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function validateFishSupplier(ByVal supplier As String) As Boolean
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getExistence_FishSupplier"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@supplier"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = supplier

            Dim paramRecCount As New SqlClient.SqlParameter()
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(paramRecCount)

            Dim da As New SqlClient.SqlDataAdapter()
            Dim ds As New DataSet("dbPPICIS")

            da.SelectCommand = cmd
            da.Fill(ds)

            If Val(cmd.Parameters("@recCount").Value) > 0 Then
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return True
            Else
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return False
            End If
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function validateFishingVessel(ByVal vessel As String, ByVal registration As String, _
    ByVal license As String) As Boolean
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getExistence_FishingVessel"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@vessel"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = vessel

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@reg"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = registration

            Dim p3 As New SqlClient.SqlParameter()
            p3.ParameterName = "@license"
            p3.SqlDbType = SqlDbType.VarChar
            p3.Direction = ParameterDirection.Input
            p3.Value = license

            Dim paramRecCount As New SqlClient.SqlParameter()
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(paramRecCount)

            Dim da As New SqlClient.SqlDataAdapter()
            Dim ds As New DataSet("dbPPICIS")

            da.SelectCommand = cmd
            da.Fill(ds)

            If Val(cmd.Parameters("@recCount").Value) > 0 Then
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return True
            Else
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return False
            End If
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub saveNewFishLot(ByVal lot As String, ByVal supplier As String, _
    ByVal fishClass As String, ByVal cc As String, ByVal fishType As String, _
    ByVal dateUnloaded As String, ByVal trip As Integer, ByVal yr As Integer)
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_addNew_FishLots"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@id"
            p1.SqlDbType = SqlDbType.BigInt
            p1.Direction = ParameterDirection.Input
            p1.Value = getFishLotCounter()

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@lot#"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = lot

            Dim p3 As New SqlClient.SqlParameter()
            p3.ParameterName = "@supCode"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = getSupplierCode(supplier)

            Dim p4 As New SqlClient.SqlParameter()
            p4.ParameterName = "@fishClass"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = fishClass

            Dim p5 As New SqlClient.SqlParameter()
            p5.ParameterName = "@cc#"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.VarChar
            p5.Value = cc

            Dim p6 As New SqlClient.SqlParameter()
            p6.ParameterName = "@fishType"
            p6.Direction = ParameterDirection.Input
            p6.SqlDbType = SqlDbType.VarChar
            p6.Value = fishType

            Dim p7 As New SqlClient.SqlParameter()
            p7.ParameterName = "@dateUnloaded"
            p7.Direction = ParameterDirection.Input
            p7.SqlDbType = SqlDbType.VarChar
            p7.Value = dateUnloaded 'Format(CDate(dateUnloaded), getTimeFormat())

            Dim p8 As New SqlClient.SqlParameter()
            p8.ParameterName = "@optr"
            p8.Direction = ParameterDirection.Input
            p8.SqlDbType = SqlDbType.VarChar
            p8.Value = modModule.getUsername

            Dim p9 As New SqlClient.SqlParameter()
            p9.ParameterName = "@dateTimeEncoded"
            p9.Direction = ParameterDirection.Input
            p9.SqlDbType = SqlDbType.DateTime
            p9.Value = getServerDateTime()

            Dim p10 As New SqlClient.SqlParameter()
            p10.ParameterName = "@trip"
            p10.Direction = ParameterDirection.Input
            p10.SqlDbType = SqlDbType.Int
            p10.Value = trip

            Dim p11 As New SqlClient.SqlParameter()
            p11.ParameterName = "@yr"
            p11.Direction = ParameterDirection.Input
            p11.SqlDbType = SqlDbType.Int
            p11.Value = yr

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)
            cmd.Parameters.Add(p7)
            cmd.Parameters.Add(p8)
            cmd.Parameters.Add(p9)
            cmd.Parameters.Add(p10)
            cmd.Parameters.Add(p11)

            Dim daBuyer As New SqlClient.SqlDataAdapter()
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            daBuyer.Dispose()
            dsBuyer.Dispose()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub

    Public Sub saveNewFishLotDetails(ByVal lot As String, ByVal sublot As String, _
    ByVal method As String, ByVal wellID As String, ByVal typeSet As String)
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_addNew_FishLotsDetails"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@lot#"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = lot

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@sublot"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = sublot

            Dim p3 As New SqlClient.SqlParameter()
            p3.ParameterName = "@pmId"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.BigInt
            p3.Value = getPMCode(method)

            Dim p4 As New SqlClient.SqlParameter()
            p4.ParameterName = "@optr"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = modModule.getUsername

            Dim p5 As New SqlClient.SqlParameter()
            p5.ParameterName = "@dateTimeEncoded"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.DateTime
            p5.Value = getServerDateTime()

            Dim p6 As New SqlClient.SqlParameter()
            p6.ParameterName = "@wellID"
            p6.SqlDbType = SqlDbType.VarChar
            p6.Direction = ParameterDirection.Input
            p6.Value = wellID

            Dim p7 As New SqlClient.SqlParameter()
            p7.ParameterName = "@typeSet"
            p7.SqlDbType = SqlDbType.VarChar
            p7.Direction = ParameterDirection.Input
            p7.Value = typeSet

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)
            cmd.Parameters.Add(p7)

            Dim daBuyer As New SqlClient.SqlDataAdapter()
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            daBuyer.Dispose()
            dsBuyer.Dispose()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub

    Public Function getSupplierCode(ByVal supplier As String) As String
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getSupplierCode"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@supplier"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = supplier

            cmd.Parameters.Add(p1)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As String
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetString(0)
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getMethodCode(ByVal method As String) As String
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getMethodCode"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@method"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = method

            cmd.Parameters.Add(p1)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As String
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetString(0)
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getFishSizeCode(ByVal sizeFrom As String, ByVal sizeTo As String) As String
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getFishSizeCode"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@sizeFrom"
            p1.SqlDbType = SqlDbType.Float
            p1.Direction = ParameterDirection.Input
            p1.Value = sizeFrom

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@sizeTo"
            p2.SqlDbType = SqlDbType.Float
            p2.Direction = ParameterDirection.Input
            p2.Value = sizeTo

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As String
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetString(0)
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getVesselCode(ByVal vessel As String) As String
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getVesselCode"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@vessel"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = vessel

            cmd.Parameters.Add(p1)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As String
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetString(0)
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub updateFishLot(ByVal lot As String, ByVal supplier As String, ByVal fishClass As String, _
    ByVal cc As String, ByVal fishType As String, ByVal dateUnloaded As String)
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_update_FishLot"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@lot#"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = lot

            Dim p3 As New SqlClient.SqlParameter()
            p3.ParameterName = "@supCode"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = getSupplierCode(supplier)

            Dim p4 As New SqlClient.SqlParameter()
            p4.ParameterName = "@fishClass"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = fishClass

            Dim p5 As New SqlClient.SqlParameter()
            p5.ParameterName = "@cc#"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.VarChar
            p5.Value = cc

            Dim p6 As New SqlClient.SqlParameter()
            p6.ParameterName = "@fishType"
            p6.Direction = ParameterDirection.Input
            p6.SqlDbType = SqlDbType.VarChar
            p6.Value = fishType

            Dim p7 As New SqlClient.SqlParameter()
            p7.ParameterName = "@dateUnloaded"
            p7.Direction = ParameterDirection.Input
            p7.SqlDbType = SqlDbType.DateTime
            p7.Value = Format(CDate(dateUnloaded), getTimeFormat())

            Dim p8 As New SqlClient.SqlParameter()
            p8.ParameterName = "@optr"
            p8.Direction = ParameterDirection.Input
            p8.SqlDbType = SqlDbType.VarChar
            p8.Value = modModule.getUsername

            Dim p9 As New SqlClient.SqlParameter()
            p9.ParameterName = "@dateTimeEncoded"
            p9.Direction = ParameterDirection.Input
            p9.SqlDbType = SqlDbType.DateTime
            p9.Value = getServerDateTime()

            Dim paramRecCount As New SqlClient.SqlParameter()
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)
            cmd.Parameters.Add(p7)
            cmd.Parameters.Add(p8)
            cmd.Parameters.Add(p9)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter()
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Function getSupplier() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_display_Supplier"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getFishType() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_display_FishType"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getFishingMethod() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_display_FishMethod"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getFishSpecie() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_display_FishSpecie"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getFishSpecie(ByVal selected As Boolean) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand("SELECT specie AS [Fish Specie] " & _
                " FROM dbo.tblFishSpecie " & _
                " WHERE (specie LIKE 'Big%' OR specie LIKE 'Yellow%')", c)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getFishSpecieCode() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_displayAll_FishSpecie2Code"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getFishSpecieSizes(ByVal specie As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_display_FishSpecieSizes"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@specie"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = specie

            cmd.Parameters.Add(p1)

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getBatchlots() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_display_Batchlot"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getCOSNo() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_displayCOSNo"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getCOPNo() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_displayCOPNo"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getUnallocatedCC() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_display_UnallocatedCC"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub saveNewFishingVessel(ByVal vessel As String, ByVal flag As String, ByVal homePort As String, _
    ByVal reg As String, ByVal callSign As String, ByVal imo As String, ByVal license As String, _
    ByVal immarsat As String, ByVal telefax As String, ByVal expiration As String, ByVal telNo As String, _
    ByVal email As String, ByVal method As String, ByVal vesselCode As String, ByVal eu As String)
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_addNew_FishingVessel"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@id"
            p1.SqlDbType = SqlDbType.BigInt
            p1.Direction = ParameterDirection.Input
            p1.Value = getFishingVesselCounter()

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@vesselCode"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = UCase(vesselCode).Trim  '"FV" & Format(getFishingVesselCounter, "0###")

            Dim p3 As New SqlClient.SqlParameter()
            p3.ParameterName = "@vesselName"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = vessel.Trim

            Dim p4 As New SqlClient.SqlParameter()
            p4.ParameterName = "@flag"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = flag

            Dim p5 As New SqlClient.SqlParameter()
            p5.ParameterName = "@homePort"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.VarChar
            p5.Value = homePort

            Dim p6 As New SqlClient.SqlParameter()
            p6.ParameterName = "@reg#"
            p6.Direction = ParameterDirection.Input
            p6.SqlDbType = SqlDbType.VarChar
            p6.Value = reg

            Dim p7 As New SqlClient.SqlParameter()
            p7.ParameterName = "@callSign"
            p7.Direction = ParameterDirection.Input
            p7.SqlDbType = SqlDbType.VarChar
            p7.Value = callSign

            Dim p8 As New SqlClient.SqlParameter()
            p8.ParameterName = "@IMO"
            p8.Direction = ParameterDirection.Input
            p8.SqlDbType = SqlDbType.VarChar
            p8.Value = imo

            Dim p9 As New SqlClient.SqlParameter()
            p9.ParameterName = "@license#"
            p9.Direction = ParameterDirection.Input
            p9.SqlDbType = SqlDbType.VarChar
            p9.Value = license

            Dim p10 As New SqlClient.SqlParameter()
            p10.ParameterName = "@immarsat#"
            p10.Direction = ParameterDirection.Input
            p10.SqlDbType = SqlDbType.VarChar
            p10.Value = immarsat

            Dim p11 As New SqlClient.SqlParameter()
            p11.ParameterName = "@telefax#"
            p11.Direction = ParameterDirection.Input
            p11.SqlDbType = SqlDbType.VarChar
            p11.Value = telefax

            Dim p12 As New SqlClient.SqlParameter()
            p12.ParameterName = "@expiration"
            p12.Direction = ParameterDirection.Input
            p12.SqlDbType = SqlDbType.DateTime
            p12.Value = Format(CDate(expiration), getTimeFormat())

            Dim p13 As New SqlClient.SqlParameter()
            p13.ParameterName = "@tel#"
            p13.Direction = ParameterDirection.Input
            p13.SqlDbType = SqlDbType.VarChar
            p13.Value = telNo

            Dim p14 As New SqlClient.SqlParameter()
            p14.ParameterName = "@email"
            p14.Direction = ParameterDirection.Input
            p14.SqlDbType = SqlDbType.VarChar
            p14.Value = email

            Dim p15 As New SqlClient.SqlParameter()
            p15.ParameterName = "@optr"
            p15.Direction = ParameterDirection.Input
            p15.SqlDbType = SqlDbType.VarChar
            p15.Value = modModule.getUsername

            Dim p16 As New SqlClient.SqlParameter()
            p16.ParameterName = "@dateTimeEncoded"
            p16.Direction = ParameterDirection.Input
            p16.SqlDbType = SqlDbType.DateTime
            p16.Value = getServerDateTime()

            Dim p17 As New SqlClient.SqlParameter()
            p17.ParameterName = "@fmCode"
            p17.Direction = ParameterDirection.Input
            p17.SqlDbType = SqlDbType.VarChar
            p17.Value = getMethodCode(method)

            Dim p18 As New SqlClient.SqlParameter()
            p18.ParameterName = "@euSan#"
            p18.Direction = ParameterDirection.Input
            p18.SqlDbType = SqlDbType.VarChar
            p18.Value = eu

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)
            cmd.Parameters.Add(p7)
            cmd.Parameters.Add(p8)
            cmd.Parameters.Add(p9)
            cmd.Parameters.Add(p10)
            cmd.Parameters.Add(p11)
            cmd.Parameters.Add(p12)
            cmd.Parameters.Add(p13)
            cmd.Parameters.Add(p14)
            cmd.Parameters.Add(p15)
            cmd.Parameters.Add(p16)
            cmd.Parameters.Add(p17)
            cmd.Parameters.Add(p18)

            Dim daBuyer As New SqlClient.SqlDataAdapter()
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            daBuyer.Dispose()
            dsBuyer.Dispose()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub

    Public Sub updateFishingVessel(ByVal vesselCode As String, ByVal vessel As String, ByVal flag As String, ByVal homePort As String, _
    ByVal reg As String, ByVal callSign As String, ByVal imo As String, ByVal license As String, _
    ByVal immarsat As String, ByVal telefax As String, ByVal expiration As String, ByVal telNo As String, _
    ByVal email As String, ByVal method As String, ByVal eu As String)
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_update_FishingVessel"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@vesselCode"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = vesselCode

            Dim p3 As New SqlClient.SqlParameter()
            p3.ParameterName = "@vesselName"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = vessel

            Dim p4 As New SqlClient.SqlParameter()
            p4.ParameterName = "@flag"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = flag

            Dim p5 As New SqlClient.SqlParameter()
            p5.ParameterName = "@homePort"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.VarChar
            p5.Value = homePort

            Dim p6 As New SqlClient.SqlParameter()
            p6.ParameterName = "@reg#"
            p6.Direction = ParameterDirection.Input
            p6.SqlDbType = SqlDbType.VarChar
            p6.Value = reg

            Dim p7 As New SqlClient.SqlParameter()
            p7.ParameterName = "@callSign"
            p7.Direction = ParameterDirection.Input
            p7.SqlDbType = SqlDbType.VarChar
            p7.Value = callSign

            Dim p8 As New SqlClient.SqlParameter()
            p8.ParameterName = "@IMO"
            p8.Direction = ParameterDirection.Input
            p8.SqlDbType = SqlDbType.VarChar
            p8.Value = imo

            Dim p9 As New SqlClient.SqlParameter()
            p9.ParameterName = "@license#"
            p9.Direction = ParameterDirection.Input
            p9.SqlDbType = SqlDbType.VarChar
            p9.Value = license

            Dim p10 As New SqlClient.SqlParameter()
            p10.ParameterName = "@immarsat#"
            p10.Direction = ParameterDirection.Input
            p10.SqlDbType = SqlDbType.VarChar
            p10.Value = immarsat

            Dim p11 As New SqlClient.SqlParameter()
            p11.ParameterName = "@telefax#"
            p11.Direction = ParameterDirection.Input
            p11.SqlDbType = SqlDbType.VarChar
            p11.Value = telefax

            Dim p12 As New SqlClient.SqlParameter()
            p12.ParameterName = "@expiration"
            p12.Direction = ParameterDirection.Input
            p12.SqlDbType = SqlDbType.DateTime
            p12.Value = Format(CDate(expiration), getTimeFormat())

            Dim p13 As New SqlClient.SqlParameter()
            p13.ParameterName = "@tel#"
            p13.Direction = ParameterDirection.Input
            p13.SqlDbType = SqlDbType.VarChar
            p13.Value = telNo

            Dim p14 As New SqlClient.SqlParameter()
            p14.ParameterName = "@email"
            p14.Direction = ParameterDirection.Input
            p14.SqlDbType = SqlDbType.VarChar
            p14.Value = email

            Dim p15 As New SqlClient.SqlParameter()
            p15.ParameterName = "@optr"
            p15.Direction = ParameterDirection.Input
            p15.SqlDbType = SqlDbType.VarChar
            p15.Value = modModule.getUsername

            Dim p16 As New SqlClient.SqlParameter()
            p16.ParameterName = "@dateTimeEncoded"
            p16.Direction = ParameterDirection.Input
            p16.SqlDbType = SqlDbType.DateTime
            p16.Value = getServerDateTime()

            Dim p17 As New SqlClient.SqlParameter()
            p17.ParameterName = "@fmCode"
            p17.Direction = ParameterDirection.Input
            p17.SqlDbType = SqlDbType.VarChar
            p17.Value = getMethodCode(method)

            Dim p18 As New SqlClient.SqlParameter()
            p18.ParameterName = "@euSan#"
            p18.Direction = ParameterDirection.Input
            p18.SqlDbType = SqlDbType.VarChar
            p18.Value = eu

            Dim paramRecCount As New SqlClient.SqlParameter()
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)
            cmd.Parameters.Add(p7)
            cmd.Parameters.Add(p8)
            cmd.Parameters.Add(p9)
            cmd.Parameters.Add(p10)
            cmd.Parameters.Add(p11)
            cmd.Parameters.Add(p12)
            cmd.Parameters.Add(p13)
            cmd.Parameters.Add(p14)
            cmd.Parameters.Add(p15)
            cmd.Parameters.Add(p16)
            cmd.Parameters.Add(p17)
            cmd.Parameters.Add(p18)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter()
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Function validateCC(ByVal cc As String) As Boolean
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getExistence_SICC"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@cc"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = cc

            Dim paramRecCount As New SqlClient.SqlParameter()
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(paramRecCount)

            Dim da As New SqlClient.SqlDataAdapter()
            Dim ds As New DataSet("dbPPICIS")

            da.SelectCommand = cmd
            da.Fill(ds)

            If Val(cmd.Parameters("@recCount").Value) > 0 Then
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return True
            Else
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return False
            End If
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub saveNewSICC(ByVal cc As String, ByVal dateValid As String, ByVal authority As String, _
    ByVal vessel As String, ByVal dateDepart As String, ByVal dateArrive As String, _
    ByVal method As String, ByVal areaCode As String, ByVal product As String, ByVal processing As String, _
    ByVal ref As String, ByVal dateUnload As String, ByVal dateTrans As String, ByVal carrier As String, _
    ByVal carrierDepart As String, ByVal carrierArrive As String, ByVal carrierTrip As String, _
    ByVal carrierHatch As String, ByVal delivery As String, ByVal portTrans As String, ByVal portUnload As String)
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_addNew_SICC"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@id"
            p1.SqlDbType = SqlDbType.BigInt
            p1.Direction = ParameterDirection.Input
            p1.Value = getSICCCounter()

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@cc#"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = cc

            Dim p3 As New SqlClient.SqlParameter()
            p3.ParameterName = "@validAuthority"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = authority

            Dim p4 As New SqlClient.SqlParameter()
            p4.ParameterName = "@validDate"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.DateTime
            p4.Value = Format(CDate(dateValid), getTimeFormat())

            Dim p5 As New SqlClient.SqlParameter()
            p5.ParameterName = "@vesselCode"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.VarChar
            p5.Value = getVesselCode(vessel)

            Dim p6 As New SqlClient.SqlParameter()
            p6.ParameterName = "@dateDepart"
            p6.Direction = ParameterDirection.Input
            p6.SqlDbType = SqlDbType.DateTime
            p6.Value = Format(CDate(dateDepart), getTimeFormat())

            Dim p7 As New SqlClient.SqlParameter()
            p7.ParameterName = "@dateArrived"
            p7.Direction = ParameterDirection.Input
            p7.SqlDbType = SqlDbType.VarChar
            p7.Value = dateArrive 'Format(CDate(dateArrive), getTimeFormat())

            'Dim p8 As New SqlClient.SqlParameter()
            'p8.ParameterName = "@fmCode"
            'p8.Direction = ParameterDirection.Input
            'p8.SqlDbType = SqlDbType.VarChar
            'p8.Value = getMethodCode(method)

            Dim p9 As New SqlClient.SqlParameter()
            p9.ParameterName = "@product"
            p9.Direction = ParameterDirection.Input
            p9.SqlDbType = SqlDbType.VarChar
            p9.Value = product

            Dim p10 As New SqlClient.SqlParameter()
            p10.ParameterName = "@processingType"
            p10.Direction = ParameterDirection.Input
            p10.SqlDbType = SqlDbType.VarChar
            p10.Value = processing

            Dim p11 As New SqlClient.SqlParameter()
            p11.ParameterName = "@refMeasure"
            p11.Direction = ParameterDirection.Input
            p11.SqlDbType = SqlDbType.VarChar
            p11.Value = ref

            Dim pOptr As New SqlClient.SqlParameter()
            pOptr.ParameterName = "@optr"
            pOptr.Direction = ParameterDirection.Input
            pOptr.SqlDbType = SqlDbType.VarChar
            pOptr.Value = modModule.getUsername

            Dim pEncoded As New SqlClient.SqlParameter()
            pEncoded.ParameterName = "@dateTimeEncoded"
            pEncoded.Direction = ParameterDirection.Input
            pEncoded.SqlDbType = SqlDbType.DateTime
            pEncoded.Value = getServerDateTime()

            Dim p12 As New SqlClient.SqlParameter()
            p12.ParameterName = "@dateUnload"
            p12.Direction = ParameterDirection.Input
            p12.SqlDbType = SqlDbType.VarChar
            p12.Value = dateUnload 'Format(CDate(dateUnload), getTimeFormat())

            Dim p13 As New SqlClient.SqlParameter()
            p13.ParameterName = "@dateTrans"
            p13.Direction = ParameterDirection.Input
            p13.SqlDbType = SqlDbType.VarChar
            p13.Value = dateTrans 'Format(CDate(dateTrans), getTimeFormat())

            Dim p14 As New SqlClient.SqlParameter()
            p14.ParameterName = "@carrierTrip"
            p14.Direction = ParameterDirection.Input
            p14.SqlDbType = SqlDbType.VarChar
            p14.Value = carrierTrip

            Dim p15 As New SqlClient.SqlParameter()
            p15.ParameterName = "@delCode"
            p15.Direction = ParameterDirection.Input
            p15.SqlDbType = SqlDbType.VarChar
            p15.Value = getDeliveryCode(delivery)

            Dim p16 As New SqlClient.SqlParameter()
            p16.ParameterName = "@carrier"
            p16.Direction = ParameterDirection.Input
            p16.SqlDbType = SqlDbType.VarChar
            p16.Value = carrier

            Dim p17 As New SqlClient.SqlParameter()
            p17.ParameterName = "@carrierDepart"
            p17.Direction = ParameterDirection.Input
            p17.SqlDbType = SqlDbType.VarChar
            p17.Value = carrierDepart

            Dim p18 As New SqlClient.SqlParameter()
            p18.ParameterName = "@carrierArrive"
            p18.Direction = ParameterDirection.Input
            p18.SqlDbType = SqlDbType.VarChar
            p18.Value = carrierArrive

            Dim p19 As New SqlClient.SqlParameter()
            p19.ParameterName = "@carrierHatch"
            p19.Direction = ParameterDirection.Input
            p19.SqlDbType = SqlDbType.VarChar
            p19.Value = carrierHatch

            Dim p20 As New SqlClient.SqlParameter()
            p20.ParameterName = "@portTrans"
            p20.Direction = ParameterDirection.Input
            p20.SqlDbType = SqlDbType.VarChar
            p20.Value = portTrans

            Dim p21 As New SqlClient.SqlParameter()
            p21.ParameterName = "@portUnload"
            p21.Direction = ParameterDirection.Input
            p21.SqlDbType = SqlDbType.VarChar
            p21.Value = portUnload

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)
            cmd.Parameters.Add(p7)
            'cmd.Parameters.Add(p8)
            cmd.Parameters.Add(p9)
            cmd.Parameters.Add(p10)
            cmd.Parameters.Add(p11)
            cmd.Parameters.Add(pOptr)
            cmd.Parameters.Add(pEncoded)
            cmd.Parameters.Add(p12)
            cmd.Parameters.Add(p13)
            cmd.Parameters.Add(p14)
            cmd.Parameters.Add(p15)
            cmd.Parameters.Add(p16)
            cmd.Parameters.Add(p17)
            cmd.Parameters.Add(p18)
            cmd.Parameters.Add(p19)
            cmd.Parameters.Add(p20)
            cmd.Parameters.Add(p21)

            Dim daBuyer As New SqlClient.SqlDataAdapter()
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            daBuyer.Dispose()
            dsBuyer.Dispose()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub

    Public Sub saveNewSICC_Details(ByVal cc As String, ByVal specie As String, ByVal specieCode As String, _
    ByVal faoNo As String, ByVal dateFrom As String, ByVal dateTo As String, _
    ByVal estLiveWeight As String, ByVal estWeightRecord As String)
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_addNew_SICCDetails"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@cc#"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = cc

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@specie"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = specie

            Dim p3 As New SqlClient.SqlParameter()
            p3.ParameterName = "@specieCode"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = specieCode

            Dim p4 As New SqlClient.SqlParameter()
            p4.ParameterName = "@fao#"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = faoNo

            Dim p5 As New SqlClient.SqlParameter()
            p5.ParameterName = "@dateFrom"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.DateTime
            p5.Value = Format(CDate(dateFrom), getTimeFormat())

            Dim p6 As New SqlClient.SqlParameter()
            p6.ParameterName = "@dateTo"
            p6.Direction = ParameterDirection.Input
            p6.SqlDbType = SqlDbType.DateTime
            p6.Value = Format(CDate(dateTo), getTimeFormat())

            Dim p7 As New SqlClient.SqlParameter()
            p7.ParameterName = "@estLiveWeight"
            p7.Direction = ParameterDirection.Input
            p7.SqlDbType = SqlDbType.Float
            p7.Value = estLiveWeight

            Dim p8 As New SqlClient.SqlParameter()
            p8.ParameterName = "@estWeightRecord"
            p8.Direction = ParameterDirection.Input
            p8.SqlDbType = SqlDbType.Float
            p8.Value = estWeightRecord

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)
            cmd.Parameters.Add(p7)
            cmd.Parameters.Add(p8)

            Dim daBuyer As New SqlClient.SqlDataAdapter()
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            daBuyer.Dispose()
            dsBuyer.Dispose()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub

    Public Sub saveNewSICC_Containers(ByVal cc As String, ByVal container As String, _
    ByVal receiptDate As String, ByVal unloadDate As String)
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_addNew_SICCContainers"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@cc#"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = cc

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@container#"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = container

            Dim p3 As New SqlClient.SqlParameter()
            p3.ParameterName = "@receiptDate"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.DateTime
            p3.Value = Format(CDate(receiptDate), getTimeFormat())

            Dim p4 As New SqlClient.SqlParameter()
            p4.ParameterName = "@unloadingDate"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.DateTime
            p4.Value = Format(CDate(unloadDate), getTimeFormat())

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)

            Dim daBuyer As New SqlClient.SqlDataAdapter()
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            daBuyer.Dispose()
            dsBuyer.Dispose()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub

    Public Sub updateSICC(ByVal cc As String, ByVal dateValid As String, ByVal authority As String, _
    ByVal vessel As String, ByVal dateDepart As String, ByVal dateArrive As String, _
    ByVal method As String, ByVal areaCode As String, ByVal product As String, ByVal processing As String, _
    ByVal ref As String, ByVal dateUnload As String, ByVal dateTrans As String, ByVal carrier As String, _
    ByVal carrierDepart As String, ByVal carrierArrive As String, ByVal carrierTrip As String, _
    ByVal carrierHatch As String, ByVal delivery As String, ByVal portTrans As String, ByVal portUnload As String)
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_update_SICC"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@cc#"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = cc

            Dim p3 As New SqlClient.SqlParameter()
            p3.ParameterName = "@validAuthority"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = authority

            Dim p4 As New SqlClient.SqlParameter()
            p4.ParameterName = "@validDate"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.DateTime
            p4.Value = Format(CDate(dateValid), getTimeFormat())

            Dim p5 As New SqlClient.SqlParameter()
            p5.ParameterName = "@vesselCode"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.VarChar
            p5.Value = getVesselCode(vessel)

            Dim p6 As New SqlClient.SqlParameter()
            p6.ParameterName = "@dateDepart"
            p6.Direction = ParameterDirection.Input
            p6.SqlDbType = SqlDbType.DateTime
            p6.Value = Format(CDate(dateDepart), getTimeFormat())

            Dim p7 As New SqlClient.SqlParameter()
            p7.ParameterName = "@dateArrived"
            p7.Direction = ParameterDirection.Input
            p7.SqlDbType = SqlDbType.VarChar
            p7.Value = dateArrive 'Format(CDate(dateArrive), getTimeFormat())

            'Dim p8 As New SqlClient.SqlParameter()
            'p8.ParameterName = "@fmCode"
            'p8.Direction = ParameterDirection.Input
            'p8.SqlDbType = SqlDbType.VarChar
            'p8.Value = getMethodCode(method)

            Dim p9 As New SqlClient.SqlParameter()
            p9.ParameterName = "@product"
            p9.Direction = ParameterDirection.Input
            p9.SqlDbType = SqlDbType.VarChar
            p9.Value = product

            Dim p10 As New SqlClient.SqlParameter()
            p10.ParameterName = "@processingType"
            p10.Direction = ParameterDirection.Input
            p10.SqlDbType = SqlDbType.VarChar
            p10.Value = processing

            Dim p11 As New SqlClient.SqlParameter()
            p11.ParameterName = "@refMeasure"
            p11.Direction = ParameterDirection.Input
            p11.SqlDbType = SqlDbType.VarChar
            p11.Value = ref

            Dim pOptr As New SqlClient.SqlParameter()
            pOptr.ParameterName = "@optr"
            pOptr.Direction = ParameterDirection.Input
            pOptr.SqlDbType = SqlDbType.VarChar
            pOptr.Value = modModule.getUsername

            Dim pEncoded As New SqlClient.SqlParameter()
            pEncoded.ParameterName = "@dateTimeEncoded"
            pEncoded.Direction = ParameterDirection.Input
            pEncoded.SqlDbType = SqlDbType.DateTime
            pEncoded.Value = getServerDateTime()

            Dim p12 As New SqlClient.SqlParameter()
            p12.ParameterName = "@dateUnload"
            p12.Direction = ParameterDirection.Input
            p12.SqlDbType = SqlDbType.VarChar
            p12.Value = dateUnload 'Format(CDate(dateUnload), getTimeFormat())

            Dim p13 As New SqlClient.SqlParameter()
            p13.ParameterName = "@dateTrans"
            p13.Direction = ParameterDirection.Input
            p13.SqlDbType = SqlDbType.VarChar
            p13.Value = dateTrans 'Format(CDate(dateTrans), getTimeFormat())

            Dim p14 As New SqlClient.SqlParameter()
            p14.ParameterName = "@carrierTrip"
            p14.Direction = ParameterDirection.Input
            p14.SqlDbType = SqlDbType.VarChar
            p14.Value = carrierTrip

            Dim p15 As New SqlClient.SqlParameter()
            p15.ParameterName = "@delCode"
            p15.Direction = ParameterDirection.Input
            p15.SqlDbType = SqlDbType.VarChar
            p15.Value = getDeliveryCode(delivery)

            Dim p16 As New SqlClient.SqlParameter()
            p16.ParameterName = "@carrier"
            p16.Direction = ParameterDirection.Input
            p16.SqlDbType = SqlDbType.VarChar
            p16.Value = carrier

            Dim p17 As New SqlClient.SqlParameter()
            p17.ParameterName = "@carrierDepart"
            p17.Direction = ParameterDirection.Input
            p17.SqlDbType = SqlDbType.VarChar
            p17.Value = carrierDepart

            Dim p18 As New SqlClient.SqlParameter()
            p18.ParameterName = "@carrierArrive"
            p18.Direction = ParameterDirection.Input
            p18.SqlDbType = SqlDbType.VarChar
            p18.Value = carrierArrive

            Dim p19 As New SqlClient.SqlParameter()
            p19.ParameterName = "@carrierHatch"
            p19.Direction = ParameterDirection.Input
            p19.SqlDbType = SqlDbType.VarChar
            p19.Value = carrierHatch

            Dim p20 As New SqlClient.SqlParameter()
            p20.ParameterName = "@portTrans"
            p20.Direction = ParameterDirection.Input
            p20.SqlDbType = SqlDbType.VarChar
            p20.Value = portTrans

            Dim p21 As New SqlClient.SqlParameter()
            p21.ParameterName = "@portUnload"
            p21.Direction = ParameterDirection.Input
            p21.SqlDbType = SqlDbType.VarChar
            p21.Value = portUnload

            Dim paramRecCount As New SqlClient.SqlParameter()
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)
            cmd.Parameters.Add(p7)
            'cmd.Parameters.Add(p8)
            cmd.Parameters.Add(p9)
            cmd.Parameters.Add(p10)
            cmd.Parameters.Add(p11)
            cmd.Parameters.Add(pOptr)
            cmd.Parameters.Add(pEncoded)
            cmd.Parameters.Add(p12)
            cmd.Parameters.Add(p13)
            cmd.Parameters.Add(p14)
            cmd.Parameters.Add(p15)
            cmd.Parameters.Add(p16)
            cmd.Parameters.Add(p17)
            cmd.Parameters.Add(p18)
            cmd.Parameters.Add(p19)
            cmd.Parameters.Add(p20)
            cmd.Parameters.Add(p21)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter()
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Sub updateSICCDetails(ByVal cc As String, ByVal specie As String, ByVal specieCode As String, _
    ByVal faoNo As String, ByVal dateFrom As String, ByVal dateTo As String, _
    ByVal estLiveWeight As String, ByVal estWeightRecord As String)
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_update_SICCDetails"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@cc#"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = cc

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@specie"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = specie

            Dim p3 As New SqlClient.SqlParameter()
            p3.ParameterName = "@specieCode"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = specieCode

            Dim p4 As New SqlClient.SqlParameter()
            p4.ParameterName = "@fao#"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = faoNo

            Dim p5 As New SqlClient.SqlParameter()
            p5.ParameterName = "@dateFrom"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.DateTime
            p5.Value = Format(CDate(dateFrom), getTimeFormat())

            Dim p6 As New SqlClient.SqlParameter()
            p6.ParameterName = "@dateTo"
            p6.Direction = ParameterDirection.Input
            p6.SqlDbType = SqlDbType.DateTime
            p6.Value = Format(CDate(dateTo), getTimeFormat())

            Dim p7 As New SqlClient.SqlParameter()
            p7.ParameterName = "@estLiveWeight"
            p7.Direction = ParameterDirection.Input
            p7.SqlDbType = SqlDbType.Float
            p7.Value = estLiveWeight

            Dim p8 As New SqlClient.SqlParameter()
            p8.ParameterName = "@estWeightRecord"
            p8.Direction = ParameterDirection.Input
            p8.SqlDbType = SqlDbType.Float
            p8.Value = estWeightRecord

            Dim paramRecCount As New SqlClient.SqlParameter()
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)
            cmd.Parameters.Add(p7)
            cmd.Parameters.Add(p8)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter()
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Sub saveNewFishSpecie(ByVal code As String, ByVal specie As String, ByVal weight As String, _
    ByVal sizeFrom As String, ByVal sizeTo As String)
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_addNew_Fish"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@fishCode"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = code 'specie.Substring(0, 1) & weight

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@specieName"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = specie

            Dim p3 As New SqlClient.SqlParameter()
            p3.ParameterName = "@fishSize"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.Float
            p3.Value = weight

            Dim p4 As New SqlClient.SqlParameter()
            p4.ParameterName = "@sizeCode"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = getFishSizeCode(sizeFrom, sizeTo)

            Dim pOptr As New SqlClient.SqlParameter()
            pOptr.ParameterName = "@optr"
            pOptr.Direction = ParameterDirection.Input
            pOptr.SqlDbType = SqlDbType.VarChar
            pOptr.Value = modModule.getUsername

            Dim pEncoded As New SqlClient.SqlParameter()
            pEncoded.ParameterName = "@dateTimeEncoded"
            pEncoded.Direction = ParameterDirection.Input
            pEncoded.SqlDbType = SqlDbType.DateTime
            pEncoded.Value = getServerDateTime()

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(pOptr)
            cmd.Parameters.Add(pEncoded)

            Dim daBuyer As New SqlClient.SqlDataAdapter()
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            daBuyer.Dispose()
            dsBuyer.Dispose()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub

    Public Sub saveNewFishSpecie(ByVal code As String, ByVal specie As String, ByVal baseSpecie As String)
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_addNew_Specie"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@id"
            p1.SqlDbType = SqlDbType.BigInt
            p1.Direction = ParameterDirection.Input
            p1.Value = getFishSpecieCounter()

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@specieCode"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = code

            Dim p3 As New SqlClient.SqlParameter()
            p3.ParameterName = "@specie"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = specie

            Dim pOptr As New SqlClient.SqlParameter()
            pOptr.ParameterName = "@optr"
            pOptr.Direction = ParameterDirection.Input
            pOptr.SqlDbType = SqlDbType.VarChar
            pOptr.Value = modModule.getUsername

            Dim pEncoded As New SqlClient.SqlParameter()
            pEncoded.ParameterName = "@dateTimeEncoded"
            pEncoded.Direction = ParameterDirection.Input
            pEncoded.SqlDbType = SqlDbType.DateTime
            pEncoded.Value = getServerDateTime()

            Dim p4 As New SqlClient.SqlParameter()
            p4.ParameterName = "@prodCode"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = ""

            Dim p5 As New SqlClient.SqlParameter()
            p5.ParameterName = "@baseSpecie"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.VarChar
            p5.Value = baseSpecie

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(pOptr)
            cmd.Parameters.Add(pEncoded)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)

            Dim daBuyer As New SqlClient.SqlDataAdapter()
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            daBuyer.Dispose()
            dsBuyer.Dispose()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub

    Public Sub updateFishSpecie(ByVal code As String, ByVal specie As String, ByVal weight As String, _
    ByVal sizeFrom As String, ByVal sizeTo As String)
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_update_Fish"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@fishCode"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = code

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@specieName"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = specie

            Dim p3 As New SqlClient.SqlParameter()
            p3.ParameterName = "@fishSize"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.Float
            p3.Value = weight

            Dim p4 As New SqlClient.SqlParameter()
            p4.ParameterName = "@sizeCode"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = getFishSizeCode(sizeFrom, sizeTo)

            Dim pOptr As New SqlClient.SqlParameter()
            pOptr.ParameterName = "@optr"
            pOptr.Direction = ParameterDirection.Input
            pOptr.SqlDbType = SqlDbType.VarChar
            pOptr.Value = modModule.getUsername

            Dim pEncoded As New SqlClient.SqlParameter()
            pEncoded.ParameterName = "@dateTimeEncoded"
            pEncoded.Direction = ParameterDirection.Input
            pEncoded.SqlDbType = SqlDbType.DateTime
            pEncoded.Value = getServerDateTime()

            Dim paramRecCount As New SqlClient.SqlParameter()
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(pOptr)
            cmd.Parameters.Add(pEncoded)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter()
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Sub updateFishSpecie(ByVal code As String, ByVal specie As String, ByVal baseSpecie As String)
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_update_FishSpecie"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@specieCode"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = code

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@specie"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = specie

            Dim pOptr As New SqlClient.SqlParameter()
            pOptr.ParameterName = "@optr"
            pOptr.Direction = ParameterDirection.Input
            pOptr.SqlDbType = SqlDbType.VarChar
            pOptr.Value = modModule.getUsername

            Dim pEncoded As New SqlClient.SqlParameter()
            pEncoded.ParameterName = "@dateTimeEncoded"
            pEncoded.Direction = ParameterDirection.Input
            pEncoded.SqlDbType = SqlDbType.DateTime
            pEncoded.Value = getServerDateTime()

            Dim p5 As New SqlClient.SqlParameter()
            p5.ParameterName = "@baseSpecie"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.VarChar
            p5.Value = baseSpecie

            Dim paramRecCount As New SqlClient.SqlParameter()
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(pOptr)
            cmd.Parameters.Add(pEncoded)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter()
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Function getFishBinTareWeight(ByVal bin As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getFishBinTareWeight"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@bin"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = bin

            cmd.Parameters.Add(p1)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As Double
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetDouble(0)
                Else
                    returnValue = 0
                End If
            Else
                returnValue = 0
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function validateFishBinsFromDepositInventory(ByVal bin As String) As Boolean
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getExistence_FishBinsFromDepositInventory"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@binNo"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = bin

            Dim paramRecCount As New SqlClient.SqlParameter()
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(paramRecCount)

            Dim dr As SqlClient.SqlDataReader
            dr = cmd.ExecuteReader

            Dim returnValue As Boolean
            If dr.Read Then
                If Not dr(0) Is DBNull.Value Then
                    If dr.GetString(1) = "NO" Then
                        returnValue = True
                    Else
                        returnValue = False
                    End If
                Else
                    returnValue = False
                End If
            Else
                returnValue = False
            End If

            c.Close()
            dr.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getFishBinForDepositCounter() As Long
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getCounter_FishBinForDeposit"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim ctr As Long
            If drCode.Read Then
                ctr = drCode.GetInt64(0) + 1
            Else
                ctr = 1
            End If

            drCode.Close()
            c.Close()
            Return ctr
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getFishBinWithdrawalCounter() As Long
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getCounter_FishBinWithdrawal"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim ctr As Long
            If drCode.Read Then
                ctr = drCode.GetInt64(0) + 1
            Else
                ctr = 1
            End If

            drCode.Close()
            c.Close()
            Return ctr
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getFishBinCode(ByVal bin As String) As String
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getFishBinCode"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@bin"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = bin

            cmd.Parameters.Add(p1)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As String
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetString(0)
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getDeliveryCode(ByVal delivery As String) As String
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getDeliveryCode"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@delivery"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = delivery

            cmd.Parameters.Add(p1)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As String
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetString(0)
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getCSCode(ByVal cs As String) As String
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getCSCode"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@cs"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = cs

            cmd.Parameters.Add(p1)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As String
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetString(0)
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getFishSpecieCode(ByVal specie As String, ByVal weight As Double) As String
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getFishSpecieCode"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@specie"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = specie

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@weight"
            p2.SqlDbType = SqlDbType.Float
            p2.Direction = ParameterDirection.Input
            p2.Value = weight

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As String
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetString(0)
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getFAOOcean(ByVal code As String) As String
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getFAOOCean"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@fao#"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = code

            cmd.Parameters.Add(p1)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As String
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetString(0)
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub updateFishSupplier(ByVal code As String, ByVal supplier As String)
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_update_FishSupplier"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@supCode"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = code

            Dim p3 As New SqlClient.SqlParameter()
            p3.ParameterName = "@supName"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = supplier

            Dim pOptr As New SqlClient.SqlParameter()
            pOptr.ParameterName = "@optr"
            pOptr.Direction = ParameterDirection.Input
            pOptr.SqlDbType = SqlDbType.VarChar
            pOptr.Value = modModule.getUsername

            Dim pEncoded As New SqlClient.SqlParameter()
            pEncoded.ParameterName = "@dateTimeEncoded"
            pEncoded.Direction = ParameterDirection.Input
            pEncoded.SqlDbType = SqlDbType.DateTime
            pEncoded.Value = getServerDateTime()

            Dim paramRecCount As New SqlClient.SqlParameter()
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(pOptr)
            cmd.Parameters.Add(pEncoded)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter()
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Sub saveNewFAO(ByVal code As String, ByVal ocean As String)
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_addNew_FAO"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@id"
            p1.SqlDbType = SqlDbType.BigInt
            p1.Direction = ParameterDirection.Input
            p1.Value = getFAOCounter()

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@fao#"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = code

            Dim p3 As New SqlClient.SqlParameter()
            p3.ParameterName = "@area"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = ocean

            Dim pOptr As New SqlClient.SqlParameter()
            pOptr.ParameterName = "@optr"
            pOptr.Direction = ParameterDirection.Input
            pOptr.SqlDbType = SqlDbType.VarChar
            pOptr.Value = modModule.getUsername

            Dim pEncoded As New SqlClient.SqlParameter()
            pEncoded.ParameterName = "@dateTimeEncoded"
            pEncoded.Direction = ParameterDirection.Input
            pEncoded.SqlDbType = SqlDbType.DateTime
            pEncoded.Value = getServerDateTime()

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(pOptr)
            cmd.Parameters.Add(pEncoded)

            Dim daBuyer As New SqlClient.SqlDataAdapter()
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            daBuyer.Dispose()
            dsBuyer.Dispose()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub

    Public Sub updateFAO(ByVal code As String, ByVal ocean As String)
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_update_FAO"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@fao#"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = code

            Dim p3 As New SqlClient.SqlParameter()
            p3.ParameterName = "@area"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = ocean

            Dim pOptr As New SqlClient.SqlParameter()
            pOptr.ParameterName = "@optr"
            pOptr.Direction = ParameterDirection.Input
            pOptr.SqlDbType = SqlDbType.VarChar
            pOptr.Value = modModule.getUsername

            Dim pEncoded As New SqlClient.SqlParameter()
            pEncoded.ParameterName = "@dateTimeEncoded"
            pEncoded.Direction = ParameterDirection.Input
            pEncoded.SqlDbType = SqlDbType.DateTime
            pEncoded.Value = getServerDateTime()

            Dim paramRecCount As New SqlClient.SqlParameter()
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(pOptr)
            cmd.Parameters.Add(pEncoded)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter()
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Sub updateFishBinForDeposits(ByVal code As String, ByVal bin As String, _
    ByVal dateTime As String, ByVal cs As String, ByVal remarks As String, _
    ByVal lot As String, ByVal fishSpecie As String, ByVal size As String, _
    ByVal grossWeight As Double, ByVal sublot As String)
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_update_FishBinForDeposits"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@depositCode"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = code

            Dim p3 As New SqlClient.SqlParameter()
            p3.ParameterName = "@binCode"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = getFishBinCode(bin)

            Dim p4 As New SqlClient.SqlParameter()
            p4.ParameterName = "@batchlot"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = lot

            Dim p5 As New SqlClient.SqlParameter()
            p5.ParameterName = "@specieCode"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.VarChar
            p5.Value = getSpecieCode(fishSpecie)

            Dim p6 As New SqlClient.SqlParameter()
            p6.ParameterName = "@csCode"
            p6.Direction = ParameterDirection.Input
            p6.SqlDbType = SqlDbType.VarChar
            p6.Value = getCSCode(cs)

            Dim p7 As New SqlClient.SqlParameter()
            p7.ParameterName = "@grossWeight"
            p7.Direction = ParameterDirection.Input
            p7.SqlDbType = SqlDbType.Float
            p7.Value = grossWeight

            Dim p8 As New SqlClient.SqlParameter()
            p8.ParameterName = "@dateTimeTransfer"
            p8.Direction = ParameterDirection.Input
            p8.SqlDbType = SqlDbType.DateTime
            p8.Value = dateTime

            Dim p9 As New SqlClient.SqlParameter()
            p9.ParameterName = "@remarks"
            p9.Direction = ParameterDirection.Input
            p9.SqlDbType = SqlDbType.VarChar
            p9.Value = remarks

            Dim p10 As New SqlClient.SqlParameter()
            p10.ParameterName = "@withdraw"
            p10.Direction = ParameterDirection.Input
            p10.SqlDbType = SqlDbType.VarChar
            p10.Value = "NO"

            Dim p11 As New SqlClient.SqlParameter()
            p11.ParameterName = "@depositStatus"
            p11.Direction = ParameterDirection.Input
            p11.SqlDbType = SqlDbType.VarChar
            p11.Value = "*"

            Dim pOptr As New SqlClient.SqlParameter()
            pOptr.ParameterName = "@optr"
            pOptr.Direction = ParameterDirection.Input
            pOptr.SqlDbType = SqlDbType.VarChar
            pOptr.Value = modModule.getUsername

            Dim pEncoded As New SqlClient.SqlParameter()
            pEncoded.ParameterName = "@dateTimeEncoded"
            pEncoded.Direction = ParameterDirection.Input
            pEncoded.SqlDbType = SqlDbType.DateTime
            pEncoded.Value = getServerDateTime()

            Dim p12 As New SqlClient.SqlParameter()
            p12.ParameterName = "@sizeCode"
            p12.Direction = ParameterDirection.Input
            p12.SqlDbType = SqlDbType.VarChar
            p12.Value = getFishSizeCodeByRange(size)

            Dim p13 As New SqlClient.SqlParameter()
            p13.ParameterName = "@sublot"
            p13.Direction = ParameterDirection.Input
            p13.SqlDbType = SqlDbType.VarChar
            p13.Value = sublot

            Dim paramRecCount As New SqlClient.SqlParameter()
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)
            cmd.Parameters.Add(p7)
            cmd.Parameters.Add(p8)
            cmd.Parameters.Add(p9)
            cmd.Parameters.Add(p10)
            cmd.Parameters.Add(p11)
            cmd.Parameters.Add(pOptr)
            cmd.Parameters.Add(pEncoded)
            cmd.Parameters.Add(p12)
            cmd.Parameters.Add(p13)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter()
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Function getBatchlotsDeposited() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_display_FishLotsDeposited"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getBatchlotsDeposited(ByVal cs As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_display_FishLotsDepositedByColdStorage"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@cs"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = cs

            cmd.Parameters.Add(p1)

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getBatchlotsDeposited(ByVal dateFrom As String, ByVal dateTo As String, ByVal fv As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getLotByDateDepositedAndVessel"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@dateFrom"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            p1.Value = dateFrom

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@dateTo"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.DateTime
            p2.Value = dateTo

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@fv"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = fv

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getFishLotDepositedDetails(ByVal cs As String, ByVal lot As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_display_FishLotsDetailsDepositedByColdStorage"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@cs"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = cs

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@lot"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = lot

            Dim p3 As New SqlClient.SqlParameter()
            p3.ParameterName = "@select"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = ""

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getFishBinDepositedDetails(ByVal cs As String, ByVal lot As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_display_FishBinDepositedByColdStorage"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@cs"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = cs

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@lot"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = lot

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getListsOfFishBinsForWithdrawal() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_display_ListsFishBinWithdrawal"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@bin#"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = ""

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@fishSpecie"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = ""

            Dim p3 As New SqlClient.SqlParameter()
            p3.ParameterName = "@fishSize"
            p3.SqlDbType = SqlDbType.VarChar
            p3.Direction = ParameterDirection.Input
            p3.Value = ""

            Dim p4 As New SqlClient.SqlParameter()
            p4.ParameterName = "@weight"
            p4.SqlDbType = SqlDbType.Float
            p4.Direction = ParameterDirection.Input
            p4.Value = "0"

            Dim p5 As New SqlClient.SqlParameter()
            p5.ParameterName = "@tare"
            p5.SqlDbType = SqlDbType.Float
            p5.Direction = ParameterDirection.Input
            p5.Value = "0"

            Dim p6 As New SqlClient.SqlParameter()
            p6.ParameterName = "@net"
            p6.SqlDbType = SqlDbType.Float
            p6.Direction = ParameterDirection.Input
            p6.Value = "0"

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getListsOfFishBinsForDeposit() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_display_ListsFishBinForDeposit"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@bin#"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = ""

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@weight"
            p2.SqlDbType = SqlDbType.Float
            p2.Direction = ParameterDirection.Input
            p2.Value = "0"

            Dim p3 As New SqlClient.SqlParameter()
            p3.ParameterName = "@tare"
            p3.SqlDbType = SqlDbType.Float
            p3.Direction = ParameterDirection.Input
            p3.Value = "0"

            Dim p4 As New SqlClient.SqlParameter()
            p4.ParameterName = "@net"
            p4.SqlDbType = SqlDbType.Float
            p4.Direction = ParameterDirection.Input
            p4.Value = "0"

            Dim p5 As New SqlClient.SqlParameter()
            p5.ParameterName = "@specie"
            p5.SqlDbType = SqlDbType.VarChar
            p5.Direction = ParameterDirection.Input
            p5.Value = ""

            Dim p6 As New SqlClient.SqlParameter()
            p6.ParameterName = "@size"
            p6.SqlDbType = SqlDbType.VarChar
            p6.Direction = ParameterDirection.Input
            p6.Value = ""

            Dim p7 As New SqlClient.SqlParameter()
            p7.ParameterName = "@lane"
            p7.SqlDbType = SqlDbType.VarChar
            p7.Direction = ParameterDirection.Input
            p7.Value = ""

            Dim p8 As New SqlClient.SqlParameter()
            p8.ParameterName = "@position"
            p8.SqlDbType = SqlDbType.VarChar
            p8.Direction = ParameterDirection.Input
            p8.Value = ""

            Dim p9 As New SqlClient.SqlParameter()
            p9.ParameterName = "@height"
            p9.SqlDbType = SqlDbType.VarChar
            p9.Direction = ParameterDirection.Input
            p9.Value = ""

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)
            cmd.Parameters.Add(p7)
            cmd.Parameters.Add(p8)
            cmd.Parameters.Add(p9)

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getListsCOSDetails() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_display_ListsCOSDetails"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@specie"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = ""

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@size"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = ""

            Dim p3 As New SqlClient.SqlParameter()
            p3.ParameterName = "@price"
            p3.SqlDbType = SqlDbType.Float
            p3.Direction = ParameterDirection.Input
            p3.Value = 0

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getListsCOSDetails(ByVal lot As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_display_ListsCOSDetails2"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@lot"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = lot

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@price"
            p2.SqlDbType = SqlDbType.Float
            p2.Direction = ParameterDirection.Input
            p2.Value = 0

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getListsCOPDetails(ByVal cop As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_display_ListsCOPDetails"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@cop"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = cop

            cmd.Parameters.Add(p1)

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getListsOfFishRejects() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_display_ListsFishRejects"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@section"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = ""

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@fishSpecie"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = ""

            Dim p3 As New SqlClient.SqlParameter()
            p3.ParameterName = "@fishSize"
            p3.SqlDbType = SqlDbType.VarChar
            p3.Direction = ParameterDirection.Input
            p3.Value = ""

            Dim p4 As New SqlClient.SqlParameter()
            p4.ParameterName = "@defects"
            p4.SqlDbType = SqlDbType.VarChar
            p4.Direction = ParameterDirection.Input
            p4.Value = ""

            Dim p5 As New SqlClient.SqlParameter()
            p5.ParameterName = "@weight"
            p5.SqlDbType = SqlDbType.Float
            p5.Direction = ParameterDirection.Input
            p5.Value = "0"

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub saveNewFishBinWithdrawalsDetails(ByVal code As String, ByVal bin As String, _
    ByVal lot As String, ByVal pallet As String, ByVal qty As String, ByVal pCode As String)
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_addNew_FishBinsWithdrawalDetails"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@fwsCode"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = code

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@depositCode"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = getDepositCode(bin, lot)

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@palletCode"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = pallet

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@qty"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.Float
            p4.Value = CDbl(qty)

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@pCode"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.VarChar
            p5.Value = pCode

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)

            Dim daBuyer As New SqlClient.SqlDataAdapter()
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            daBuyer.Dispose()
            dsBuyer.Dispose()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub

    Public Sub saveNewFishBinWithdrawalsDetails(ByVal code As String, ByVal depositCode As String)
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_addNew_FishBinsWithdrawalDetails"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@fwsCode"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = code

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@depositCode"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = depositCode

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@palletCode"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = ""

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@qty"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.Float
            p4.Value = "0"

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@pCode"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.VarChar
            p5.Value = ""

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)

            Dim daBuyer As New SqlClient.SqlDataAdapter()
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            daBuyer.Dispose()
            dsBuyer.Dispose()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub

    Public Sub saveNewFishBinWithdrawalsDetails2(ByVal code As String, ByVal depositCode As String, _
    ByVal qty As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_addNew_FishBinsWithdrawalDetails2"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@fwsCode"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = code

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@depositCode"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = depositCode

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@qty"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.Float
            p3.Value = CDbl(qty)

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            daBuyer.Dispose()
            dsBuyer.Dispose()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub

    Public Function getDepositCode(ByVal bin As String, ByVal lot As String) As String
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getDepositCode"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@bin"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = bin

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@lot"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = lot

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As String
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetString(0)
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getDepositCode(ByVal bin As String, ByVal lot As String, ByVal fws As String) As String
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getDepositCodeByFWS"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@bin"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = bin

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@lot"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = lot

            Dim p3 As New SqlClient.SqlParameter()
            p3.ParameterName = "@fws"
            p3.SqlDbType = SqlDbType.VarChar
            p3.Direction = ParameterDirection.Input
            p3.Value = fws

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As String
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetString(0)
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getDepositCode(ByVal bin As String) As String
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getDepositCode_bin"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@bin"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = bin

            cmd.Parameters.Add(p1)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As String
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetString(0)
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub updateFishBinWithdrawalStatus(ByVal bin As String, ByVal lot As String, ByVal status As String)
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_update_FishBinWithdrawal"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@depositCode"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = getDepositCode(bin, lot)

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@withdraw"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = status

            Dim pOptr As New SqlClient.SqlParameter()
            pOptr.ParameterName = "@optr"
            pOptr.Direction = ParameterDirection.Input
            pOptr.SqlDbType = SqlDbType.VarChar
            pOptr.Value = modModule.getUsername

            Dim pEncoded As New SqlClient.SqlParameter()
            pEncoded.ParameterName = "@dateTimeEncoded"
            pEncoded.Direction = ParameterDirection.Input
            pEncoded.SqlDbType = SqlDbType.DateTime
            pEncoded.Value = getServerDateTime()

            Dim paramRecCount As New SqlClient.SqlParameter()
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(pOptr)
            cmd.Parameters.Add(pEncoded)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter()
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Sub updateFishBinWithdrawalStatus(ByVal depositCode As String, ByVal status As String)
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_update_FishBinWithdrawal"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@depositCode"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = depositCode

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@withdraw"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = status

            Dim pOptr As New SqlClient.SqlParameter()
            pOptr.ParameterName = "@optr"
            pOptr.Direction = ParameterDirection.Input
            pOptr.SqlDbType = SqlDbType.VarChar
            pOptr.Value = modModule.getUsername

            Dim pEncoded As New SqlClient.SqlParameter()
            pEncoded.ParameterName = "@dateTimeEncoded"
            pEncoded.Direction = ParameterDirection.Input
            pEncoded.SqlDbType = SqlDbType.DateTime
            pEncoded.Value = getServerDateTime()

            Dim paramRecCount As New SqlClient.SqlParameter()
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(pOptr)
            cmd.Parameters.Add(pEncoded)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter()
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Function getAllFWS() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_displayAll_FWS"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getFWSDetails(ByVal fws As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_display_FWSDetails"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@fws"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = fws

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@select"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = "Yes"

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function validateFWS(ByVal fws As String) As Boolean
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getExistence_FWS"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@fws"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = fws

            Dim paramRecCount As New SqlClient.SqlParameter()
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(paramRecCount)

            Dim da As New SqlClient.SqlDataAdapter()
            Dim ds As New DataSet("dbPPICIS")

            da.SelectCommand = cmd
            da.Fill(ds)

            If Val(cmd.Parameters("@recCount").Value) > 0 Then
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return True
            Else
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return False
            End If
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub updateFWS(ByVal code As String, ByVal dateTime As String, _
    ByVal shift As String, ByVal lot As String, ByVal prodnDate As String, _
    ByVal prodnShift As String, ByVal relNo As String, ByVal purpose As String)
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_update_FWS"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@fwsCode"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = code.Trim

            Dim p3 As New SqlClient.SqlParameter()
            p3.ParameterName = "@dateReleased"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.DateTime
            p3.Value = dateTime 'Format(CDate(dateTime), getTimeFormat())

            Dim p4 As New SqlClient.SqlParameter()
            p4.ParameterName = "@shift"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = shift

            Dim pOptr As New SqlClient.SqlParameter()
            pOptr.ParameterName = "@optr"
            pOptr.Direction = ParameterDirection.Input
            pOptr.SqlDbType = SqlDbType.VarChar
            pOptr.Value = modModule.getUsername

            Dim pEncoded As New SqlClient.SqlParameter()
            pEncoded.ParameterName = "@dateTimeEncoded"
            pEncoded.Direction = ParameterDirection.Input
            pEncoded.SqlDbType = SqlDbType.DateTime
            pEncoded.Value = getServerDateTime()

            Dim p5 As New SqlClient.SqlParameter()
            p5.ParameterName = "@prodnDate"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.DateTime
            p5.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p6 As New SqlClient.SqlParameter()
            p6.ParameterName = "@prodnShift"
            p6.Direction = ParameterDirection.Input
            p6.SqlDbType = SqlDbType.VarChar
            p6.Value = prodnShift

            Dim p7 As New SqlClient.SqlParameter()
            p7.ParameterName = "@relNo"
            p7.Direction = ParameterDirection.Input
            p7.SqlDbType = SqlDbType.VarChar
            p7.Value = relNo

            Dim p8 As New SqlClient.SqlParameter
            p8.ParameterName = "@purpose"
            p8.Direction = ParameterDirection.Input
            p8.SqlDbType = SqlDbType.VarChar
            p8.Value = purpose

            Dim paramRecCount As New SqlClient.SqlParameter()
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(pOptr)
            cmd.Parameters.Add(pEncoded)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)
            cmd.Parameters.Add(p7)
            cmd.Parameters.Add(p8)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter()
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Sub deleteFWS(ByVal code As String)
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_delete_FWS"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@fwsCode"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = code

            Dim paramRecCount As New SqlClient.SqlParameter()
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter()
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Sub deleteFS(ByVal code As String)
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_delete_FS"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@fsCode"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = code

            Dim paramRecCount As New SqlClient.SqlParameter()
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter()
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Sub exportFile(ByVal ds As DataSet)
        Dim excel As New Microsoft.Office.Interop.Excel.ApplicationClass
        Dim wBook As Microsoft.Office.Interop.Excel.Workbook
        Dim wSheet As Microsoft.Office.Interop.Excel.Worksheet

        wBook = excel.Workbooks.Add
        wSheet = wBook.ActiveSheet

        Dim dt As DataTable = ds.Tables(0)
        Dim dc As DataColumn
        Dim dr As DataRow
        Dim col As Integer = 0
        Dim row As Integer = 0

        For Each dc In dt.Columns
            col += 1
            excel.Cells(1, col) = dc.ColumnName
        Next

        For Each dr In dt.Rows
            row += 1
            col = 0
            For Each dc In dt.Columns
                col += 1
                excel.Cells(row + 1, col) = dr(dc.ColumnName)
            Next
        Next

        wSheet.Columns.AutoFit()

        Dim fileDialog As New SaveFileDialog
        Dim result As DialogResult = fileDialog.ShowDialog
        'fileDialog.Filter = "Excel File (*.xls)|*.xls"
        Dim fileName As String = fileDialog.FileName() & ".xls"
        Dim blnFileOpen As Boolean = False

        Try
            Dim fileTemp As System.IO.FileStream = System.IO.File.OpenWrite(fileName)
            fileTemp.Close()
        Catch e As Exception
            MsgBox(e.Message)
            blnFileOpen = False
        End Try

        If System.IO.File.Exists(fileName) Then
            System.IO.File.Delete(fileName)
        End If

        wBook.SaveAs(fileName)
        excel.Workbooks.Open(fileName)
        excel.Visible = True
    End Sub

    Public Function validateAllocatedCC(ByVal cc As String) As Boolean
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getExistence_SICC_Allocated"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@cc"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = cc

            Dim paramRecCount As New SqlClient.SqlParameter()
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(paramRecCount)

            Dim da As New SqlClient.SqlDataAdapter()
            Dim ds As New DataSet("dbPPICIS")

            da.SelectCommand = cmd
            da.Fill(ds)

            If Val(cmd.Parameters("@recCount").Value) > 0 Then
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return True
            Else
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return False
            End If
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getAllBatchlotsWithdraw(ByVal prodnDate As String, ByVal shift As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_display_BatchlotWithdraw"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@prodnDate"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            If prodnDate = "" Then
                p1.Value = Format(CDate("1/1/1901"), getTimeFormat())
            Else
                p1.Value = Format(CDate(prodnDate), getTimeFormat())
            End If

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@shift"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = shift

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getAllFishSpecieWithdrawPerBatchlot(ByVal prodnDate As String, _
    ByVal shift As String, ByVal batchlot As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_display_FishSpecieWithdrawPerLot"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@prodnDate"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            If prodnDate = "" Then
                p1.Value = Format(CDate("1/1/1901"), getTimeFormat())
            Else
                p1.Value = Format(CDate(prodnDate), getTimeFormat())
            End If

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@shift"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = shift

            Dim p3 As New SqlClient.SqlParameter()
            p3.ParameterName = "@lot"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = batchlot

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getAllFishSizesWithdrawPerBatchlot(ByVal prodnDate As String, _
    ByVal shift As String, ByVal batchlot As String, ByVal specie As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_display_FishSizesWithdrawPerLot"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@prodnDate"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            If prodnDate = "" Then
                p1.Value = Format(CDate("1/1/1901"), getTimeFormat())
            Else
                p1.Value = Format(CDate(prodnDate), getTimeFormat())
            End If

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@shift"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = shift

            Dim p3 As New SqlClient.SqlParameter()
            p3.ParameterName = "@lot"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = batchlot

            Dim p4 As New SqlClient.SqlParameter()
            p4.ParameterName = "@specie"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = specie

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function validateMeatRecovery(ByVal prodnDate As String, ByVal shift As String, _
    ByVal lot As String, ByVal specie As String, ByVal size As String, ByVal meat As String) As Boolean
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getExistence_MeatRecovery"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@prodnDate"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            p1.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@shift"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = shift

            Dim p3 As New SqlClient.SqlParameter()
            p3.ParameterName = "@lot"
            p3.SqlDbType = SqlDbType.VarChar
            p3.Direction = ParameterDirection.Input
            p3.Value = lot

            Dim p4 As New SqlClient.SqlParameter()
            p4.ParameterName = "@specie"
            p4.SqlDbType = SqlDbType.VarChar
            p4.Direction = ParameterDirection.Input
            p4.Value = specie

            Dim p5 As New SqlClient.SqlParameter()
            p5.ParameterName = "@size"
            p5.SqlDbType = SqlDbType.VarChar
            p5.Direction = ParameterDirection.Input
            p5.Value = size

            Dim p6 As New SqlClient.SqlParameter()
            p6.ParameterName = "@meat"
            p6.SqlDbType = SqlDbType.VarChar
            p6.Direction = ParameterDirection.Input
            p6.Value = meat

            Dim paramRecCount As New SqlClient.SqlParameter()
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)
            cmd.Parameters.Add(paramRecCount)

            Dim da As New SqlClient.SqlDataAdapter()
            Dim ds As New DataSet("dbPPICIS")

            da.SelectCommand = cmd
            da.Fill(ds)

            If Val(cmd.Parameters("@recCount").Value) > 0 Then
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return True
            Else
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return False
            End If
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub saveNewMeatRecovery(ByVal prodnDate As String, ByVal shift As String, _
    ByVal lot As String, ByVal specie As String, ByVal size As String, _
    ByVal meat As String, ByVal weight As String)
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_addNew_MeatRecovery"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p0 As New SqlClient.SqlParameter()
            p0.ParameterName = "@id"
            p0.Direction = ParameterDirection.Input
            p0.SqlDbType = SqlDbType.BigInt
            p0.Value = getMeatRecoveryCounter()

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@prodnDate"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            p1.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@prodnShift"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = shift

            Dim p3 As New SqlClient.SqlParameter()
            p3.ParameterName = "@lot#"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = lot

            Dim p4 As New SqlClient.SqlParameter()
            p4.ParameterName = "@specieCode"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = getSpecieCode(specie)  'getFishSpecieCode(specie, CDbl(size))

            Dim p5 As New SqlClient.SqlParameter()
            p5.ParameterName = "@meatCode"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.VarChar
            p5.Value = getMeatCode(meat)

            Dim p6 As New SqlClient.SqlParameter()
            p6.ParameterName = "@weight"
            p6.Direction = ParameterDirection.Input
            p6.SqlDbType = SqlDbType.Float
            p6.Value = CDbl(weight)

            Dim pOptr As New SqlClient.SqlParameter()
            pOptr.ParameterName = "@optr"
            pOptr.Direction = ParameterDirection.Input
            pOptr.SqlDbType = SqlDbType.VarChar
            pOptr.Value = modModule.getUsername

            Dim pEncoded As New SqlClient.SqlParameter()
            pEncoded.ParameterName = "@dateTimeEncoded"
            pEncoded.Direction = ParameterDirection.Input
            pEncoded.SqlDbType = SqlDbType.DateTime
            pEncoded.Value = getServerDateTime()

            Dim p7 As New SqlClient.SqlParameter()
            p7.ParameterName = "@sizeCode"
            p7.Direction = ParameterDirection.Input
            p7.SqlDbType = SqlDbType.VarChar
            p7.Value = getFishSizeCodeByRange(size)

            cmd.Parameters.Add(p0)
            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)
            cmd.Parameters.Add(pOptr)
            cmd.Parameters.Add(pEncoded)
            cmd.Parameters.Add(p7)

            Dim daBuyer As New SqlClient.SqlDataAdapter()
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            daBuyer.Dispose()
            dsBuyer.Dispose()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub

    Public Function getMeatCode(ByVal meat As String) As String
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getMeatCode"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@meat"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = meat

            cmd.Parameters.Add(p1)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As String
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetString(0)
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub updateMeatRecovery(ByVal prodnDate As String, ByVal shift As String, _
    ByVal lot As String, ByVal specie As String, ByVal size As String, _
    ByVal meat As String, ByVal weight As String, ByVal id As Long)
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_update_MeatRecovery"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@prodnDate"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            p1.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@prodnShift"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = shift

            Dim p3 As New SqlClient.SqlParameter()
            p3.ParameterName = "@lot#"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = lot

            Dim p4 As New SqlClient.SqlParameter()
            p4.ParameterName = "@specieCode"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = getSpecieCode(specie) 'getFishSpecieCode(specie, CDbl(size))

            Dim p5 As New SqlClient.SqlParameter()
            p5.ParameterName = "@meatCode"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.VarChar
            p5.Value = getMeatCode(meat)

            Dim p6 As New SqlClient.SqlParameter()
            p6.ParameterName = "@weight"
            p6.Direction = ParameterDirection.Input
            p6.SqlDbType = SqlDbType.Float
            p6.Value = CDbl(weight)

            Dim p7 As New SqlClient.SqlParameter()
            p7.ParameterName = "@id"
            p7.Direction = ParameterDirection.Input
            p7.SqlDbType = SqlDbType.BigInt
            p7.Value = id

            Dim pOptr As New SqlClient.SqlParameter()
            pOptr.ParameterName = "@optr"
            pOptr.Direction = ParameterDirection.Input
            pOptr.SqlDbType = SqlDbType.VarChar
            pOptr.Value = modModule.getUsername

            Dim pEncoded As New SqlClient.SqlParameter()
            pEncoded.ParameterName = "@dateTimeEncoded"
            pEncoded.Direction = ParameterDirection.Input
            pEncoded.SqlDbType = SqlDbType.DateTime
            pEncoded.Value = getServerDateTime()

            Dim p8 As New SqlClient.SqlParameter()
            p8.ParameterName = "@sizeCode"
            p8.Direction = ParameterDirection.Input
            p8.SqlDbType = SqlDbType.VarChar
            p8.Value = modModule.getFishSizeCodeByRange(size)

            Dim paramRecCount As New SqlClient.SqlParameter()
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)
            cmd.Parameters.Add(p7)
            cmd.Parameters.Add(pOptr)
            cmd.Parameters.Add(pEncoded)
            cmd.Parameters.Add(p8)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter()
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Function getFishRejectCounter() As Long
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getCounter_FishSpoilage"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim ctr As Long
            If drCode.Read Then
                ctr = drCode.GetInt64(0) + 1
            Else
                ctr = 1
            End If

            drCode.Close()
            c.Close()
            Return ctr
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub saveNewFishRejectDetails(ByVal code As String, ByVal section As String, _
    ByVal defects As String, ByVal specie As String, ByVal size As String, _
    ByVal weight As String, ByVal unit As String, ByVal cookedWeight As Double, _
    ByVal freshWeight As Double, ByVal timeWeigh As DateTime)
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_addNew_FishSpoilageDetails"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@fsCode"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = code

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@secCode"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = getSectionCode(section)

            Dim p3 As New SqlClient.SqlParameter()
            p3.ParameterName = "@defCode"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = getDefectCode(defects)

            Dim p4 As New SqlClient.SqlParameter()
            p4.ParameterName = "@specieCode"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = modModule.getSpecieCode(specie)  'getFishSpecieCode(specie, size)

            Dim p5 As New SqlClient.SqlParameter()
            p5.ParameterName = "@weight"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.Float
            p5.Value = CDbl(weight)

            Dim p6 As New SqlClient.SqlParameter()
            p6.ParameterName = "@unit"
            p6.Direction = ParameterDirection.Input
            p6.SqlDbType = SqlDbType.VarChar
            p6.Value = unit

            Dim p7 As New SqlClient.SqlParameter()
            p7.ParameterName = "@cookedWeight"
            p7.Direction = ParameterDirection.Input
            p7.SqlDbType = SqlDbType.Float
            p7.Value = cookedWeight

            Dim p8 As New SqlClient.SqlParameter()
            p8.ParameterName = "@freshWeight"
            p8.Direction = ParameterDirection.Input
            p8.SqlDbType = SqlDbType.Float
            p8.Value = freshWeight

            Dim p9 As New SqlClient.SqlParameter()
            p9.ParameterName = "@timeWeigh"
            p9.Direction = ParameterDirection.Input
            p9.SqlDbType = SqlDbType.DateTime
            p9.Value = timeWeigh

            Dim p10 As New SqlClient.SqlParameter()
            p10.ParameterName = "@sizeCode"
            p10.Direction = ParameterDirection.Input
            p10.SqlDbType = SqlDbType.VarChar
            p10.Value = modModule.getFishSizeCodeByRange(size)

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)
            cmd.Parameters.Add(p7)
            cmd.Parameters.Add(p8)
            cmd.Parameters.Add(p9)
            cmd.Parameters.Add(p10)

            Dim daBuyer As New SqlClient.SqlDataAdapter()
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            daBuyer.Dispose()
            dsBuyer.Dispose()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub

    Public Sub updateFishReject(ByVal code As String, ByVal dateTime As String, ByVal shift As String, _
    ByVal lot As String)
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_update_FishSpoilage"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@fsCode"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = code

            Dim p3 As New SqlClient.SqlParameter()
            p3.ParameterName = "@prodnDate"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.DateTime
            p3.Value = Format(CDate(dateTime), getTimeFormat())

            Dim p4 As New SqlClient.SqlParameter()
            p4.ParameterName = "@prodnShift"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = shift

            Dim p5 As New SqlClient.SqlParameter()
            p5.ParameterName = "@lot#"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.VarChar
            p5.Value = lot

            Dim p6 As New SqlClient.SqlParameter()
            p6.ParameterName = "@status"
            p6.Direction = ParameterDirection.Input
            p6.SqlDbType = SqlDbType.VarChar
            p6.Value = "*"

            Dim p7 As New SqlClient.SqlParameter()
            p7.ParameterName = "@printStatus"
            p7.Direction = ParameterDirection.Input
            p7.SqlDbType = SqlDbType.Char
            p7.Value = "N"

            Dim p8 As New SqlClient.SqlParameter()
            p8.ParameterName = "@spoilageConversion"
            p8.Direction = ParameterDirection.Input
            p8.SqlDbType = SqlDbType.Float
            p8.Value = 0

            Dim pOptr As New SqlClient.SqlParameter()
            pOptr.ParameterName = "@optr"
            pOptr.Direction = ParameterDirection.Input
            pOptr.SqlDbType = SqlDbType.VarChar
            pOptr.Value = modModule.getUsername

            Dim pEncoded As New SqlClient.SqlParameter()
            pEncoded.ParameterName = "@dateTimeEncoded"
            pEncoded.Direction = ParameterDirection.Input
            pEncoded.SqlDbType = SqlDbType.DateTime
            pEncoded.Value = getServerDateTime()

            Dim paramRecCount As New SqlClient.SqlParameter()
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)
            cmd.Parameters.Add(p7)
            cmd.Parameters.Add(p8)
            cmd.Parameters.Add(pOptr)
            cmd.Parameters.Add(pEncoded)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter()
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Function getSectionCode(ByVal section As String) As String
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getSectionCode"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@section"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = section

            cmd.Parameters.Add(p1)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As String
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetString(0)
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getLotTotalTonnage(ByVal lot As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getLotTotalTonnage"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@lot"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = lot

            cmd.Parameters.Add(p1)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As Double
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetDouble(0)
                Else
                    returnValue = 0
                End If
            Else
                returnValue = 0
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getLotTotalTonnage(ByVal lot As String, ByVal specie As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getLotTotalTonnage_perSpecie"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@lot"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = lot

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@specie"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = specie

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As Double
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetDouble(0)
                Else
                    returnValue = 0
                End If
            Else
                returnValue = 0
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getTotalTonnageWithdraw(ByVal prodnDate As String, ByVal shift As String, _
    ByVal specie As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getTotalTonnageWithdraw_bySpecie"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            p1.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@shift"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = shift

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@specie"
            p3.SqlDbType = SqlDbType.VarChar
            p3.Direction = ParameterDirection.Input
            p3.Value = specie

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As Double
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetDouble(0)
                Else
                    returnValue = 0
                End If
            Else
                returnValue = 0
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getLotFishCondition(ByVal lot As String) As String
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getLotFishCondition"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@lot"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = lot

            cmd.Parameters.Add(p1)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As String
            While drCode.Read
                If Not drCode(0) Is DBNull.Value Then
                    If returnValue = "" Then
                        returnValue = drCode.GetString(0)
                    Else
                        returnValue = returnValue & "/ " & drCode.GetString(0)
                    End If

                Else
                    returnValue = ""
                End If
            End While

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getLotFishSpecie(ByVal lot As String) As String
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getLotFishSpecie"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@lot"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = lot

            cmd.Parameters.Add(p1)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As String
            While drCode.Read
                If Not drCode(0) Is DBNull.Value Then
                    If returnValue = "" Then
                        returnValue = drCode.GetString(0)
                    Else
                        returnValue = returnValue & "/ " & drCode.GetString(0)
                    End If

                Else
                    returnValue = ""
                End If
            End While

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getDefectCode(ByVal defect As String) As String
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getDefectCode"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@defect"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = defect

            cmd.Parameters.Add(p1)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As String
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetString(0)
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getRejectDetails(ByVal code As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_display_SpoilageDetails"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@fsCode"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = code

            cmd.Parameters.Add(p1)

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getRejectCode(ByVal prodnDate As String, ByVal shift As String, ByVal lot As String) As String
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getSpoilageCode"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@prodnDate"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            If prodnDate = "" Then
                p1.Value = "1/1/1901"
            Else
                p1.Value = Format(CDate(prodnDate), getTimeFormat())
            End If

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@shift"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = shift

            Dim p3 As New SqlClient.SqlParameter()
            p3.ParameterName = "@lot"
            p3.SqlDbType = SqlDbType.VarChar
            p3.Direction = ParameterDirection.Input
            p3.Value = lot

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As String
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetString(0)
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function validateFishReject(ByVal prodnDate As String, ByVal shift As String, ByVal lot As String) As Boolean
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getExistence_FishSpoilage"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@prodnDate"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            p1.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@shift"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = shift

            Dim p3 As New SqlClient.SqlParameter()
            p3.ParameterName = "@lot"
            p3.SqlDbType = SqlDbType.VarChar
            p3.Direction = ParameterDirection.Input
            p3.Value = lot

            Dim paramRecCount As New SqlClient.SqlParameter()
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(paramRecCount)

            Dim da As New SqlClient.SqlDataAdapter()
            Dim ds As New DataSet("dbPPICIS")

            da.SelectCommand = cmd
            da.Fill(ds)

            If Val(cmd.Parameters("@recCount").Value) > 0 Then
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return True
            Else
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return False
            End If
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getAllFishRejects() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_displayAll_Spoilage"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getAllSection() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_displayAll_Section"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getSection() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_display_Section"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getDefects() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_display_Defects"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function validateSection(ByVal section As String) As Boolean
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getExistence_Section"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@section"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = section

            Dim paramRecCount As New SqlClient.SqlParameter()
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(paramRecCount)

            Dim da As New SqlClient.SqlDataAdapter()
            Dim ds As New DataSet("dbPPICIS")

            da.SelectCommand = cmd
            da.Fill(ds)

            If Val(cmd.Parameters("@recCount").Value) > 0 Then
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return True
            Else
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return False
            End If
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getSectionCounter() As Long
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getCounter_Section"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim ctr As Long
            If drCode.Read Then
                ctr = drCode.GetInt64(0) + 1
            Else
                ctr = 1
            End If

            drCode.Close()
            c.Close()
            Return ctr
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub updateSection(ByVal code As String, ByVal section As String)
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_update_Section"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@secCode"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = code

            Dim p3 As New SqlClient.SqlParameter()
            p3.ParameterName = "@secDesc"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = section

            Dim pOptr As New SqlClient.SqlParameter()
            pOptr.ParameterName = "@optr"
            pOptr.Direction = ParameterDirection.Input
            pOptr.SqlDbType = SqlDbType.VarChar
            pOptr.Value = modModule.getUsername

            Dim pEncoded As New SqlClient.SqlParameter()
            pEncoded.ParameterName = "@dateTimeEncoded"
            pEncoded.Direction = ParameterDirection.Input
            pEncoded.SqlDbType = SqlDbType.DateTime
            pEncoded.Value = getServerDateTime()

            Dim paramRecCount As New SqlClient.SqlParameter()
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(pOptr)
            cmd.Parameters.Add(pEncoded)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter()
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Function getAllDefects() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_displayAll_Defects"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function validateDefect(ByVal defect As String) As Boolean
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getExistence_Defect"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@defects"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = defect

            Dim paramRecCount As New SqlClient.SqlParameter()
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(paramRecCount)

            Dim da As New SqlClient.SqlDataAdapter()
            Dim ds As New DataSet("dbPPICIS")

            da.SelectCommand = cmd
            da.Fill(ds)

            If Val(cmd.Parameters("@recCount").Value) > 0 Then
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return True
            Else
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return False
            End If
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getDefectCounter() As Long
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getCounter_Defect"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim ctr As Long
            If drCode.Read Then
                ctr = drCode.GetInt64(0) + 1
            Else
                ctr = 1
            End If

            drCode.Close()
            c.Close()
            Return ctr
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub updateDefect(ByVal code As String, ByVal defect As String)
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_update_Defect"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@defCode"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = code

            Dim p3 As New SqlClient.SqlParameter()
            p3.ParameterName = "@defects"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = defect

            Dim pOptr As New SqlClient.SqlParameter()
            pOptr.ParameterName = "@optr"
            pOptr.Direction = ParameterDirection.Input
            pOptr.SqlDbType = SqlDbType.VarChar
            pOptr.Value = modModule.getUsername

            Dim pEncoded As New SqlClient.SqlParameter()
            pEncoded.ParameterName = "@dateTimeEncoded"
            pEncoded.Direction = ParameterDirection.Input
            pEncoded.SqlDbType = SqlDbType.DateTime
            pEncoded.Value = getServerDateTime()

            Dim paramRecCount As New SqlClient.SqlParameter()
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(pOptr)
            cmd.Parameters.Add(pEncoded)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter()
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Function getListsOfFishLot(ByVal year As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_display_ListsOfFishLot"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@trip"
            p1.SqlDbType = SqlDbType.Int
            p1.Direction = ParameterDirection.Input
            p1.Value = 0

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@year"
            p2.SqlDbType = SqlDbType.Int
            p2.Direction = ParameterDirection.Input
            If year = "" Then
                p2.Value = Format(getServerDateTime, "yy")
            Else
                p2.Value = Format(CDate(year), "yy")
            End If

            Dim p3 As New SqlClient.SqlParameter()
            p3.ParameterName = "@sublot"
            p3.SqlDbType = SqlDbType.VarChar
            p3.Direction = ParameterDirection.Input
            p3.Value = ""

            Dim p4 As New SqlClient.SqlParameter()
            p4.ParameterName = "@method"
            p4.SqlDbType = SqlDbType.VarChar
            p4.Direction = ParameterDirection.Input
            p4.Value = ""

            Dim p5 As New SqlClient.SqlParameter()
            p5.ParameterName = "@condition"
            p5.SqlDbType = SqlDbType.VarChar
            p5.Direction = ParameterDirection.Input
            p5.Value = ""

            Dim p6 As New SqlClient.SqlParameter()
            p6.ParameterName = "@batchlot"
            p6.SqlDbType = SqlDbType.VarChar
            p6.Direction = ParameterDirection.Input
            p6.Value = ""

            Dim p7 As New SqlClient.SqlParameter()
            p7.ParameterName = "@well"
            p7.SqlDbType = SqlDbType.VarChar
            p7.Direction = ParameterDirection.Input
            p7.Value = ""

            Dim p8 As New SqlClient.SqlParameter()
            p8.ParameterName = "@type"
            p8.SqlDbType = SqlDbType.VarChar
            p8.Direction = ParameterDirection.Input
            p8.Value = ""

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)
            cmd.Parameters.Add(p7)
            cmd.Parameters.Add(p8)

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getFishlotBySICC(ByVal certificate As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_display_FishLotBySICC"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@catch"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = certificate

            cmd.Parameters.Add(p1)

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getContainersBySICC(ByVal cc As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_display_CCContainers"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@cc#"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = cc

            cmd.Parameters.Add(p1)

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getPMCode(ByVal method As String) As Long
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getPreservationMethodCode"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@method"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = method

            cmd.Parameters.Add(p1)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As Long
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetInt64(0)
                Else
                    returnValue = "0"
                End If
            Else
                returnValue = "0"
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub deleteBatchLotDetails(ByVal batchlot As String)
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_delete_FishLotDetails"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@lot#"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = batchlot

            Dim paramRecCount As New SqlClient.SqlParameter()
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter()
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Function getCC() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_display_CC"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getBatchlotPerSICC(ByVal cc As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_display_BatchlotPerSICC"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@cc"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = cc

            cmd.Parameters.Add(p1)

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub updateCC_FishLot(ByVal cc As String, ByVal newLot As String, _
    ByVal basedLot As String, ByVal trip As String, ByVal yr As String)
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_updateFishLot_bySICC"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@cc#"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = cc

            Dim p3 As New SqlClient.SqlParameter()
            p3.ParameterName = "@newLot#"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = newLot

            Dim pOptr As New SqlClient.SqlParameter()
            pOptr.ParameterName = "@optr"
            pOptr.Direction = ParameterDirection.Input
            pOptr.SqlDbType = SqlDbType.VarChar
            pOptr.Value = modModule.getUsername

            Dim pEncoded As New SqlClient.SqlParameter()
            pEncoded.ParameterName = "@dateTimeEncoded"
            pEncoded.Direction = ParameterDirection.Input
            pEncoded.SqlDbType = SqlDbType.DateTime
            pEncoded.Value = getServerDateTime()

            Dim p4 As New SqlClient.SqlParameter()
            p4.ParameterName = "@basedLot#"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = basedLot

            Dim p5 As New SqlClient.SqlParameter()
            p5.ParameterName = "@trip"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.Int
            p5.Value = CInt(trip)

            Dim p6 As New SqlClient.SqlParameter()
            p6.ParameterName = "@yr"
            p6.Direction = ParameterDirection.Input
            p6.SqlDbType = SqlDbType.Int
            p6.Value = CInt(yr)

            Dim paramRecCount As New SqlClient.SqlParameter()
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(pOptr)
            cmd.Parameters.Add(pEncoded)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter()
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Function validateOverrideAccount(ByVal username As String, ByVal fassword As String) As Boolean
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_validateOverrideAccount"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@username"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = username

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@fassword"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = fassword

            Dim paramRecCount As New SqlClient.SqlParameter()
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(paramRecCount)

            Dim da As New SqlClient.SqlDataAdapter()
            Dim ds As New DataSet("dbPPICIS")

            da.SelectCommand = cmd
            da.Fill(ds)

            If Val(cmd.Parameters("@recCount").Value) > 0 Then
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return True
            Else
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return False
            End If
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getFishSizeRanges() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_displayAll_FishSizeRanges"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getFishLot_MethodAndVesselInfo(ByVal lot As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_display_FishLot_Details"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@lot"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = lot

            cmd.Parameters.Add(p1)

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getFishSizeCodeByRange(ByVal size As String) As String
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getFishSizeCodeByRange"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@sizeRange"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = size

            cmd.Parameters.Add(p1)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As String
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetString(0)
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getSpecieCode(ByVal specie As String) As String
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getSpecieCode"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@specie"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = specie

            cmd.Parameters.Add(p1)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As String
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetString(0)
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub updateCC_Vessel(ByVal cc As String, ByVal vessel As String)
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_update_SICCVessel"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@cc#"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = cc

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@vesselCode"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = getVesselCode(vessel)

            Dim pOptr As New SqlClient.SqlParameter()
            pOptr.ParameterName = "@optr"
            pOptr.Direction = ParameterDirection.Input
            pOptr.SqlDbType = SqlDbType.VarChar
            pOptr.Value = modModule.getUsername

            Dim pEncoded As New SqlClient.SqlParameter()
            pEncoded.ParameterName = "@dateTimeEncoded"
            pEncoded.Direction = ParameterDirection.Input
            pEncoded.SqlDbType = SqlDbType.DateTime
            pEncoded.Value = getServerDateTime()

            Dim paramRecCount As New SqlClient.SqlParameter()
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(pOptr)
            cmd.Parameters.Add(pEncoded)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter()
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Function getFishingVesselTrip(ByVal vessel As String) As Integer
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getVesselTrip"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@vessel"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = vessel

            cmd.Parameters.Add(p1)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As Integer
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    If CStr(drCode.GetInt32(1)).Equals(CStr(Format(CDate(getServerDateTime()), "yy"))) Then
                        returnValue = drCode.GetInt32(0) + 1
                    Else
                        returnValue = 1
                    End If
                Else
                    returnValue = 1
                End If
            Else
                returnValue = 1
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getAllReleaseNote() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_displayAll_ReleaseNote"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getAllFishSizes() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_displayAll_FishSizes"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function validateFishSize(ByVal from As String, ByVal tu As String) As Boolean
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getExistence_FishSize"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@from"
            p1.SqlDbType = SqlDbType.Float
            p1.Direction = ParameterDirection.Input
            p1.Value = CDbl(from)

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@to"
            p2.SqlDbType = SqlDbType.Float
            p2.Direction = ParameterDirection.Input
            p2.Value = CDbl(tu)

            Dim paramRecCount As New SqlClient.SqlParameter()
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(paramRecCount)

            Dim da As New SqlClient.SqlDataAdapter()
            Dim ds As New DataSet("dbPPICIS")

            da.SelectCommand = cmd
            da.Fill(ds)

            If Val(cmd.Parameters("@recCount").Value) > 0 Then
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return True
            Else
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return False
            End If
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getFishSizesCounter() As Long
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getCounter_FishSize"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim ctr As Long
            If drCode.Read Then
                ctr = drCode.GetInt64(0) + 1
            Else
                ctr = 1
            End If

            drCode.Close()
            c.Close()
            Return ctr
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub updateFishSize(ByVal code As String, ByVal from As String, ByVal tu As String, _
    ByVal unit As String, ByVal range As String)
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_update_FishSize"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@code"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = code

            Dim p3 As New SqlClient.SqlParameter()
            p3.ParameterName = "@from"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.Float
            p3.Value = CDbl(from)

            Dim p4 As New SqlClient.SqlParameter()
            p4.ParameterName = "@to"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.Float
            p4.Value = CDbl(tu)

            Dim p5 As New SqlClient.SqlParameter()
            p5.ParameterName = "@unit"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.VarChar
            p5.Value = unit

            Dim p6 As New SqlClient.SqlParameter()
            p6.ParameterName = "@range"
            p6.Direction = ParameterDirection.Input
            p6.SqlDbType = SqlDbType.VarChar
            p6.Value = range

            Dim pOptr As New SqlClient.SqlParameter()
            pOptr.ParameterName = "@optr"
            pOptr.Direction = ParameterDirection.Input
            pOptr.SqlDbType = SqlDbType.VarChar
            pOptr.Value = modModule.getUsername

            Dim pEncoded As New SqlClient.SqlParameter()
            pEncoded.ParameterName = "@dateTimeEncoded"
            pEncoded.Direction = ParameterDirection.Input
            pEncoded.SqlDbType = SqlDbType.DateTime
            pEncoded.Value = getServerDateTime()

            Dim paramRecCount As New SqlClient.SqlParameter()
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)
            cmd.Parameters.Add(pOptr)
            cmd.Parameters.Add(pEncoded)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter()
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Function validateCOS(ByVal cos As String) As Boolean
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getExistence_COS"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@cos"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = cos

            Dim paramRecCount As New SqlClient.SqlParameter()
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(paramRecCount)

            Dim da As New SqlClient.SqlDataAdapter()
            Dim ds As New DataSet("dbPPICIS")

            da.SelectCommand = cmd
            da.Fill(ds)

            If Val(cmd.Parameters("@recCount").Value) > 0 Then
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return True
            Else
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return False
            End If
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub saveNewCOS(ByVal cos As String, ByVal cosDate As String, ByVal conversion As String)
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_addNew_COS"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@id"
            p1.SqlDbType = SqlDbType.BigInt
            p1.Direction = ParameterDirection.Input
            p1.Value = getCOSCounter()

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@cos#"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = cos

            Dim pOptr As New SqlClient.SqlParameter()
            pOptr.ParameterName = "@optr"
            pOptr.Direction = ParameterDirection.Input
            pOptr.SqlDbType = SqlDbType.VarChar
            pOptr.Value = modModule.getUsername

            Dim pEncoded As New SqlClient.SqlParameter()
            pEncoded.ParameterName = "@dateTimeEncoded"
            pEncoded.Direction = ParameterDirection.Input
            pEncoded.SqlDbType = SqlDbType.DateTime
            pEncoded.Value = getServerDateTime()

            Dim p3 As New SqlClient.SqlParameter()
            p3.ParameterName = "@cosDate"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.DateTime
            p3.Value = cosDate

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@conversion"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.Float
            p4.Value = CDbl(conversion)

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(pOptr)
            cmd.Parameters.Add(pEncoded)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)

            Dim daBuyer As New SqlClient.SqlDataAdapter()
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            daBuyer.Dispose()
            dsBuyer.Dispose()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub

    Public Sub saveNewCOSDetails(ByVal cos As String, ByVal lot As String, ByVal sublot As String, _
    ByVal specie As String, ByVal size As String, ByVal price As String)
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_addNew_COS_Details"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@cos#"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = cos

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@lot"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = lot

            Dim p3 As New SqlClient.SqlParameter()
            p3.ParameterName = "@sublot"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = sublot

            Dim p4 As New SqlClient.SqlParameter()
            p4.ParameterName = "@specieCode"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = getSpecieCode(specie)

            Dim p5 As New SqlClient.SqlParameter()
            p5.ParameterName = "@sizeCode"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.VarChar
            p5.Value = getFishSizeCodeByRange(size)

            Dim p6 As New SqlClient.SqlParameter()
            p6.ParameterName = "@price"
            p6.Direction = ParameterDirection.Input
            p6.SqlDbType = SqlDbType.Float
            p6.Value = CDbl(price)

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)

            Dim daBuyer As New SqlClient.SqlDataAdapter()
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            daBuyer.Dispose()
            dsBuyer.Dispose()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub

    Public Function getCOSDetails(ByVal cos As String, ByVal lot As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_display_COS_Details"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@cos"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = cos

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@lot"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = lot

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub deleteCOSDetails(ByVal cos As String)
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_delete_COS_Details"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@cos"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = cos

            Dim paramRecCount As New SqlClient.SqlParameter()
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter()
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Sub saveNewCOP(ByVal cop As String, ByVal cos As String, ByVal copDate As String, _
    ByVal conversion As String, ByVal mt As String)
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_addNew_COP"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@id"
            p1.SqlDbType = SqlDbType.BigInt
            p1.Direction = ParameterDirection.Input
            p1.Value = getCOPCounter()

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@cop#"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = cop

            Dim p3 As New SqlClient.SqlParameter()
            p3.ParameterName = "@cos#"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = cos

            Dim p4 As New SqlClient.SqlParameter()
            p4.ParameterName = "@copDate"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.DateTime
            p4.Value = copDate

            Dim pOptr As New SqlClient.SqlParameter()
            pOptr.ParameterName = "@optr"
            pOptr.Direction = ParameterDirection.Input
            pOptr.SqlDbType = SqlDbType.VarChar
            pOptr.Value = modModule.getUsername

            Dim pEncoded As New SqlClient.SqlParameter()
            pEncoded.ParameterName = "@dateTimeEncoded"
            pEncoded.Direction = ParameterDirection.Input
            pEncoded.SqlDbType = SqlDbType.DateTime
            pEncoded.Value = getServerDateTime()

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@conversion"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.Float
            p5.Value = CDbl(conversion)

            Dim p6 As New SqlClient.SqlParameter
            p6.ParameterName = "@mt"
            p6.Direction = ParameterDirection.Input
            p6.SqlDbType = SqlDbType.Float
            p6.Value = CDbl(mt)

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(pOptr)
            cmd.Parameters.Add(pEncoded)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)

            Dim daBuyer As New SqlClient.SqlDataAdapter()
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            daBuyer.Dispose()
            dsBuyer.Dispose()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub

    Public Sub deleteSICCContainers(ByVal cc As String)
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_delete_SICCContainers"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@cc#"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = cc

            Dim paramRecCount As New SqlClient.SqlParameter()
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter()
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Sub updateBinStatus(ByVal bin As String, ByVal status As Integer, ByVal remarks As String, _
    ByVal location As String, ByVal position As String, ByVal height As String)
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_update_FishBinDeposited"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@binCode"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = getFishBinCode(bin)

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@remarks"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = remarks

            Dim pOptr As New SqlClient.SqlParameter()
            pOptr.ParameterName = "@optr"
            pOptr.Direction = ParameterDirection.Input
            pOptr.SqlDbType = SqlDbType.VarChar
            pOptr.Value = modModule.getUsername

            Dim pEncoded As New SqlClient.SqlParameter()
            pEncoded.ParameterName = "@dateTimeEncoded"
            pEncoded.Direction = ParameterDirection.Input
            pEncoded.SqlDbType = SqlDbType.DateTime
            pEncoded.Value = getServerDateTime()

            Dim p3 As New SqlClient.SqlParameter()
            p3.ParameterName = "@hold"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.Int
            p3.Value = status

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@location"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = location

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@position"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.VarChar
            p5.Value = position

            Dim p6 As New SqlClient.SqlParameter
            p6.ParameterName = "@height"
            p6.Direction = ParameterDirection.Input
            p6.SqlDbType = SqlDbType.VarChar
            p6.Value = height

            Dim paramRecCount As New SqlClient.SqlParameter()
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(pOptr)
            cmd.Parameters.Add(pEncoded)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter()
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Function getAllDelivery() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_displayAll_Delivery"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getListsOfContainer() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_display_ListsOfContainer"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@container"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = ""

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@receipt"
            p2.SqlDbType = SqlDbType.DateTime
            p2.Direction = ParameterDirection.Input
            p2.Value = Format(Now, getTimeFormat())

            Dim p3 As New SqlClient.SqlParameter()
            p3.ParameterName = "@unload"
            p3.SqlDbType = SqlDbType.DateTime
            p3.Direction = ParameterDirection.Input
            p3.Value = Format(Now, getTimeFormat())

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub updateCOS(ByVal cos As String, ByVal cosDate As String, ByVal conversion As String)
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_update_COS"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@cos#"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = cos

            Dim p3 As New SqlClient.SqlParameter()
            p3.ParameterName = "@cosDate"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.DateTime
            p3.Value = cosDate

            Dim pOptr As New SqlClient.SqlParameter()
            pOptr.ParameterName = "@optr"
            pOptr.Direction = ParameterDirection.Input
            pOptr.SqlDbType = SqlDbType.VarChar
            pOptr.Value = modModule.getUsername

            Dim pEncoded As New SqlClient.SqlParameter()
            pEncoded.ParameterName = "@dateTimeEncoded"
            pEncoded.Direction = ParameterDirection.Input
            pEncoded.SqlDbType = SqlDbType.DateTime
            pEncoded.Value = getServerDateTime()

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@conversion"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.Float
            p4.Value = CDbl(conversion)

            Dim paramRecCount As New SqlClient.SqlParameter()
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(pOptr)
            cmd.Parameters.Add(pEncoded)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter()
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Sub saveNewCOPDetails(ByVal cop As String, ByVal specie As String, _
    ByVal cleaning As String, ByVal size As String, ByVal price As String)
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_addNew_COP_Details"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@cop#"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = cop

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@specieCode"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = getSpecieCode(specie)

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@clnCode"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = getProductCleaningCode(cleaning)

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@canCode"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = getProductCanSizeCode(size)

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@price"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.Float
            p5.Value = price

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)

            Dim daBuyer As New SqlClient.SqlDataAdapter()
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            daBuyer.Dispose()
            dsBuyer.Dispose()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub

    Public Sub updateCOP(ByVal cop As String, ByVal cos As String, ByVal copDate As String, _
    ByVal conversion As String, ByVal mt As String)
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_update_COP"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@cop#"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = cop

            Dim p3 As New SqlClient.SqlParameter()
            p3.ParameterName = "@cos#"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = cos

            Dim p4 As New SqlClient.SqlParameter()
            p4.ParameterName = "@copDate"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.DateTime
            p4.Value = copDate

            Dim pOptr As New SqlClient.SqlParameter()
            pOptr.ParameterName = "@optr"
            pOptr.Direction = ParameterDirection.Input
            pOptr.SqlDbType = SqlDbType.VarChar
            pOptr.Value = modModule.getUsername

            Dim pEncoded As New SqlClient.SqlParameter()
            pEncoded.ParameterName = "@dateTimeEncoded"
            pEncoded.Direction = ParameterDirection.Input
            pEncoded.SqlDbType = SqlDbType.DateTime
            pEncoded.Value = getServerDateTime()

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@conversion"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.Float
            p5.Value = CDbl(conversion)

            Dim p6 As New SqlClient.SqlParameter
            p6.ParameterName = "@mt"
            p6.Direction = ParameterDirection.Input
            p6.SqlDbType = SqlDbType.Float
            p6.Value = CDbl(mt)

            Dim paramRecCount As New SqlClient.SqlParameter()
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(pOptr)
            cmd.Parameters.Add(pEncoded)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter()
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Function validateCOP(ByVal cop As String) As Boolean
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getExistence_COP"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@cop#"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = cop

            Dim paramRecCount As New SqlClient.SqlParameter()
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(paramRecCount)

            Dim da As New SqlClient.SqlDataAdapter()
            Dim ds As New DataSet("dbPPICIS")

            da.SelectCommand = cmd
            da.Fill(ds)

            If Val(cmd.Parameters("@recCount").Value) > 0 Then
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return True
            Else
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return False
            End If
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub deleteCOPDetails(ByVal cop As String)
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_delete_COP_Details"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@cop#"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = cop

            Dim paramRecCount As New SqlClient.SqlParameter()
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter()
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Function getCOPDetails(ByVal cop As String, ByVal cos As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_display_COP_Details"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@cop#"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = cop

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@cos#"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = cos

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getPMFishCondition(ByVal method As String) As String
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getPreservationMethodFishCondition"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@method"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = method

            cmd.Parameters.Add(p1)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As String
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetString(0)
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getProductDescCode(ByVal product As String) As String
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getProductDescriptionCode"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@product"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = product

            cmd.Parameters.Add(p1)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As String
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetString(0)
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getProductDescription() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_display_ProductDescription"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function


    Public Function getProductDescriptionCode() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_display_ProductDescriptionCode"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getAllPD() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_displayAll_ProductDescription"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub saveNewPD(ByVal code As String, ByVal desc As String)
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_addNew_ProductDescription"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@id"
            p1.SqlDbType = SqlDbType.BigInt
            p1.Direction = ParameterDirection.Input
            p1.Value = getPDCounter()

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@pdCode"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = code

            Dim p3 As New SqlClient.SqlParameter()
            p3.ParameterName = "@pdDesc"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = desc

            Dim pOptr As New SqlClient.SqlParameter()
            pOptr.ParameterName = "@optr"
            pOptr.Direction = ParameterDirection.Input
            pOptr.SqlDbType = SqlDbType.VarChar
            pOptr.Value = modModule.getUsername

            Dim pEncoded As New SqlClient.SqlParameter()
            pEncoded.ParameterName = "@dateTimeEncoded"
            pEncoded.Direction = ParameterDirection.Input
            pEncoded.SqlDbType = SqlDbType.DateTime
            pEncoded.Value = getServerDateTime()

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(pOptr)
            cmd.Parameters.Add(pEncoded)

            Dim daBuyer As New SqlClient.SqlDataAdapter()
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            daBuyer.Dispose()
            dsBuyer.Dispose()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub

    Public Function getPDCounter() As Long
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getCounter_ProductDescription"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim ctr As Long
            If drCode.Read Then
                ctr = drCode.GetInt64(0) + 1
            Else
                ctr = 1
            End If

            drCode.Close()
            c.Close()
            Return ctr
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub updatePD(ByVal code As String, ByVal desc As String)
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_update_ProductDescription"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@pdCode"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = code

            Dim p3 As New SqlClient.SqlParameter()
            p3.ParameterName = "@pdDesc"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = desc

            Dim pOptr As New SqlClient.SqlParameter()
            pOptr.ParameterName = "@optr"
            pOptr.Direction = ParameterDirection.Input
            pOptr.SqlDbType = SqlDbType.VarChar
            pOptr.Value = modModule.getUsername

            Dim pEncoded As New SqlClient.SqlParameter()
            pEncoded.ParameterName = "@dateTimeEncoded"
            pEncoded.Direction = ParameterDirection.Input
            pEncoded.SqlDbType = SqlDbType.DateTime
            pEncoded.Value = getServerDateTime()

            Dim paramRecCount As New SqlClient.SqlParameter()
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(pOptr)
            cmd.Parameters.Add(pEncoded)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter()
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Function validatePD(ByVal code As String, ByVal desc As String) As Boolean
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getExistence_ProductDescription"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@pdCode"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = code

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@pdDesc"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = desc

            Dim paramRecCount As New SqlClient.SqlParameter()
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(paramRecCount)

            Dim da As New SqlClient.SqlDataAdapter()
            Dim ds As New DataSet("dbPPICIS")

            da.SelectCommand = cmd
            da.Fill(ds)

            If Val(cmd.Parameters("@recCount").Value) > 0 Then
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return True
            Else
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return False
            End If
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getAllPS() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_displayAll_PackStyle"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getPackStyleCode() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_display_PackStyleCode"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getPackStyleDescription() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_display_PackStyleDescription"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function validatePS(ByVal code As String, ByVal desc As String) As Boolean
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getExistence_PackStyle"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@code"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = code

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@desc"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = desc

            Dim paramRecCount As New SqlClient.SqlParameter()
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(paramRecCount)

            Dim da As New SqlClient.SqlDataAdapter()
            Dim ds As New DataSet("dbPPICIS")

            da.SelectCommand = cmd
            da.Fill(ds)

            If Val(cmd.Parameters("@recCount").Value) > 0 Then
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return True
            Else
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return False
            End If
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub saveNewPS(ByVal code As String, ByVal desc As String, ByVal packType As String)
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_addNew_PackStyle"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@id"
            p1.SqlDbType = SqlDbType.BigInt
            p1.Direction = ParameterDirection.Input
            p1.Value = getPSCounter()

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@psCode"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = "PS" & Format(getPSCounter(), "0###")

            Dim p3 As New SqlClient.SqlParameter()
            p3.ParameterName = "@packCode"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = code

            Dim p4 As New SqlClient.SqlParameter()
            p4.ParameterName = "@packDesc"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = desc

            Dim p5 As New SqlClient.SqlParameter()
            p5.ParameterName = "@packType"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.VarChar
            p5.Value = packType

            Dim pOptr As New SqlClient.SqlParameter()
            pOptr.ParameterName = "@optr"
            pOptr.Direction = ParameterDirection.Input
            pOptr.SqlDbType = SqlDbType.VarChar
            pOptr.Value = modModule.getUsername

            Dim pEncoded As New SqlClient.SqlParameter()
            pEncoded.ParameterName = "@dateTimeEncoded"
            pEncoded.Direction = ParameterDirection.Input
            pEncoded.SqlDbType = SqlDbType.DateTime
            pEncoded.Value = getServerDateTime()

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(pOptr)
            cmd.Parameters.Add(pEncoded)

            Dim daBuyer As New SqlClient.SqlDataAdapter()
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            daBuyer.Dispose()
            dsBuyer.Dispose()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub

    Public Function getPSCounter() As Long
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getCounter_PackStyle"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim ctr As Long
            If drCode.Read Then
                ctr = drCode.GetInt64(0) + 1
            Else
                ctr = 1
            End If

            drCode.Close()
            c.Close()
            Return ctr
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub updatePS(ByVal code As String, ByVal desc As String, ByVal packType As String)
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_update_PackStyle"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@psCode"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = ""

            Dim p3 As New SqlClient.SqlParameter()
            p3.ParameterName = "@packCode"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = code

            Dim p4 As New SqlClient.SqlParameter()
            p4.ParameterName = "@packDesc"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = desc

            Dim p5 As New SqlClient.SqlParameter()
            p5.ParameterName = "@packType"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.VarChar
            p5.Value = packType

            Dim pOptr As New SqlClient.SqlParameter()
            pOptr.ParameterName = "@optr"
            pOptr.Direction = ParameterDirection.Input
            pOptr.SqlDbType = SqlDbType.VarChar
            pOptr.Value = modModule.getUsername

            Dim pEncoded As New SqlClient.SqlParameter()
            pEncoded.ParameterName = "@dateTimeEncoded"
            pEncoded.Direction = ParameterDirection.Input
            pEncoded.SqlDbType = SqlDbType.DateTime
            pEncoded.Value = getServerDateTime()

            Dim paramRecCount As New SqlClient.SqlParameter()
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(pOptr)
            cmd.Parameters.Add(pEncoded)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter()
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Function getAllMedia() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_displayAll_Media"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getProductMediaCode() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_display_MediaCode"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getProductMediaDescription() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_display_MediaDescription"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function validateMedia(ByVal code As String, ByVal desc As String) As Boolean
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getExistence_Media"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@mdCode"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = code

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@mdDesc"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = desc

            Dim paramRecCount As New SqlClient.SqlParameter()
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(paramRecCount)

            Dim da As New SqlClient.SqlDataAdapter()
            Dim ds As New DataSet("dbPPICIS")

            da.SelectCommand = cmd
            da.Fill(ds)

            If Val(cmd.Parameters("@recCount").Value) > 0 Then
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return True
            Else
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return False
            End If
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub saveNewMedia(ByVal code As String, ByVal desc As String)
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_addNew_Media"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@id"
            p1.SqlDbType = SqlDbType.BigInt
            p1.Direction = ParameterDirection.Input
            p1.Value = getMediaCounter()

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@mdCode"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = code

            Dim p3 As New SqlClient.SqlParameter()
            p3.ParameterName = "@mdDesc"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = desc

            Dim pOptr As New SqlClient.SqlParameter()
            pOptr.ParameterName = "@optr"
            pOptr.Direction = ParameterDirection.Input
            pOptr.SqlDbType = SqlDbType.VarChar
            pOptr.Value = modModule.getUsername

            Dim pEncoded As New SqlClient.SqlParameter()
            pEncoded.ParameterName = "@dateTimeEncoded"
            pEncoded.Direction = ParameterDirection.Input
            pEncoded.SqlDbType = SqlDbType.DateTime
            pEncoded.Value = getServerDateTime()

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(pOptr)
            cmd.Parameters.Add(pEncoded)

            Dim daBuyer As New SqlClient.SqlDataAdapter()
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            daBuyer.Dispose()
            dsBuyer.Dispose()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub

    Public Function getMediaCounter() As Long
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getCounter_Media"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim ctr As Long
            If drCode.Read Then
                ctr = drCode.GetInt64(0) + 1
            Else
                ctr = 1
            End If

            drCode.Close()
            c.Close()
            Return ctr
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub updateMedia(ByVal code As String, ByVal desc As String)
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_update_Media"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@mdCode"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = code

            Dim p3 As New SqlClient.SqlParameter()
            p3.ParameterName = "@mdDesc"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = desc

            Dim pOptr As New SqlClient.SqlParameter()
            pOptr.ParameterName = "@optr"
            pOptr.Direction = ParameterDirection.Input
            pOptr.SqlDbType = SqlDbType.VarChar
            pOptr.Value = modModule.getUsername

            Dim pEncoded As New SqlClient.SqlParameter()
            pEncoded.ParameterName = "@dateTimeEncoded"
            pEncoded.Direction = ParameterDirection.Input
            pEncoded.SqlDbType = SqlDbType.DateTime
            pEncoded.Value = getServerDateTime()

            Dim paramRecCount As New SqlClient.SqlParameter()
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(pOptr)
            cmd.Parameters.Add(pEncoded)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter()
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Function getAllFL() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_displayAll_FillerLine"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getProductFLCode() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_display_FillerLineCode"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getProductFLDescription() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_display_FillerLineDescription"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function validateFL(ByVal code As String, ByVal desc As String) As Boolean
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getExistence_FillerLine"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@filCode"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = code

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@filDesc"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = desc

            Dim paramRecCount As New SqlClient.SqlParameter()
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(paramRecCount)

            Dim da As New SqlClient.SqlDataAdapter()
            Dim ds As New DataSet("dbPPICIS")

            da.SelectCommand = cmd
            da.Fill(ds)

            If Val(cmd.Parameters("@recCount").Value) > 0 Then
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return True
            Else
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return False
            End If
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub saveNewFL(ByVal code As String, ByVal desc As String)
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_addNew_FillerLine"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@id"
            p1.SqlDbType = SqlDbType.BigInt
            p1.Direction = ParameterDirection.Input
            p1.Value = getFLCounter()

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@filCode"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = code

            Dim p3 As New SqlClient.SqlParameter()
            p3.ParameterName = "@filDesc"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = desc

            Dim pOptr As New SqlClient.SqlParameter()
            pOptr.ParameterName = "@optr"
            pOptr.Direction = ParameterDirection.Input
            pOptr.SqlDbType = SqlDbType.VarChar
            pOptr.Value = modModule.getUsername

            Dim pEncoded As New SqlClient.SqlParameter()
            pEncoded.ParameterName = "@dateTimeEncoded"
            pEncoded.Direction = ParameterDirection.Input
            pEncoded.SqlDbType = SqlDbType.DateTime
            pEncoded.Value = getServerDateTime()

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(pOptr)
            cmd.Parameters.Add(pEncoded)

            Dim daBuyer As New SqlClient.SqlDataAdapter()
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            daBuyer.Dispose()
            dsBuyer.Dispose()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub

    Public Function getFLCounter() As Long
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getCounter_FillerLine"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim ctr As Long
            If drCode.Read Then
                ctr = drCode.GetInt64(0) + 1
            Else
                ctr = 1
            End If

            drCode.Close()
            c.Close()
            Return ctr
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub updateFL(ByVal code As String, ByVal desc As String)
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_update_FillerLine"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@filCode"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = code

            Dim p3 As New SqlClient.SqlParameter()
            p3.ParameterName = "@filDesc"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = desc

            Dim pOptr As New SqlClient.SqlParameter()
            pOptr.ParameterName = "@optr"
            pOptr.Direction = ParameterDirection.Input
            pOptr.SqlDbType = SqlDbType.VarChar
            pOptr.Value = modModule.getUsername

            Dim pEncoded As New SqlClient.SqlParameter()
            pEncoded.ParameterName = "@dateTimeEncoded"
            pEncoded.Direction = ParameterDirection.Input
            pEncoded.SqlDbType = SqlDbType.DateTime
            pEncoded.Value = getServerDateTime()

            Dim paramRecCount As New SqlClient.SqlParameter()
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(pOptr)
            cmd.Parameters.Add(pEncoded)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter()
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Function getAllCS() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_displayAll_Cleaning"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getProductCleaningCode() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_display_CleaningCode"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getProductCleaningDescription() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_display_CleaningDescription"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function validateCS(ByVal code As String, ByVal desc As String) As Boolean
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getExistence_Cleaning"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@clnCode"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = code

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@clnDesc"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = desc

            Dim paramRecCount As New SqlClient.SqlParameter()
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(paramRecCount)

            Dim da As New SqlClient.SqlDataAdapter()
            Dim ds As New DataSet("dbPPICIS")

            da.SelectCommand = cmd
            da.Fill(ds)

            If Val(cmd.Parameters("@recCount").Value) > 0 Then
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return True
            Else
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return False
            End If
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub saveNewCS(ByVal code As String, ByVal desc As String)
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_addNew_Cleaning"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@id"
            p1.SqlDbType = SqlDbType.BigInt
            p1.Direction = ParameterDirection.Input
            p1.Value = getCSCounter()

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@clnCode"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = code

            Dim p3 As New SqlClient.SqlParameter()
            p3.ParameterName = "@clnDesc"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = desc

            Dim pOptr As New SqlClient.SqlParameter()
            pOptr.ParameterName = "@optr"
            pOptr.Direction = ParameterDirection.Input
            pOptr.SqlDbType = SqlDbType.VarChar
            pOptr.Value = modModule.getUsername

            Dim pEncoded As New SqlClient.SqlParameter()
            pEncoded.ParameterName = "@dateTimeEncoded"
            pEncoded.Direction = ParameterDirection.Input
            pEncoded.SqlDbType = SqlDbType.DateTime
            pEncoded.Value = getServerDateTime()

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(pOptr)
            cmd.Parameters.Add(pEncoded)

            Dim daBuyer As New SqlClient.SqlDataAdapter()
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            daBuyer.Dispose()
            dsBuyer.Dispose()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub

    Public Function getCSCounter() As Long
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getCounter_Cleaning"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim ctr As Long
            If drCode.Read Then
                ctr = drCode.GetInt64(0) + 1
            Else
                ctr = 1
            End If

            drCode.Close()
            c.Close()
            Return ctr
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub updateCS(ByVal code As String, ByVal desc As String)
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_update_Cleaning"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@clnCode"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = code

            Dim p3 As New SqlClient.SqlParameter()
            p3.ParameterName = "@clnDesc"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = desc

            Dim pOptr As New SqlClient.SqlParameter()
            pOptr.ParameterName = "@optr"
            pOptr.Direction = ParameterDirection.Input
            pOptr.SqlDbType = SqlDbType.VarChar
            pOptr.Value = modModule.getUsername

            Dim pEncoded As New SqlClient.SqlParameter()
            pEncoded.ParameterName = "@dateTimeEncoded"
            pEncoded.Direction = ParameterDirection.Input
            pEncoded.SqlDbType = SqlDbType.DateTime
            pEncoded.Value = getServerDateTime()

            Dim paramRecCount As New SqlClient.SqlParameter()
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(pOptr)
            cmd.Parameters.Add(pEncoded)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter()
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Function getAllFishSpecie_Product() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_displayAll_FishSpecieCode_Product"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getFishSpecieCode_Product(ByVal specie As String) As String
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_display_FishSpecieCode_Specie"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@specie"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = specie

            cmd.Parameters.Add(p1)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As String
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetString(0)
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub updateSpecieCode_Product(ByVal specie As String, ByVal code As String)
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_update_FishSpecie_Product"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@specie"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = specie

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@prodCode"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = code

            Dim pOptr As New SqlClient.SqlParameter()
            pOptr.ParameterName = "@optr"
            pOptr.Direction = ParameterDirection.Input
            pOptr.SqlDbType = SqlDbType.VarChar
            pOptr.Value = modModule.getUsername

            Dim pEncoded As New SqlClient.SqlParameter()
            pEncoded.ParameterName = "@dateTimeEncoded"
            pEncoded.Direction = ParameterDirection.Input
            pEncoded.SqlDbType = SqlDbType.DateTime
            pEncoded.Value = getServerDateTime()

            Dim paramRecCount As New SqlClient.SqlParameter()
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(pOptr)
            cmd.Parameters.Add(pEncoded)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter()
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Function getAllCanSize() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_displayAll_CanSize"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getProductCanSizeCode() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_display_CanSizeCode"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getProductCanSize() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_display_CanSize"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    'Public Function getProductCanSize(ByVal code As String, ByVal category As String) As String
    '    Try
    '        Dim c As New SqlClient.SqlConnection()
    '        c.ConnectionString = modModule.getConnectionString
    '        c.Open()

    '        Dim cmd As New SqlClient.SqlCommand()
    '        cmd.CommandText = "proc_getCanSize"
    '        cmd.CommandType = CommandType.StoredProcedure
    '        cmd.Connection = c

    '        Dim p1 As New SqlClient.SqlParameter()
    '        p1.ParameterName = "@canCode"
    '        p1.SqlDbType = SqlDbType.VarChar
    '        p1.Direction = ParameterDirection.Input
    '        p1.Value = code

    '        Dim p2 As New SqlClient.SqlParameter()
    '        p2.ParameterName = "@category"
    '        p2.SqlDbType = SqlDbType.VarChar
    '        p2.Direction = ParameterDirection.Input
    '        p2.Value = category

    '        cmd.Parameters.Add(p1)
    '        cmd.Parameters.Add(p2)

    '        Dim drCode As SqlClient.SqlDataReader
    '        drCode = cmd.ExecuteReader

    '        Dim returnValue As String
    '        If drCode.Read Then
    '            If Not drCode(0) Is DBNull.Value Then
    '                returnValue = drCode.GetString(0)
    '            Else
    '                returnValue = ""
    '            End If
    '        Else
    '            returnValue = ""
    '        End If

    '        drCode.Close()
    '        c.Close()

    '        Return returnValue
    '    Catch e As Exception
    '        MsgBox(e.Message)
    '    Finally
    '    End Try
    'End Function

    Public Function getProductCanSize_PackType(ByVal packType As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_display_CanSize_PackType"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@packType"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = packType

            cmd.Parameters.Add(p1)

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function validatCanSize(ByVal code As String, ByVal canSize As String) As Boolean
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getExistence_CanSize"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@canCode"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = code

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@canSize"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = canSize

            Dim paramRecCount As New SqlClient.SqlParameter()
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(paramRecCount)

            Dim da As New SqlClient.SqlDataAdapter()
            Dim ds As New DataSet("dbPPICIS")

            da.SelectCommand = cmd
            da.Fill(ds)

            If Val(cmd.Parameters("@recCount").Value) > 0 Then
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return True
            Else
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return False
            End If
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub saveNewCanSize(ByVal code As String, ByVal canSize As String, _
    ByVal canType As String, ByVal unit As String, ByVal fcl As String)
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_addNew_CanSize"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@id"
            p1.SqlDbType = SqlDbType.BigInt
            p1.Direction = ParameterDirection.Input
            p1.Value = getCanSizeCounter()

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@canCode"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = code

            Dim p3 As New SqlClient.SqlParameter()
            p3.ParameterName = "@canSize"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = canSize

            Dim p4 As New SqlClient.SqlParameter()
            p4.ParameterName = "@canType"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = canType

            Dim pOptr As New SqlClient.SqlParameter()
            pOptr.ParameterName = "@optr"
            pOptr.Direction = ParameterDirection.Input
            pOptr.SqlDbType = SqlDbType.VarChar
            pOptr.Value = modModule.getUsername

            Dim pEncoded As New SqlClient.SqlParameter()
            pEncoded.ParameterName = "@dateTimeEncoded"
            pEncoded.Direction = ParameterDirection.Input
            pEncoded.SqlDbType = SqlDbType.DateTime
            pEncoded.Value = getServerDateTime()

            Dim p5 As New SqlClient.SqlParameter()
            p5.ParameterName = "@tinsPerCase"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.Float
            p5.Value = unit

            Dim p6 As New SqlClient.SqlParameter()
            p6.ParameterName = "@casePerFCL"
            p6.Direction = ParameterDirection.Input
            p6.SqlDbType = SqlDbType.Float
            p6.Value = fcl

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(pOptr)
            cmd.Parameters.Add(pEncoded)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)

            Dim daBuyer As New SqlClient.SqlDataAdapter()
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            daBuyer.Dispose()
            dsBuyer.Dispose()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub

    Public Function getCanSizeCounter() As Long
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getCounter_CanSize"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim ctr As Long
            If drCode.Read Then
                ctr = drCode.GetInt64(0) + 1
            Else
                ctr = 1
            End If

            drCode.Close()
            c.Close()
            Return ctr
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub updateCanSize(ByVal code As String, ByVal canSize As String, ByVal canType As String, _
    ByVal unit As String, ByVal fcl As String)
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_update_CanSize"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@canCode"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = code

            Dim p3 As New SqlClient.SqlParameter()
            p3.ParameterName = "@canSize"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = canSize

            Dim p4 As New SqlClient.SqlParameter()
            p4.ParameterName = "@canType"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = canType

            Dim pOptr As New SqlClient.SqlParameter()
            pOptr.ParameterName = "@optr"
            pOptr.Direction = ParameterDirection.Input
            pOptr.SqlDbType = SqlDbType.VarChar
            pOptr.Value = modModule.getUsername

            Dim pEncoded As New SqlClient.SqlParameter()
            pEncoded.ParameterName = "@dateTimeEncoded"
            pEncoded.Direction = ParameterDirection.Input
            pEncoded.SqlDbType = SqlDbType.DateTime
            pEncoded.Value = getServerDateTime()

            Dim p5 As New SqlClient.SqlParameter()
            p5.ParameterName = "@tinsPerCase"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.Float
            p5.Value = unit

            Dim p6 As New SqlClient.SqlParameter()
            p6.ParameterName = "@casePerFCL"
            p6.Direction = ParameterDirection.Input
            p6.SqlDbType = SqlDbType.Float
            p6.Value = fcl

            Dim paramRecCount As New SqlClient.SqlParameter()
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(pOptr)
            cmd.Parameters.Add(pEncoded)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter()
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Function getAllProduct(ByVal packType As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim qry As String
            If packType.StartsWith("Can") Then
                qry = "proc_displayAllProduct_CannedTuna"
            Else
                qry = "proc_displayAllProduct_FrozenLoins"
            End If

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = qry
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getPackStyleDescription(ByVal packType As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_display_PackStyleDescription_PackType"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@packType"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = packType

            cmd.Parameters.Add(p1)

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getAllFishSpecie_ProductSpecie() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_displayAll_FishSpecieCode_ProductSpecie"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getPackStyleCode(ByVal ps As String) As String
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getProductPackStyleCode"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@desc"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = ps

            cmd.Parameters.Add(p1)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As String
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetString(0)
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getPackStyleCode(ByVal ps As String, ByVal category As String) As String
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getProductPackStyleCode_Code"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@packDesc"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = ps

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@packType"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = category

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As String
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetString(0)
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getProductMediaCode(ByVal media As String) As String
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getProductMediaCode"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@desc"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = media

            cmd.Parameters.Add(p1)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As String
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetString(0)
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getProductCanSizeCode(ByVal canSize As String) As String
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getProductCanSizeCode"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@desc"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = canSize

            cmd.Parameters.Add(p1)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As String
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetString(0)
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getProductFLCode(ByVal fl As String) As String
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getProductFillerLineCode"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@desc"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = fl

            cmd.Parameters.Add(p1)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As String
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetString(0)
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getProductCleaningCode(ByVal cleaning As String) As String
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getProductCleaningCode"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@desc"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = cleaning

            cmd.Parameters.Add(p1)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As String
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetString(0)
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function validateProduct(ByVal code As String) As Boolean
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getExistence_ProductCode"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@pCode"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = code

            Dim paramRecCount As New SqlClient.SqlParameter()
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(paramRecCount)

            Dim da As New SqlClient.SqlDataAdapter()
            Dim ds As New DataSet("dbPPICIS")

            da.SelectCommand = cmd
            da.Fill(ds)

            If Val(cmd.Parameters("@recCount").Value) > 0 Then
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return True
            Else
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return False
            End If
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub saveNewProduct(ByVal code As String, ByVal ps As String, ByVal media As String, _
    ByVal specie As String, ByVal canSize As String, ByVal fl As String, ByVal cleaning As String, _
    ByVal category As String, ByVal period As String, ByVal oil As String, ByVal water As String, _
    ByVal salt As String, ByVal chili As String, ByVal curry As String, ByVal broth As String, ByVal msg As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_addNew_ProductCode"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@id"
            p1.SqlDbType = SqlDbType.BigInt
            p1.Direction = ParameterDirection.Input
            p1.Value = getProductCounter()

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@pCode"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = code

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@psCode"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = getPackStyleCode(ps, category)

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@mdCode"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = getProductMediaCode(media)

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@specieCode"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.VarChar
            p5.Value = getSpecieCode(specie)

            Dim p6 As New SqlClient.SqlParameter
            p6.ParameterName = "@canCode"
            p6.Direction = ParameterDirection.Input
            p6.SqlDbType = SqlDbType.VarChar
            p6.Value = getProductCanSizeCode(canSize)

            Dim p7 As New SqlClient.SqlParameter
            p7.ParameterName = "@filCode"
            p7.Direction = ParameterDirection.Input
            p7.SqlDbType = SqlDbType.VarChar
            If category.StartsWith("Can") Then
                p7.Value = getProductFLCode(fl)
            Else
                p7.Value = ""
            End If

            Dim p8 As New SqlClient.SqlParameter
            p8.ParameterName = "@clnCode"
            p8.Direction = ParameterDirection.Input
            p8.SqlDbType = SqlDbType.VarChar
            p8.Value = getProductCleaningCode(cleaning)

            Dim pOptr As New SqlClient.SqlParameter
            pOptr.ParameterName = "@optr"
            pOptr.Direction = ParameterDirection.Input
            pOptr.SqlDbType = SqlDbType.VarChar
            pOptr.Value = modModule.getUsername

            Dim pEncoded As New SqlClient.SqlParameter
            pEncoded.ParameterName = "@dateTimeEncoded"
            pEncoded.Direction = ParameterDirection.Input
            pEncoded.SqlDbType = SqlDbType.DateTime
            pEncoded.Value = getServerDateTime()

            Dim p9 As New SqlClient.SqlParameter
            p9.ParameterName = "@tpCode"
            p9.Direction = ParameterDirection.Input
            p9.SqlDbType = SqlDbType.VarChar
            p9.Value = getProductPeriodCode(period)

            Dim p10 As New SqlClient.SqlParameter
            p10.ParameterName = "@lsCode"
            p10.Direction = ParameterDirection.Input
            p10.SqlDbType = SqlDbType.VarChar
            p10.Value = getProductLSCode(fl)

            Dim p11 As New SqlClient.SqlParameter
            p11.ParameterName = "@oil"
            p11.Direction = ParameterDirection.Input
            p11.SqlDbType = SqlDbType.Float
            p11.Value = CDbl(oil)

            Dim p12 As New SqlClient.SqlParameter
            p12.ParameterName = "@water"
            p12.Direction = ParameterDirection.Input
            p12.SqlDbType = SqlDbType.Float
            p12.Value = CDbl(water)

            Dim p13 As New SqlClient.SqlParameter
            p13.ParameterName = "@salt"
            p13.Direction = ParameterDirection.Input
            p13.SqlDbType = SqlDbType.Float
            p13.Value = CDbl(salt)

            Dim p14 As New SqlClient.SqlParameter
            p14.ParameterName = "@chili"
            p14.Direction = ParameterDirection.Input
            p14.SqlDbType = SqlDbType.Float
            p14.Value = CDbl(chili)

            Dim p15 As New SqlClient.SqlParameter
            p15.ParameterName = "@curry"
            p15.Direction = ParameterDirection.Input
            p15.SqlDbType = SqlDbType.Float
            p15.Value = CDbl(curry)

            Dim p16 As New SqlClient.SqlParameter
            p16.ParameterName = "@broth"
            p16.Direction = ParameterDirection.Input
            p16.SqlDbType = SqlDbType.Float
            p16.Value = CDbl(broth)

            Dim p17 As New SqlClient.SqlParameter
            p17.ParameterName = "@msg"
            p17.Direction = ParameterDirection.Input
            p17.SqlDbType = SqlDbType.Float
            p17.Value = CDbl(msg)

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)
            cmd.Parameters.Add(p7)
            cmd.Parameters.Add(p8)
            cmd.Parameters.Add(pOptr)
            cmd.Parameters.Add(pEncoded)
            cmd.Parameters.Add(p9)
            cmd.Parameters.Add(p10)
            cmd.Parameters.Add(p11)
            cmd.Parameters.Add(p12)
            cmd.Parameters.Add(p13)
            cmd.Parameters.Add(p14)
            cmd.Parameters.Add(p15)
            cmd.Parameters.Add(p16)
            cmd.Parameters.Add(p17)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            daBuyer.Dispose()
            dsBuyer.Dispose()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
            'MsgBox("Please make sure you have properly define the composition of a product code" & Chr(13) & _
            '    "Please fill-in all empty fields except those disabled data entry fields.", MsgBoxStyle.Exclamation, "Warning")
        Finally
        End Try
    End Sub

    Public Sub updateProduct(ByVal id As String, ByVal code As String, ByVal ps As String, ByVal media As String, _
    ByVal specie As String, ByVal canSize As String, ByVal fl As String, ByVal cleaning As String, _
    ByVal category As String, ByVal period As String, ByVal oil As String, ByVal water As String, _
    ByVal salt As String, ByVal chili As String, ByVal curry As String, ByVal broth As String, ByVal msg As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_update_ProductCode"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@id"
            p1.SqlDbType = SqlDbType.BigInt
            p1.Direction = ParameterDirection.Input
            p1.Value = CLng(id)

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@pCode"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = code

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@psCode"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = getPackStyleCode(ps, category)

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@mdCode"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = getProductMediaCode(media)

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@specieCode"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.VarChar
            p5.Value = getSpecieCode(specie)

            Dim p6 As New SqlClient.SqlParameter
            p6.ParameterName = "@canCode"
            p6.Direction = ParameterDirection.Input
            p6.SqlDbType = SqlDbType.VarChar
            p6.Value = getProductCanSizeCode(canSize)

            Dim p7 As New SqlClient.SqlParameter
            p7.ParameterName = "@filCode"
            p7.Direction = ParameterDirection.Input
            p7.SqlDbType = SqlDbType.VarChar
            If category.StartsWith("Can") Then
                p7.Value = getProductFLCode(fl)
            Else
                p7.Value = ""
            End If

            Dim p8 As New SqlClient.SqlParameter
            p8.ParameterName = "@clnCode"
            p8.Direction = ParameterDirection.Input
            p8.SqlDbType = SqlDbType.VarChar
            p8.Value = getProductCleaningCode(cleaning)

            Dim pOptr As New SqlClient.SqlParameter
            pOptr.ParameterName = "@optr"
            pOptr.Direction = ParameterDirection.Input
            pOptr.SqlDbType = SqlDbType.VarChar
            pOptr.Value = modModule.getUsername

            Dim pEncoded As New SqlClient.SqlParameter
            pEncoded.ParameterName = "@dateTimeEncoded"
            pEncoded.Direction = ParameterDirection.Input
            pEncoded.SqlDbType = SqlDbType.DateTime
            pEncoded.Value = getServerDateTime()

            Dim p9 As New SqlClient.SqlParameter
            p9.ParameterName = "@tpCode"
            p9.Direction = ParameterDirection.Input
            p9.SqlDbType = SqlDbType.VarChar
            p9.Value = getProductPeriodCode(period)

            Dim p10 As New SqlClient.SqlParameter
            p10.ParameterName = "@lsCode"
            p10.Direction = ParameterDirection.Input
            p10.SqlDbType = SqlDbType.VarChar
            p10.Value = getProductLSCode(fl)

            Dim p11 As New SqlClient.SqlParameter
            p11.ParameterName = "@oil"
            p11.Direction = ParameterDirection.Input
            p11.SqlDbType = SqlDbType.Float
            p11.Value = CDbl(oil)

            Dim p12 As New SqlClient.SqlParameter
            p12.ParameterName = "@water"
            p12.Direction = ParameterDirection.Input
            p12.SqlDbType = SqlDbType.Float
            p12.Value = CDbl(water)

            Dim p13 As New SqlClient.SqlParameter
            p13.ParameterName = "@salt"
            p13.Direction = ParameterDirection.Input
            p13.SqlDbType = SqlDbType.Float
            p13.Value = CDbl(salt)

            Dim p14 As New SqlClient.SqlParameter
            p14.ParameterName = "@chili"
            p14.Direction = ParameterDirection.Input
            p14.SqlDbType = SqlDbType.Float
            p14.Value = CDbl(chili)

            Dim p15 As New SqlClient.SqlParameter
            p15.ParameterName = "@curry"
            p15.Direction = ParameterDirection.Input
            p15.SqlDbType = SqlDbType.Float
            p15.Value = CDbl(curry)

            Dim p16 As New SqlClient.SqlParameter
            p16.ParameterName = "@broth"
            p16.Direction = ParameterDirection.Input
            p16.SqlDbType = SqlDbType.Float
            p16.Value = CDbl(broth)

            Dim p17 As New SqlClient.SqlParameter
            p17.ParameterName = "@msg"
            p17.Direction = ParameterDirection.Input
            p17.SqlDbType = SqlDbType.Float
            p17.Value = CDbl(msg)

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)
            cmd.Parameters.Add(p7)
            cmd.Parameters.Add(p8)
            cmd.Parameters.Add(pOptr)
            cmd.Parameters.Add(pEncoded)
            cmd.Parameters.Add(p9)
            cmd.Parameters.Add(p10)
            cmd.Parameters.Add(p11)
            cmd.Parameters.Add(p12)
            cmd.Parameters.Add(p13)
            cmd.Parameters.Add(p14)
            cmd.Parameters.Add(p15)
            cmd.Parameters.Add(p16)
            cmd.Parameters.Add(p17)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Function getProductCounter() As Long
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getCounter_ProductCode"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim ctr As Long
            If drCode.Read Then
                ctr = drCode.GetInt64(0) + 1
            Else
                ctr = 1
            End If

            drCode.Close()
            c.Close()
            Return ctr
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getAllProduct() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_displayAll_Product"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getListsOfProduction(ByVal prodnYear As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_display_ListsOfProduction"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@pCode"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = ""

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@prodnYear"
            p2.SqlDbType = SqlDbType.Int
            p2.Direction = ParameterDirection.Input
            If prodnYear = "" Then
                p2.Value = CStr(Format(getServerDateTime(), "yyyy")).Substring(3)
            Else
                p2.Value = prodnYear.Substring(3)
            End If

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@julian"
            p3.SqlDbType = SqlDbType.Int
            p3.Direction = ParameterDirection.Input
            p3.Value = "0"

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@bbe"
            p4.SqlDbType = SqlDbType.DateTime
            p4.Direction = ParameterDirection.Input
            p4.Value = Format(getServerDateTime, getTimeFormat())

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@unit"
            p5.SqlDbType = SqlDbType.Float
            p5.Direction = ParameterDirection.Input
            p5.Value = "0"

            Dim p6 As New SqlClient.SqlParameter
            p6.ParameterName = "@ucase"
            p6.SqlDbType = SqlDbType.Float
            p6.Direction = ParameterDirection.Input
            p6.Value = "0"

            Dim p7 As New SqlClient.SqlParameter
            p7.ParameterName = "@cases"
            p7.SqlDbType = SqlDbType.Float
            p7.Direction = ParameterDirection.Input
            p7.Value = "0"

            Dim p8 As New SqlClient.SqlParameter
            p8.ParameterName = "@fw"
            p8.SqlDbType = SqlDbType.Float
            p8.Direction = ParameterDirection.Input
            p8.Value = "0"

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)
            cmd.Parameters.Add(p7)
            cmd.Parameters.Add(p8)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getProductCode() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_displayAll_ProductCode"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getCanSize_tinsPerCase(ByVal productCode As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getTinsPerCase_ProductCode"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@pCode"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = productCode

            cmd.Parameters.Add(p1)

            Dim dr As SqlClient.SqlDataReader
            dr = cmd.ExecuteReader

            Dim value As Double
            If dr.Read Then
                If Not dr(0) Is DBNull.Value Then
                    value = dr.GetDouble(0)
                Else
                    value = 0
                End If
            Else
                value = 0
            End If

            dr.Close()
            c.Close()

            Return value
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getBatchlotsWithdrawn(ByVal prodnDate As String, ByVal shift As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_display_FishLotsWithdrawn"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            If prodnDate = "" Then
                p1.Value = Format(getServerDateTime(), getTimeFormat())
            Else
                p1.Value = Format(CDate(prodnDate), getTimeFormat())
            End If

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@prodnShift"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = shift

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getProductionDetails(ByVal prodnDate As String, ByVal shift As String, ByVal lot As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_display_ProductionDetails3"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            p1.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@prodnShift"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = shift

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@lot"
            p3.SqlDbType = SqlDbType.VarChar
            p3.Direction = ParameterDirection.Input
            p3.Value = lot

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@cases"
            p4.SqlDbType = SqlDbType.Float
            p4.Direction = ParameterDirection.Input
            p4.Value = 0

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub saveNewProduction(ByVal prodnDate As String, ByVal shift As String, _
    ByVal lot As String, ByVal fzBag As String, ByVal sublot As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_addNew_Production"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@id"
            p1.SqlDbType = SqlDbType.BigInt
            p1.Direction = ParameterDirection.Input
            p1.Value = getProductionCounter()

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@retortCode"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = "SR" & Format(CDate(prodnDate), "yy-") & Format(getProductionCounter(), "0#####")

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@prodnDate"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.DateTime
            p3.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@prodnShift"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = shift

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@lot#"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.VarChar
            p5.Value = lot

            Dim pOptr As New SqlClient.SqlParameter
            pOptr.ParameterName = "@optr"
            pOptr.Direction = ParameterDirection.Input
            pOptr.SqlDbType = SqlDbType.VarChar
            pOptr.Value = modModule.getUsername

            Dim pEncoded As New SqlClient.SqlParameter
            pEncoded.ParameterName = "@dateTimeEncoded"
            pEncoded.Direction = ParameterDirection.Input
            pEncoded.SqlDbType = SqlDbType.DateTime
            pEncoded.Value = getServerDateTime()

            Dim p6 As New SqlClient.SqlParameter
            p6.ParameterName = "@fzBags"
            p6.Direction = ParameterDirection.Input
            p6.SqlDbType = SqlDbType.VarChar
            p6.Value = fzBag

            Dim p7 As New SqlClient.SqlParameter
            p7.ParameterName = "@sublot"
            p7.Direction = ParameterDirection.Input
            p7.SqlDbType = SqlDbType.VarChar
            p7.Value = sublot

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(pOptr)
            cmd.Parameters.Add(pEncoded)
            cmd.Parameters.Add(p6)
            cmd.Parameters.Add(p7)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            daBuyer.Dispose()
            dsBuyer.Dispose()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub

    Public Sub saveNewProduction_Details(ByVal prodnDate As String, ByVal shift As String, _
     ByVal lot As String, ByVal pCode As String, ByVal prodnYear As String, ByVal prodnJulian As String, _
     ByVal bbe As String, ByVal units As String, ByVal cansPerCase As String, ByVal fw As String, _
     ByVal nw As String, ByVal oilRatio As String, ByVal pCode2 As String, ByVal fromBag As String, ByVal sublot As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_addNew_ProductionDetails"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@retortCode"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = getRetortCode(prodnDate, shift, lot, sublot)

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@pCode"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = pCode

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@prodnYear"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.Int
            p3.Value = CInt(prodnYear)

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@prodnJulian"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.Int
            p4.Value = CInt(prodnJulian)

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@units"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.Float
            p5.Value = CDbl(units)

            Dim p6 As New SqlClient.SqlParameter
            p6.ParameterName = "@fw"
            p6.Direction = ParameterDirection.Input
            p6.SqlDbType = SqlDbType.Float
            p6.Value = CDbl(fw)

            Dim p7 As New SqlClient.SqlParameter
            p7.ParameterName = "@bbe"
            p7.Direction = ParameterDirection.Input
            p7.SqlDbType = SqlDbType.DateTime
            p7.Value = Format(CDate(bbe), "dd/MM/yyyy") 'bbe

            Dim p8 As New SqlClient.SqlParameter
            p8.ParameterName = "@cansPerCase"
            p8.Direction = ParameterDirection.Input
            p8.SqlDbType = SqlDbType.Float
            If cansPerCase = "" Then
                p8.Value = 0
            Else
                p8.Value = CDbl(cansPerCase)
            End If

            Dim p9 As New SqlClient.SqlParameter
            p9.ParameterName = "@nw"
            p9.Direction = ParameterDirection.Input
            p9.SqlDbType = SqlDbType.Float
            If cansPerCase = "" Then
                p9.Value = 0
            Else
                p9.Value = CDbl(nw)
            End If

            Dim p10 As New SqlClient.SqlParameter
            p10.ParameterName = "@oilRatio"
            p10.Direction = ParameterDirection.Input
            p10.SqlDbType = SqlDbType.Float
            If cansPerCase = "" Then
                p10.Value = 0
            Else
                p10.Value = CDbl(oilRatio)
            End If

            Dim p11 As New SqlClient.SqlParameter
            p11.ParameterName = "@pCode2"
            p11.Direction = ParameterDirection.Input
            p11.SqlDbType = SqlDbType.VarChar
            p11.Value = pCode2

            Dim p12 As New SqlClient.SqlParameter
            p12.ParameterName = "@bomCode"
            p12.Direction = ParameterDirection.Input
            p12.SqlDbType = SqlDbType.VarChar
            p12.Value = getLatestBOMCode(pCode)

            Dim p13 As New SqlClient.SqlParameter
            p13.ParameterName = "@fromBag"
            p13.Direction = ParameterDirection.Input
            p13.SqlDbType = SqlDbType.VarChar
            p13.Value = fromBag

            'Dim p14 As New SqlClient.SqlParameter
            'p14.ParameterName = "@mrnLabel"
            'p14.Direction = ParameterDirection.Input
            'p14.SqlDbType = SqlDbType.VarChar
            'p14.Value = mrnLabel

            'Dim p15 As New SqlClient.SqlParameter
            'p15.ParameterName = "@mrnOil"
            'p15.Direction = ParameterDirection.Input
            'p15.SqlDbType = SqlDbType.VarChar
            'p15.Value = mrnOil

            'Dim p16 As New SqlClient.SqlParameter
            'p16.ParameterName = "@mrnSalt"
            'p16.Direction = ParameterDirection.Input
            'p16.SqlDbType = SqlDbType.VarChar
            'p16.Value = mrnSalt

            'Dim p17 As New SqlClient.SqlParameter
            'p17.ParameterName = "@mrnChiliFruit"
            'p17.Direction = ParameterDirection.Input
            'p17.SqlDbType = SqlDbType.VarChar
            'p17.Value = mrnChiliFruit

            'Dim p18 As New SqlClient.SqlParameter
            'p18.ParameterName = "@mrnChiliPowder"
            'p18.Direction = ParameterDirection.Input
            'p18.SqlDbType = SqlDbType.VarChar
            'p18.Value = mrnChiliPowder

            'Dim p19 As New SqlClient.SqlParameter
            'p19.ParameterName = "@mrnCurry"
            'p19.Direction = ParameterDirection.Input
            'p19.SqlDbType = SqlDbType.VarChar
            'p19.Value = mrnCurry

            'Dim p20 As New SqlClient.SqlParameter
            'p20.ParameterName = "@mrnBroth"
            'p20.Direction = ParameterDirection.Input
            'p20.SqlDbType = SqlDbType.VarChar
            'p20.Value = mrnBroth

            'Dim p21 As New SqlClient.SqlParameter
            'p21.ParameterName = "@mrnMSG"
            'p21.Direction = ParameterDirection.Input
            'p21.SqlDbType = SqlDbType.VarChar
            'p21.Value = mrnMSG

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)
            cmd.Parameters.Add(p7)
            cmd.Parameters.Add(p8)
            cmd.Parameters.Add(p9)
            cmd.Parameters.Add(p10)
            cmd.Parameters.Add(p11)
            cmd.Parameters.Add(p12)
            cmd.Parameters.Add(p13)
            'cmd.Parameters.Add(p14)
            'cmd.Parameters.Add(p15)
            'cmd.Parameters.Add(p16)
            'cmd.Parameters.Add(p17)
            'cmd.Parameters.Add(p18)
            'cmd.Parameters.Add(p19)
            'cmd.Parameters.Add(p20)
            'cmd.Parameters.Add(p21)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            daBuyer.Dispose()
            dsBuyer.Dispose()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub

    Public Sub saveNewProduction_Details_MRN(ByVal prodnDate As String, ByVal shift As String, _
    ByVal lot As String, ByVal pCode As String, ByVal mrnCan As String, ByVal mrnEnd As String, ByVal mrnCarton As String, _
    ByVal mrnLabel As String, ByVal mrnOil As String, ByVal mrnSalt As String, ByVal mrnChiliFruit As String, _
    ByVal mrnChiliPowder As String, ByVal mrnCurry As String, ByVal mrnBroth As String, ByVal mrnMSG As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_addNew_ProductionDetails_MRN"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@retortCode"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = getProductionCode(prodnDate, shift, lot)

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@pCode"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = pCode

            Dim p11 As New SqlClient.SqlParameter
            p11.ParameterName = "@mrnCan"
            p11.Direction = ParameterDirection.Input
            p11.SqlDbType = SqlDbType.VarChar
            p11.Value = mrnCan

            Dim p12 As New SqlClient.SqlParameter
            p12.ParameterName = "@mrnEnd"
            p12.Direction = ParameterDirection.Input
            p12.SqlDbType = SqlDbType.VarChar
            p12.Value = mrnEnd

            Dim p13 As New SqlClient.SqlParameter
            p13.ParameterName = "@mrnCartons"
            p13.Direction = ParameterDirection.Input
            p13.SqlDbType = SqlDbType.VarChar
            p13.Value = mrnCarton

            Dim p14 As New SqlClient.SqlParameter
            p14.ParameterName = "@mrnLabel"
            p14.Direction = ParameterDirection.Input
            p14.SqlDbType = SqlDbType.VarChar
            p14.Value = mrnLabel

            Dim p15 As New SqlClient.SqlParameter
            p15.ParameterName = "@mrnOil"
            p15.Direction = ParameterDirection.Input
            p15.SqlDbType = SqlDbType.VarChar
            p15.Value = mrnOil

            Dim p16 As New SqlClient.SqlParameter
            p16.ParameterName = "@mrnSalt"
            p16.Direction = ParameterDirection.Input
            p16.SqlDbType = SqlDbType.VarChar
            p16.Value = mrnSalt

            Dim p17 As New SqlClient.SqlParameter
            p17.ParameterName = "@mrnChiliFruit"
            p17.Direction = ParameterDirection.Input
            p17.SqlDbType = SqlDbType.VarChar
            p17.Value = mrnChiliFruit

            Dim p18 As New SqlClient.SqlParameter
            p18.ParameterName = "@mrnChiliPowder"
            p18.Direction = ParameterDirection.Input
            p18.SqlDbType = SqlDbType.VarChar
            p18.Value = mrnChiliPowder

            Dim p19 As New SqlClient.SqlParameter
            p19.ParameterName = "@mrnCurry"
            p19.Direction = ParameterDirection.Input
            p19.SqlDbType = SqlDbType.VarChar
            p19.Value = mrnCurry

            Dim p20 As New SqlClient.SqlParameter
            p20.ParameterName = "@mrnBroth"
            p20.Direction = ParameterDirection.Input
            p20.SqlDbType = SqlDbType.VarChar
            p20.Value = mrnBroth

            Dim p21 As New SqlClient.SqlParameter
            p21.ParameterName = "@mrnMSG"
            p21.Direction = ParameterDirection.Input
            p21.SqlDbType = SqlDbType.VarChar
            p21.Value = mrnMSG

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p11)
            cmd.Parameters.Add(p12)
            cmd.Parameters.Add(p13)
            cmd.Parameters.Add(p14)
            cmd.Parameters.Add(p15)
            cmd.Parameters.Add(p16)
            cmd.Parameters.Add(p17)
            cmd.Parameters.Add(p18)
            cmd.Parameters.Add(p19)
            cmd.Parameters.Add(p20)
            cmd.Parameters.Add(p21)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            daBuyer.Dispose()
            dsBuyer.Dispose()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub

    Public Function getProductionCounter() As Long
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getCounter_Production"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim ctr As Long
            If drCode.Read Then
                ctr = drCode.GetInt64(0) + 1
            Else
                ctr = 1
            End If

            drCode.Close()
            c.Close()
            Return ctr
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getProductionCode(ByVal prodnDate As String, ByVal shift As String, ByVal lot As String) As String
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getProductionCode"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            If prodnDate = "" Then
                p1.Value = "1/1/1901"
            Else
                p1.Value = Format(CDate(prodnDate), getTimeFormat())
            End If

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@shift"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = shift

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@lot"
            p3.SqlDbType = SqlDbType.VarChar
            p3.Direction = ParameterDirection.Input
            p3.Value = lot

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As String
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetString(0)
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub deleteProductionDetails(ByVal prodnDate As String, ByVal shift As String, ByVal lot As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_delete_ProductionDetails"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@retortCode"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = getProductionCode(prodnDate, shift, lot)

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Function getSublot() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand("SELECT sublot AS Sublot" & _
                " FROM dbo.tblSublot" & _
                " ORDER BY sublot", c)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getTypeOfSets() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand("SELECT sets AS [Type of Set]" & _
                " FROM dbo.tblTypeOfSets " & _
                " ORDER BY sets ", c)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getAllTP() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_displayAll_TimePeriod"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getProductPeriodCode() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_display_TimePeriodCode"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getProductPeriodDescription() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_display_TimePeriodDescription"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function validateTP(ByVal code As String, ByVal desc As String) As Boolean
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getExistence_TimePeriod"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@tpCode"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = code

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@tpDesc"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = desc

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(paramRecCount)

            Dim da As New SqlClient.SqlDataAdapter
            Dim ds As New DataSet("dbPPICIS")

            da.SelectCommand = cmd
            da.Fill(ds)

            If Val(cmd.Parameters("@recCount").Value) > 0 Then
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return True
            Else
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return False
            End If
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub saveNewTP(ByVal code As String, ByVal desc As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_addNew_TimePeriod"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@id"
            p1.SqlDbType = SqlDbType.BigInt
            p1.Direction = ParameterDirection.Input
            p1.Value = getTPCounter()

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@tpCode"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = code

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@tpDesc"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = desc

            Dim pOptr As New SqlClient.SqlParameter
            pOptr.ParameterName = "@optr"
            pOptr.Direction = ParameterDirection.Input
            pOptr.SqlDbType = SqlDbType.VarChar
            pOptr.Value = modModule.getUsername

            Dim pEncoded As New SqlClient.SqlParameter
            pEncoded.ParameterName = "@dateTimeEncoded"
            pEncoded.Direction = ParameterDirection.Input
            pEncoded.SqlDbType = SqlDbType.DateTime
            pEncoded.Value = getServerDateTime()

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(pOptr)
            cmd.Parameters.Add(pEncoded)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            daBuyer.Dispose()
            dsBuyer.Dispose()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub

    Public Function getTPCounter() As Long
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getCounter_TimePeriod"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim ctr As Long
            If drCode.Read Then
                ctr = drCode.GetInt64(0) + 1
            Else
                ctr = 1
            End If

            drCode.Close()
            c.Close()
            Return ctr
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub updateTP(ByVal code As String, ByVal desc As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_update_TimePeriod"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@tpCode"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = code

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@tpDesc"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = desc

            Dim pOptr As New SqlClient.SqlParameter
            pOptr.ParameterName = "@optr"
            pOptr.Direction = ParameterDirection.Input
            pOptr.SqlDbType = SqlDbType.VarChar
            pOptr.Value = modModule.getUsername

            Dim pEncoded As New SqlClient.SqlParameter
            pEncoded.ParameterName = "@dateTimeEncoded"
            pEncoded.Direction = ParameterDirection.Input
            pEncoded.SqlDbType = SqlDbType.DateTime
            pEncoded.Value = getServerDateTime()

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(pOptr)
            cmd.Parameters.Add(pEncoded)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Function getProductPeriodCode(ByVal period As String) As String
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getPeriodCode"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@tpDesc"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = period

            cmd.Parameters.Add(p1)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As String
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetString(0)
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function validateFishBinDeposited(ByVal lot As String, ByVal bin As String, _
    ByVal sublot As String) As Boolean
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getExistence_FishBinDeposited"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@batchlot"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = lot

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@bin#"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = bin

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@sublot"
            p3.SqlDbType = SqlDbType.VarChar
            p3.Direction = ParameterDirection.Input
            p3.Value = sublot

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(paramRecCount)

            Dim dr As SqlClient.SqlDataReader
            dr = cmd.ExecuteReader

            Dim returnValue As Boolean
            If dr.Read Then
                If Not dr(0) Is DBNull.Value Then
                    returnValue = True
                Else
                    returnValue = False
                End If
            Else
                returnValue = False
            End If

            c.Close()
            dr.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub updateFishBinDeposited(ByVal lot As String, ByVal sublot As String, ByVal cs As String, _
    ByVal remarks As String, ByVal bin As String, ByVal specie As String, ByVal size As String, ByVal gw As String, _
    ByVal location As String, ByVal position As String, ByVal height As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_update_FishBinDeposited_All"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@depositCode"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = getDepositCode(bin)

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@binCode"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = getFishBinCode(bin)

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@batchlot"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = lot

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@specieCode"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.VarChar
            p5.Value = getSpecieCode(specie)

            Dim p6 As New SqlClient.SqlParameter
            p6.ParameterName = "@csCode"
            p6.Direction = ParameterDirection.Input
            p6.SqlDbType = SqlDbType.VarChar
            p6.Value = getCSCode(cs)

            Dim p7 As New SqlClient.SqlParameter
            p7.ParameterName = "@grossWeight"
            p7.Direction = ParameterDirection.Input
            p7.SqlDbType = SqlDbType.Float
            p7.Value = CDbl(gw)

            Dim p8 As New SqlClient.SqlParameter
            p8.ParameterName = "@dateTimeTransfer"
            p8.Direction = ParameterDirection.Input
            p8.SqlDbType = SqlDbType.DateTime
            p8.Value = getServerDateTime()

            Dim p9 As New SqlClient.SqlParameter
            p9.ParameterName = "@remarks"
            p9.Direction = ParameterDirection.Input
            p9.SqlDbType = SqlDbType.VarChar
            p9.Value = remarks

            Dim p10 As New SqlClient.SqlParameter
            p10.ParameterName = "@withdraw"
            p10.Direction = ParameterDirection.Input
            p10.SqlDbType = SqlDbType.VarChar
            p10.Value = "NO"

            Dim p11 As New SqlClient.SqlParameter
            p11.ParameterName = "@depositStatus"
            p11.Direction = ParameterDirection.Input
            p11.SqlDbType = SqlDbType.VarChar
            p11.Value = "*"

            Dim pOptr As New SqlClient.SqlParameter
            pOptr.ParameterName = "@optr"
            pOptr.Direction = ParameterDirection.Input
            pOptr.SqlDbType = SqlDbType.VarChar
            pOptr.Value = modModule.getUsername

            Dim pEncoded As New SqlClient.SqlParameter
            pEncoded.ParameterName = "@dateTimeEncoded"
            pEncoded.Direction = ParameterDirection.Input
            pEncoded.SqlDbType = SqlDbType.DateTime
            pEncoded.Value = getServerDateTime()

            Dim p12 As New SqlClient.SqlParameter
            p12.ParameterName = "@sizeCode"
            p12.Direction = ParameterDirection.Input
            p12.SqlDbType = SqlDbType.VarChar
            p12.Value = getFishSizeCodeByRange(size)

            Dim p13 As New SqlClient.SqlParameter
            p13.ParameterName = "@sublot"
            p13.Direction = ParameterDirection.Input
            p13.SqlDbType = SqlDbType.VarChar
            p13.Value = sublot

            Dim p14 As New SqlClient.SqlParameter
            p14.ParameterName = "@hold"
            p14.Direction = ParameterDirection.Input
            p14.SqlDbType = SqlDbType.Int
            p14.Value = 0

            Dim p15 As New SqlClient.SqlParameter
            p15.ParameterName = "@location"
            p15.Direction = ParameterDirection.Input
            p15.SqlDbType = SqlDbType.VarChar
            p15.Value = location

            Dim p16 As New SqlClient.SqlParameter
            p16.ParameterName = "@position"
            p16.Direction = ParameterDirection.Input
            p16.SqlDbType = SqlDbType.VarChar
            p16.Value = position

            Dim p17 As New SqlClient.SqlParameter
            p17.ParameterName = "@height"
            p17.Direction = ParameterDirection.Input
            p17.SqlDbType = SqlDbType.VarChar
            p17.Value = height

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)
            cmd.Parameters.Add(p7)
            cmd.Parameters.Add(p8)
            cmd.Parameters.Add(p9)
            cmd.Parameters.Add(p10)
            cmd.Parameters.Add(p11)
            cmd.Parameters.Add(pOptr)
            cmd.Parameters.Add(pEncoded)
            cmd.Parameters.Add(p12)
            cmd.Parameters.Add(p13)
            cmd.Parameters.Add(p14)
            cmd.Parameters.Add(p15)
            cmd.Parameters.Add(p16)
            cmd.Parameters.Add(p17)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Sub updateBagsDeposited(ByVal depositCode As String, ByVal specie As String, ByVal cs As String, _
    ByVal gw As String, ByVal remarks As String, ByVal location As String, ByVal position As String, _
    ByVal height As String, ByVal fishType As String, ByVal loinSize As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_update_FishBinDeposited_BagsDeposited"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@depositCode"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = depositCode

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@specieCode"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.VarChar
            p5.Value = getSpecieCode(specie)

            Dim p6 As New SqlClient.SqlParameter
            p6.ParameterName = "@csCode"
            p6.Direction = ParameterDirection.Input
            p6.SqlDbType = SqlDbType.VarChar
            p6.Value = getCSCode(cs)

            Dim p7 As New SqlClient.SqlParameter
            p7.ParameterName = "@grossWeight"
            p7.Direction = ParameterDirection.Input
            p7.SqlDbType = SqlDbType.Float
            p7.Value = CDbl(gw)

            Dim p9 As New SqlClient.SqlParameter
            p9.ParameterName = "@remarks"
            p9.Direction = ParameterDirection.Input
            p9.SqlDbType = SqlDbType.VarChar
            p9.Value = remarks

            Dim pOptr As New SqlClient.SqlParameter
            pOptr.ParameterName = "@optr"
            pOptr.Direction = ParameterDirection.Input
            pOptr.SqlDbType = SqlDbType.VarChar
            pOptr.Value = modModule.getUsername

            Dim pEncoded As New SqlClient.SqlParameter
            pEncoded.ParameterName = "@dateTimeEncoded"
            pEncoded.Direction = ParameterDirection.Input
            pEncoded.SqlDbType = SqlDbType.DateTime
            pEncoded.Value = getServerDateTime()

            Dim p15 As New SqlClient.SqlParameter
            p15.ParameterName = "@location"
            p15.Direction = ParameterDirection.Input
            p15.SqlDbType = SqlDbType.VarChar
            p15.Value = location

            Dim p16 As New SqlClient.SqlParameter
            p16.ParameterName = "@position"
            p16.Direction = ParameterDirection.Input
            p16.SqlDbType = SqlDbType.VarChar
            p16.Value = position

            Dim p17 As New SqlClient.SqlParameter
            p17.ParameterName = "@height"
            p17.Direction = ParameterDirection.Input
            p17.SqlDbType = SqlDbType.VarChar
            p17.Value = height

            Dim p18 As New SqlClient.SqlParameter
            p18.ParameterName = "@fishType"
            p18.Direction = ParameterDirection.Input
            p18.SqlDbType = SqlDbType.VarChar
            p18.Value = fishType

            Dim p19 As New SqlClient.SqlParameter
            p19.ParameterName = "@loinSize"
            p19.Direction = ParameterDirection.Input
            p19.SqlDbType = SqlDbType.VarChar
            p19.Value = loinSize

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)
            cmd.Parameters.Add(p7)
            cmd.Parameters.Add(p9)
            cmd.Parameters.Add(pOptr)
            cmd.Parameters.Add(pEncoded)
            cmd.Parameters.Add(p15)
            cmd.Parameters.Add(p16)
            cmd.Parameters.Add(p17)
            cmd.Parameters.Add(p18)
            cmd.Parameters.Add(p19)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Function getReport_FishDepositInventory(ByVal cs As String, ByVal lot As String, ByVal specie As String, ByVal size As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_report_fishDepositInventory"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@cs"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = cs

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@lot"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = lot

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@specie"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = specie

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@sizes"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = size

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getTotalFishDepositInventory(ByVal cs As String, ByVal lot As String, ByVal specie As String, ByVal size As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_report_fishDepositInventory_TotalInventory"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@cs"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = cs

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@lot"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = lot

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@specie"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = specie

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@sizes"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = size

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As Double
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetDouble(0)
                Else
                    returnValue = 0
                End If
            Else
                returnValue = 0
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getProductionDetails_MRN(ByVal prodnDate As String, ByVal shift As String, ByVal lot As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_display_ProductionDetails_MRN"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            p1.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@prodnShift"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = shift

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@lot"
            p3.SqlDbType = SqlDbType.VarChar
            p3.Direction = ParameterDirection.Input
            p3.Value = lot

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getMRN_Classification(ByVal classification As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim qry As String
            Select Case classification
                Case "Can"
                    qry = "SELECT DISTINCT dbo.tblMRN.mrnNo AS [MRN No.] " & _
                            " FROM dbo.tblMRN INNER JOIN " & _
                            " dbo.tblMRN_Materials ON dbo.tblMRN.matCode = dbo.tblMRN_Materials.matCode " & _
                            " WHERE (dbo.tblMRN_Materials.matCategory LIKE 'Can%')"
                Case "End"
                    qry = "SELECT DISTINCT dbo.tblMRN.mrnNo AS [MRN No.] " & _
                            " FROM dbo.tblMRN INNER JOIN " & _
                            " dbo.tblMRN_Materials ON dbo.tblMRN.matCode = dbo.tblMRN_Materials.matCode " & _
                            " WHERE (dbo.tblMRN_Materials.matCategory LIKE '%End%')"
                Case "Soya"
                    qry = "SELECT DISTINCT dbo.tblMRN.mrnNo AS [MRN No.] " & _
                            " FROM dbo.tblMRN INNER JOIN " & _
                            " dbo.tblMRN_Materials ON dbo.tblMRN.matCode = dbo.tblMRN_Materials.matCode " & _
                            " WHERE (dbo.tblMRN_Materials.matDesc LIKE '%soya%')"
                Case "Blended Veg"
                    qry = "SELECT DISTINCT dbo.tblMRN.mrnNo AS [MRN No.] " & _
                            " FROM dbo.tblMRN INNER JOIN " & _
                            " dbo.tblMRN_Materials ON dbo.tblMRN.matCode = dbo.tblMRN_Materials.matCode " & _
                            " WHERE (dbo.tblMRN_Materials.matDesc LIKE '%blended veg%')"
                Case "Curry"
                    qry = "SELECT DISTINCT dbo.tblMRN.mrnNo AS [MRN No.] " & _
                            " FROM dbo.tblMRN INNER JOIN " & _
                            " dbo.tblMRN_Materials ON dbo.tblMRN.matCode = dbo.tblMRN_Materials.matCode " & _
                            " WHERE (dbo.tblMRN_Materials.matDesc LIKE '%curry%')"
                Case "Chili Powder"
                    qry = "SELECT DISTINCT dbo.tblMRN.mrnNo AS [MRN No.] " & _
                            " FROM dbo.tblMRN INNER JOIN " & _
                            " dbo.tblMRN_Materials ON dbo.tblMRN.matCode = dbo.tblMRN_Materials.matCode " & _
                            " WHERE (dbo.tblMRN_Materials.matDesc LIKE '%Chili Powder%')"
                Case "Chili Dried"
                    qry = "SELECT DISTINCT dbo.tblMRN.mrnNo AS [MRN No.] " & _
                            " FROM dbo.tblMRN INNER JOIN " & _
                            " dbo.tblMRN_Materials ON dbo.tblMRN.matCode = dbo.tblMRN_Materials.matCode " & _
                            " WHERE (dbo.tblMRN_Materials.matDesc LIKE '%dried%')"
                Case "Chili Fresh"
                    qry = "SELECT DISTINCT dbo.tblMRN.mrnNo AS [MRN No.] " & _
                            " FROM dbo.tblMRN INNER JOIN " & _
                            " dbo.tblMRN_Materials ON dbo.tblMRN.matCode = dbo.tblMRN_Materials.matCode " & _
                            " WHERE (dbo.tblMRN_Materials.matDesc LIKE '%fresh%')"
                Case "Salt"
                    qry = "SELECT DISTINCT dbo.tblMRN.mrnNo AS [MRN No.] " & _
                            " FROM dbo.tblMRN INNER JOIN " & _
                            " dbo.tblMRN_Materials ON dbo.tblMRN.matCode = dbo.tblMRN_Materials.matCode " & _
                            " WHERE (dbo.tblMRN_Materials.matDesc LIKE '%salt%')"
                Case "Carton"
                    qry = "SELECT DISTINCT dbo.tblMRN.mrnNo AS [MRN No.] " & _
                           " FROM dbo.tblMRN INNER JOIN " & _
                           " dbo.tblMRN_Materials ON dbo.tblMRN.matCode = dbo.tblMRN_Materials.matCode " & _
                           " WHERE (dbo.tblMRN_Materials.matCategory LIKE 'Carton%')"
                Case "Label"
                    qry = "SELECT DISTINCT dbo.tblMRN.mrnNo AS [MRN No.] " & _
                           " FROM dbo.tblMRN INNER JOIN " & _
                           " dbo.tblMRN_Materials ON dbo.tblMRN.matCode = dbo.tblMRN_Materials.matCode " & _
                           " WHERE (dbo.tblMRN_Materials.matCategory LIKE 'Label%')"
                Case "Bag"
                    qry = "SELECT DISTINCT dbo.tblMRN.mrnNo AS [MRN No.] " & _
                           " FROM dbo.tblMRN INNER JOIN " & _
                           " dbo.tblMRN_Materials ON dbo.tblMRN.matCode = dbo.tblMRN_Materials.matCode " & _
                           " WHERE (dbo.tblMRN_Materials.matCategory LIKE '%Loin%')"
            End Select
            Dim cmd As New SqlClient.SqlCommand(qry, c)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getAllMRN_Materials() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand("SELECT DISTINCT matCode AS Code, matDesc AS Description, matCategory AS Category " & _
                " FROM dbo.tblMRN_Materials " & _
                " ORDER BY matDesc", c)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getAllMRN_Materials(ByVal category As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand("SELECT DISTINCT matCode AS Code, matDesc AS Description, matCategory AS Category " & _
                " FROM dbo.tblMRN_Materials " & _
                " WHERE matCategory = '" & category & "' " & _
                " ORDER BY matDesc", c)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getMRN_MaterialsCode() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand("SELECT DISTINCT matCode AS Code " & _
                " FROM dbo.tblMRN_Materials " & _
                " ORDER BY matCode", c)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getMRN_MaterialsDescription() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand("SELECT DISTINCT matDesc AS Code " & _
                " FROM dbo.tblMRN_Materials " & _
                " ORDER BY matDesc", c)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function validateMaterials(ByVal code As String, ByVal desc As String) As Boolean
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getExistence_Materials"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@matCode"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = code

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@matDesc"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = desc

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(paramRecCount)

            Dim da As New SqlClient.SqlDataAdapter
            Dim ds As New DataSet("dbPPICIS")

            da.SelectCommand = cmd
            da.Fill(ds)

            If Val(cmd.Parameters("@recCount").Value) > 0 Then
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return True
            Else
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return False
            End If
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub saveNewMRN_Materials(ByVal code As String, ByVal desc As String, ByVal category As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_addNew_MRN_Materials"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@id"
            p1.SqlDbType = SqlDbType.BigInt
            p1.Direction = ParameterDirection.Input
            p1.Value = getMRN_MaterialsCounter()

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@matCode"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = code

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@matDesc"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = desc

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@matCategory"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = category

            Dim pOptr As New SqlClient.SqlParameter
            pOptr.ParameterName = "@optr"
            pOptr.Direction = ParameterDirection.Input
            pOptr.SqlDbType = SqlDbType.VarChar
            pOptr.Value = modModule.getUsername

            Dim pEncoded As New SqlClient.SqlParameter
            pEncoded.ParameterName = "@dateTimeEncoded"
            pEncoded.Direction = ParameterDirection.Input
            pEncoded.SqlDbType = SqlDbType.DateTime
            pEncoded.Value = getServerDateTime()

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(pOptr)
            cmd.Parameters.Add(pEncoded)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            daBuyer.Dispose()
            dsBuyer.Dispose()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub

    Public Function getMRN_MaterialsCounter() As Long
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getCounter_MRN_Materials"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim ctr As Long
            If drCode.Read Then
                ctr = drCode.GetInt64(0) + 1
            Else
                ctr = 1
            End If

            drCode.Close()
            c.Close()
            Return ctr
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub updateMRN_Materials(ByVal code As String, ByVal desc As String, ByVal category As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_update_MRN_Materials"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@matCode"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = code

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@matDesc"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = desc

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@matCategory"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = category

            Dim pOptr As New SqlClient.SqlParameter
            pOptr.ParameterName = "@optr"
            pOptr.Direction = ParameterDirection.Input
            pOptr.SqlDbType = SqlDbType.VarChar
            pOptr.Value = modModule.getUsername

            Dim pEncoded As New SqlClient.SqlParameter
            pEncoded.ParameterName = "@dateTimeEncoded"
            pEncoded.Direction = ParameterDirection.Input
            pEncoded.SqlDbType = SqlDbType.DateTime
            pEncoded.Value = getServerDateTime()

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(pOptr)
            cmd.Parameters.Add(pEncoded)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Function getAllMRN_Manufacturer() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand("SELECT DISTINCT mrnFacCode AS Code, facName AS Manufacturer, facAddress AS Address " & _
                " FROM dbo.tblMRN_Manufacturer " & _
                " ORDER BY Manufacturer", c)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getMRN_ManufacturerCode() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand("SELECT DISTINCT mrnFacCode AS Code" & _
                " FROM dbo.tblMRN_Manufacturer " & _
                " ORDER BY mrnFacCode", c)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getMRN_ManufacturerDescription() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand("SELECT DISTINCT facName AS Manufacturer" & _
                " FROM dbo.tblMRN_Manufacturer " & _
                " ORDER BY facName", c)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function validateManufacturer(ByVal code As String, ByVal desc As String) As Boolean
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getExistence_Manufacturer"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@mrnFacCode"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = code

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@facName"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = desc

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(paramRecCount)

            Dim da As New SqlClient.SqlDataAdapter
            Dim ds As New DataSet("dbPPICIS")

            da.SelectCommand = cmd
            da.Fill(ds)

            If Val(cmd.Parameters("@recCount").Value) > 0 Then
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return True
            Else
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return False
            End If
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub saveNewMRN_Manufacturer(ByVal code As String, ByVal desc As String, ByVal address As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_addNew_MRN_Manufacturer"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@id"
            p1.SqlDbType = SqlDbType.BigInt
            p1.Direction = ParameterDirection.Input
            p1.Value = getMRN_ManufacturerCounter()

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@mrnFacCode"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = code

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@facName"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = desc

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@facAddress"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = address

            Dim pOptr As New SqlClient.SqlParameter
            pOptr.ParameterName = "@optr"
            pOptr.Direction = ParameterDirection.Input
            pOptr.SqlDbType = SqlDbType.VarChar
            pOptr.Value = modModule.getUsername

            Dim pEncoded As New SqlClient.SqlParameter
            pEncoded.ParameterName = "@dateTimeEncoded"
            pEncoded.Direction = ParameterDirection.Input
            pEncoded.SqlDbType = SqlDbType.DateTime
            pEncoded.Value = getServerDateTime()

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(pOptr)
            cmd.Parameters.Add(pEncoded)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            daBuyer.Dispose()
            dsBuyer.Dispose()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub

    Public Function getMRN_ManufacturerCounter() As Long
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getCounter_Manufacturer"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim ctr As Long
            If drCode.Read Then
                ctr = drCode.GetInt64(0) + 1
            Else
                ctr = 1
            End If

            drCode.Close()
            c.Close()
            Return ctr
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub updateMRN_Manufacturer(ByVal code As String, ByVal desc As String, ByVal address As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_update_MRN_Manufacturer"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@mrnFacCode"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = code

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@facName"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = desc

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@facAddress"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = address

            Dim pOptr As New SqlClient.SqlParameter
            pOptr.ParameterName = "@optr"
            pOptr.Direction = ParameterDirection.Input
            pOptr.SqlDbType = SqlDbType.VarChar
            pOptr.Value = modModule.getUsername

            Dim pEncoded As New SqlClient.SqlParameter
            pEncoded.ParameterName = "@dateTimeEncoded"
            pEncoded.Direction = ParameterDirection.Input
            pEncoded.SqlDbType = SqlDbType.DateTime
            pEncoded.Value = getServerDateTime()

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(pOptr)
            cmd.Parameters.Add(pEncoded)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Function getAllMRN_Supplier() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand("SELECT DISTINCT mrnSupCode AS Code, mrnSupName AS Supplier, mrnSupAddress AS Address " & _
                " FROM dbo.tblMRN_Supplier " & _
                " ORDER BY Supplier", c)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getMRN_SupplierCode() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand("SELECT DISTINCT mrnSupCode AS Code " & _
                " FROM dbo.tblMRN_Supplier " & _
                " ORDER BY mrnSupCode ", c)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getMRN_SupplierDescription() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand("SELECT DISTINCT mrnSupName AS Supplier " & _
                " FROM dbo.tblMRN_Supplier " & _
                " ORDER BY mrnSupName ", c)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function validateMRNSupplier(ByVal code As String, ByVal desc As String) As Boolean
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getExistence_MRN_Supplier"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@mrnSupCode"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = code

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@mrnSupName"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = desc

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(paramRecCount)

            Dim da As New SqlClient.SqlDataAdapter
            Dim ds As New DataSet("dbPPICIS")

            da.SelectCommand = cmd
            da.Fill(ds)

            If Val(cmd.Parameters("@recCount").Value) > 0 Then
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return True
            Else
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return False
            End If
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub saveNewMRN_Supplier(ByVal code As String, ByVal desc As String, ByVal address As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_addNew_MRN_Supplier"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@id"
            p1.SqlDbType = SqlDbType.BigInt
            p1.Direction = ParameterDirection.Input
            p1.Value = getMRN_SupplierCounter()

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@mrnSupCode"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = code

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@mrnSupName"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = desc

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@mrnSupAddress"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = address

            Dim pOptr As New SqlClient.SqlParameter
            pOptr.ParameterName = "@optr"
            pOptr.Direction = ParameterDirection.Input
            pOptr.SqlDbType = SqlDbType.VarChar
            pOptr.Value = modModule.getUsername

            Dim pEncoded As New SqlClient.SqlParameter
            pEncoded.ParameterName = "@dateTimeEncoded"
            pEncoded.Direction = ParameterDirection.Input
            pEncoded.SqlDbType = SqlDbType.DateTime
            pEncoded.Value = getServerDateTime()

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(pOptr)
            cmd.Parameters.Add(pEncoded)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            daBuyer.Dispose()
            dsBuyer.Dispose()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub

    Public Function getMRN_SupplierCounter() As Long
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getCounter_MRN_Supplier"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim ctr As Long
            If drCode.Read Then
                ctr = drCode.GetInt64(0) + 1
            Else
                ctr = 1
            End If

            drCode.Close()
            c.Close()
            Return ctr
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub updateMRN_Supplier(ByVal code As String, ByVal desc As String, ByVal address As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_update_MRN_Supplier"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@mrnSupCode"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = code

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@mrnSupName"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = desc

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@mrnSupAddress"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = address

            Dim pOptr As New SqlClient.SqlParameter
            pOptr.ParameterName = "@optr"
            pOptr.Direction = ParameterDirection.Input
            pOptr.SqlDbType = SqlDbType.VarChar
            pOptr.Value = modModule.getUsername

            Dim pEncoded As New SqlClient.SqlParameter
            pEncoded.ParameterName = "@dateTimeEncoded"
            pEncoded.Direction = ParameterDirection.Input
            pEncoded.SqlDbType = SqlDbType.DateTime
            pEncoded.Value = getServerDateTime()

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(pOptr)
            cmd.Parameters.Add(pEncoded)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Function getMRN_MaterialsCategory() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand("SELECT DISTINCT matCategory AS Category " & _
                " FROM dbo.tblMRN_Materials " & _
                " ORDER BY matCategory", c)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getMRN_MaterialsCategory(ByVal category As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand("SELECT DISTINCT matDesc AS Materials " & _
                " FROM dbo.tblMRN_Materials " & _
                " WHERE matCategory = '" & category & "' " & _
                " ORDER BY matDesc", c)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getMaterialsCategory(ByVal materials As String) As String
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand("SELECT DISTINCT matCategory AS Materials " & _
                " FROM dbo.tblMRN_Materials " & _
                " WHERE matDesc = '" & materials & "' " & _
                " ORDER BY matCategory", c)

            Dim dr As SqlClient.SqlDataReader
            dr = cmd.ExecuteReader

            Dim category As String
            If dr.Read Then
                If Not dr(0) Is DBNull.Value Then
                    category = dr.GetString(0)
                Else
                    category = ""
                End If
            Else
                category = ""
            End If

            dr.Close()
            c.Close()

            Return category
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getMRN_MaterialsCode(ByVal materials As String) As String
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand("SELECT DISTINCT matCode AS Code " & _
                " FROM dbo.tblMRN_Materials " & _
                " WHERE matDesc = '" & materials & "'", c)

            Dim dr As SqlClient.SqlDataReader
            dr = cmd.ExecuteReader

            Dim returnValue As String
            If dr.Read Then
                If Not dr(0) Is DBNull.Value Then
                    returnValue = dr.GetString(0)
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            dr.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getMRN_ManufacturerCode(ByVal manufacturer As String) As String
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand("SELECT DISTINCT mrnFacCode AS Code" & _
                " FROM dbo.tblMRN_Manufacturer " & _
                " WHERE facName = '" & manufacturer & "'", c)

            Dim dr As SqlClient.SqlDataReader
            dr = cmd.ExecuteReader

            Dim returnValue As String
            If dr.Read Then
                If Not dr(0) Is DBNull.Value Then
                    returnValue = dr.GetString(0)
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            dr.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getMRN_SupplierCode(ByVal supplier As String) As String
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand("SELECT DISTINCT mrnSupCode AS Code " & _
                " FROM dbo.tblMRN_Supplier " & _
                " WHERE mrnSupName = '" & supplier & "'", c)

            Dim dr As SqlClient.SqlDataReader
            dr = cmd.ExecuteReader

            Dim returnValue As String
            If dr.Read Then
                If Not dr(0) Is DBNull.Value Then
                    returnValue = dr.GetString(0)
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            dr.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getAllMRN(ByVal category As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_displayAll_MRN_Category"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@category"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = category

            cmd.Parameters.Add(p1)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function validateMRN(ByVal code As String) As Boolean
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getExistence_MRN"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@mrnNo"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = code

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(paramRecCount)

            Dim da As New SqlClient.SqlDataAdapter
            Dim ds As New DataSet("dbPPICIS")

            da.SelectCommand = cmd
            da.Fill(ds)

            If Val(cmd.Parameters("@recCount").Value) > 0 Then
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return True
            Else
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return False
            End If
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub saveNewMRN(ByVal code As String, ByVal materials As String, ByVal manufacturer As String, _
    ByVal supplier As String, ByVal invoice As String, ByVal grn As String, ByVal yr As String, _
    ByVal qty As String, ByVal unit As String, ByVal amount As String, ByVal freight As String, _
    ByVal conversion As String, ByVal poNo As String, ByVal invoiceNo As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_addNew_MRN"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@id"
            p1.SqlDbType = SqlDbType.BigInt
            p1.Direction = ParameterDirection.Input
            p1.Value = getMRNCounter()

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@mrnNo"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = code

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@mrnFacCode"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = getMRN_ManufacturerCode(manufacturer)

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@mrnSupCode"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = getMRN_SupplierCode(supplier)

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@yr"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.Int
            p5.Value = yr

            Dim p6 As New SqlClient.SqlParameter
            p6.ParameterName = "@matCode"
            p6.Direction = ParameterDirection.Input
            p6.SqlDbType = SqlDbType.VarChar
            p6.Value = getMRN_MaterialsCode(materials)

            Dim p7 As New SqlClient.SqlParameter
            p7.ParameterName = "@invoiceDate"
            p7.Direction = ParameterDirection.Input
            p7.SqlDbType = SqlDbType.DateTime
            p7.Value = Format(CDate(invoice), getTimeFormat())

            Dim p8 As New SqlClient.SqlParameter
            p8.ParameterName = "@grnDate"
            p8.Direction = ParameterDirection.Input
            p8.SqlDbType = SqlDbType.DateTime
            p8.Value = Format(CDate(grn), getTimeFormat())

            Dim pOptr As New SqlClient.SqlParameter
            pOptr.ParameterName = "@optr"
            pOptr.Direction = ParameterDirection.Input
            pOptr.SqlDbType = SqlDbType.VarChar
            pOptr.Value = modModule.getUsername

            Dim pEncoded As New SqlClient.SqlParameter
            pEncoded.ParameterName = "@dateTimeEncoded"
            pEncoded.Direction = ParameterDirection.Input
            pEncoded.SqlDbType = SqlDbType.DateTime
            pEncoded.Value = getServerDateTime()

            Dim p9 As New SqlClient.SqlParameter
            p9.ParameterName = "@qty"
            p9.Direction = ParameterDirection.Input
            p9.SqlDbType = SqlDbType.Float
            p9.Value = CDbl(qty)

            Dim p10 As New SqlClient.SqlParameter
            p10.ParameterName = "@unit"
            p10.Direction = ParameterDirection.Input
            p10.SqlDbType = SqlDbType.VarChar
            p10.Value = unit

            Dim p11 As New SqlClient.SqlParameter
            p11.ParameterName = "@amount"
            p11.Direction = ParameterDirection.Input
            p11.SqlDbType = SqlDbType.Float
            p11.Value = CDbl(amount)

            Dim p12 As New SqlClient.SqlParameter
            p12.ParameterName = "@freight"
            p12.Direction = ParameterDirection.Input
            p12.SqlDbType = SqlDbType.Float
            p12.Value = CDbl(freight)

            Dim p13 As New SqlClient.SqlParameter
            p13.ParameterName = "@conversion"
            p13.Direction = ParameterDirection.Input
            p13.SqlDbType = SqlDbType.Float
            p13.Value = CDbl(conversion)

            Dim p14 As New SqlClient.SqlParameter
            p14.ParameterName = "@poNo"
            p14.Direction = ParameterDirection.Input
            p14.SqlDbType = SqlDbType.VarChar
            p14.Value = poNo

            Dim p15 As New SqlClient.SqlParameter
            p15.ParameterName = "@invoiceNo"
            p15.Direction = ParameterDirection.Input
            p15.SqlDbType = SqlDbType.VarChar
            p15.Value = invoiceNo

            Dim p16 As New SqlClient.SqlParameter
            p16.ParameterName = "@bal"
            p16.Direction = ParameterDirection.Input
            p16.SqlDbType = SqlDbType.Float
            p16.Value = CDbl(qty)

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)
            cmd.Parameters.Add(p7)
            cmd.Parameters.Add(p8)
            cmd.Parameters.Add(pOptr)
            cmd.Parameters.Add(pEncoded)
            cmd.Parameters.Add(p9)
            cmd.Parameters.Add(p10)
            cmd.Parameters.Add(p11)
            cmd.Parameters.Add(p12)
            cmd.Parameters.Add(p13)
            cmd.Parameters.Add(p14)
            cmd.Parameters.Add(p15)
            cmd.Parameters.Add(p16)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            daBuyer.Dispose()
            dsBuyer.Dispose()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub

    Public Function getMRNCounter() As Long
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand("SELECT id " & _
                " FROM dbo.tblMRN " & _
                " ORDER BY id DESC", c)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim ctr As Long
            If drCode.Read Then
                ctr = drCode.GetInt64(0) + 1
            Else
                ctr = 1
            End If

            drCode.Close()
            c.Close()
            Return ctr
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub updateMRN(ByVal code As String, ByVal materials As String, ByVal manufacturer As String, _
    ByVal supplier As String, ByVal invoice As String, ByVal grn As String, ByVal yr As String, ByVal id As String, _
    ByVal qty As String, ByVal unit As String, ByVal amount As String, _
    ByVal freight As String, ByVal conversion As String, ByVal poNo As String, ByVal invoiceNo As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_update_MRN"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@id"
            p1.SqlDbType = SqlDbType.BigInt
            p1.Direction = ParameterDirection.Input
            p1.Value = CLng(id)

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@mrnNo"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = code

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@mrnFacCode"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = getMRN_ManufacturerCode(manufacturer)

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@mrnSupCode"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = getMRN_SupplierCode(supplier)

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@yr"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.Int
            p5.Value = yr

            Dim p6 As New SqlClient.SqlParameter
            p6.ParameterName = "@matCode"
            p6.Direction = ParameterDirection.Input
            p6.SqlDbType = SqlDbType.VarChar
            p6.Value = getMRN_MaterialsCode(materials)

            Dim p7 As New SqlClient.SqlParameter
            p7.ParameterName = "@invoiceDate"
            p7.Direction = ParameterDirection.Input
            p7.SqlDbType = SqlDbType.DateTime
            p7.Value = Format(CDate(invoice), getTimeFormat())

            Dim p8 As New SqlClient.SqlParameter
            p8.ParameterName = "@grnDate"
            p8.Direction = ParameterDirection.Input
            p8.SqlDbType = SqlDbType.DateTime
            p8.Value = Format(CDate(grn), getTimeFormat())

            Dim pOptr As New SqlClient.SqlParameter
            pOptr.ParameterName = "@optr"
            pOptr.Direction = ParameterDirection.Input
            pOptr.SqlDbType = SqlDbType.VarChar
            pOptr.Value = modModule.getUsername

            Dim pEncoded As New SqlClient.SqlParameter
            pEncoded.ParameterName = "@dateTimeEncoded"
            pEncoded.Direction = ParameterDirection.Input
            pEncoded.SqlDbType = SqlDbType.DateTime
            pEncoded.Value = getServerDateTime()

            Dim p9 As New SqlClient.SqlParameter
            p9.ParameterName = "@qty"
            p9.Direction = ParameterDirection.Input
            p9.SqlDbType = SqlDbType.Float
            p9.Value = CDbl(qty)

            Dim p10 As New SqlClient.SqlParameter
            p10.ParameterName = "@unit"
            p10.Direction = ParameterDirection.Input
            p10.SqlDbType = SqlDbType.VarChar
            p10.Value = unit

            Dim p11 As New SqlClient.SqlParameter
            p11.ParameterName = "@amount"
            p11.Direction = ParameterDirection.Input
            p11.SqlDbType = SqlDbType.Float
            p11.Value = CDbl(amount)

            Dim p12 As New SqlClient.SqlParameter
            p12.ParameterName = "@freight"
            p12.Direction = ParameterDirection.Input
            p12.SqlDbType = SqlDbType.Float
            p12.Value = CDbl(freight)

            Dim p13 As New SqlClient.SqlParameter
            p13.ParameterName = "@conversion"
            p13.Direction = ParameterDirection.Input
            p13.SqlDbType = SqlDbType.Float
            p13.Value = CDbl(conversion)

            Dim p14 As New SqlClient.SqlParameter
            p14.ParameterName = "@poNo"
            p14.Direction = ParameterDirection.Input
            p14.SqlDbType = SqlDbType.VarChar
            p14.Value = poNo

            Dim p15 As New SqlClient.SqlParameter
            p15.ParameterName = "@invoiceNo"
            p15.Direction = ParameterDirection.Input
            p15.SqlDbType = SqlDbType.VarChar
            p15.Value = invoiceNo

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)
            cmd.Parameters.Add(p7)
            cmd.Parameters.Add(p8)
            cmd.Parameters.Add(pOptr)
            cmd.Parameters.Add(pEncoded)
            cmd.Parameters.Add(p9)
            cmd.Parameters.Add(p10)
            cmd.Parameters.Add(p11)
            cmd.Parameters.Add(p12)
            cmd.Parameters.Add(p13)
            cmd.Parameters.Add(p14)
            cmd.Parameters.Add(p15)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Function getAllWarehouse() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand("SELECT DISTINCT whCode AS Code, whName AS Warehouse " & _
                " FROM dbo.tblWarehouse " & _
                " ORDER BY Warehouse", c)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getWarehouse() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand("SELECT DISTINCT whName AS Warehouse " & _
                " FROM dbo.tblWarehouse " & _
                " ORDER BY Warehouse", c)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function validateWarehouse(ByVal warehouse As String) As Boolean
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getExistence_Warehouse"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@whName"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = warehouse

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(paramRecCount)

            Dim da As New SqlClient.SqlDataAdapter
            Dim ds As New DataSet("dbPPICIS")

            da.SelectCommand = cmd
            da.Fill(ds)

            If Val(cmd.Parameters("@recCount").Value) > 0 Then
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return True
            Else
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return False
            End If
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getWarehouseCounter() As Long
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand("SELECT id " & _
                " FROM  dbo.tblWarehouse " & _
                " ORDER BY id DESC", c)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim ctr As Long
            If drCode.Read Then
                ctr = drCode.GetInt64(0) + 1
            Else
                ctr = 1
            End If

            drCode.Close()
            c.Close()
            Return ctr
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub updateWarehouse(ByVal code As String, ByVal warehouse As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_update_Warehouse"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@whCode"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = code

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@whName"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = warehouse

            Dim pOptr As New SqlClient.SqlParameter
            pOptr.ParameterName = "@optr"
            pOptr.Direction = ParameterDirection.Input
            pOptr.SqlDbType = SqlDbType.VarChar
            pOptr.Value = modModule.getUsername

            Dim pEncoded As New SqlClient.SqlParameter
            pEncoded.ParameterName = "@dateTimeEncoded"
            pEncoded.Direction = ParameterDirection.Input
            pEncoded.SqlDbType = SqlDbType.DateTime
            pEncoded.Value = getServerDateTime()

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(pOptr)
            cmd.Parameters.Add(pEncoded)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Function getAllLabels() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_displayAll_Labels"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getLabels() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand("SELECT DISTINCT lblDesc AS Label " & _
               " FROM dbo.tblLabels " & _
               " WHERE active = 'YES' " & _
               " ORDER BY lblDesc ", c)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getFishLotByFV(ByVal fv As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandType = CommandType.StoredProcedure
            cmd.CommandText = "proc_displayAll_FishLots_byFV"
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@fv"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = fv

            cmd.Parameters.Add(p1)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getFWSByInclusiveDates(ByVal dateFrom As String, ByVal dateTo As String, ByVal shift As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandType = CommandType.StoredProcedure
            cmd.CommandText = "proc_printFWS_byProdnDate"
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@dateFrom"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            If dateFrom = "" Then
                p1.Value = getServerDateTime()
            Else
                p1.Value = CDate(dateFrom)
            End If

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@dateTo"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.DateTime
            If dateTo = "" Then
                p2.Value = getServerDateTime()
            Else
                p2.Value = CDate(dateTo)
            End If

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@shift"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = shift

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getFWSByWeekly(ByVal dateFrom As String, ByVal dateTo As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandType = CommandType.StoredProcedure
            cmd.CommandText = "proc_printFWS_byWeekly"
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@dateFrom"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            If dateFrom = "" Then
                p1.Value = getServerDateTime()
            Else
                p1.Value = CDate(dateFrom)
            End If

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@dateTo"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.DateTime
            If dateTo = "" Then
                p2.Value = getServerDateTime()
            Else
                p2.Value = CDate(dateTo)
            End If

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getAllMaterials_ByCategory(ByVal category As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand("SELECT DISTINCT matDesc AS Description" & _
                " FROM dbo.tblMRN_Materials " & _
                " WHERE matCategory = '" & category & "' " & _
                " ORDER BY matDesc", c)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function validateLabel(ByVal label As String) As Boolean
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getExistence_Labels"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@label"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = label

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(paramRecCount)

            Dim da As New SqlClient.SqlDataAdapter
            Dim ds As New DataSet("dbPPICIS")

            da.SelectCommand = cmd
            da.Fill(ds)

            If Val(cmd.Parameters("@recCount").Value) > 0 Then
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return True
            Else
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return False
            End If
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getLabelCounter() As Long
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand("SELECT id " & _
                " FROM dbo.tblLabels " & _
                " ORDER BY id DESC", c)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim ctr As Long
            If drCode.Read Then
                ctr = drCode.GetInt64(0) + 1
            Else
                ctr = 1
            End If

            drCode.Close()
            c.Close()
            Return ctr
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub updateLabel(ByVal code As String, ByVal label As String, ByVal perCase As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_update_Labels"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@lblCode"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = code

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@lblDesc"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = label

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@lblPerCase"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.Float
            p3.Value = CDbl(perCase)

            Dim pOptr As New SqlClient.SqlParameter
            pOptr.ParameterName = "@optr"
            pOptr.Direction = ParameterDirection.Input
            pOptr.SqlDbType = SqlDbType.VarChar
            pOptr.Value = modModule.getUsername

            Dim pEncoded As New SqlClient.SqlParameter
            pEncoded.ParameterName = "@dateTimeEncoded"
            pEncoded.Direction = ParameterDirection.Input
            pEncoded.SqlDbType = SqlDbType.DateTime
            pEncoded.Value = getServerDateTime()

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(pOptr)
            cmd.Parameters.Add(pEncoded)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Function getPallets() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand("SELECT DISTINCT pallet# AS [Pallet No.] " & _
                " FROM dbo.tblLabeling " & _
                " ORDER BY pallet# DESC", c)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getPalletDetails(ByVal pallet As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_display_LabelingDetails4" '"proc_display_LabelingDetails3"   '"proc_display_LabelingDetails2"   'proc_display_LabelingDetails
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@pallet#"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = pallet

            cmd.Parameters.Add(p1)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getProductionDetails(ByVal pCode As String, ByVal subCode As String, ByVal lot As String, _
    ByVal julian As String, ByVal prodnDate As Boolean) As String
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand("SELECT DISTINCT dbo.tblProduction.prodnDate, " & _
                " dbo.tblProduction_Details.bbe " & _
                " FROM dbo.tblProduction INNER JOIN " & _
                " dbo.tblProduction_Details ON dbo.tblProduction.retortCode = dbo.tblProduction_Details.retortCode " & _
                " WHERE (dbo.tblProduction_Details.pCode = '" & pCode & "') AND " & _
                " (dbo.tblProduction_Details.pCode2 = '" & subCode & "') AND " & _
                " (dbo.tblProduction.lot# = '" & lot & "') AND " & _
                " (dbo.tblProduction_Details.prodnJulian = " & CInt(julian) & ")", c)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As String
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    If prodnDate Then
                        returnValue = CStr(Format(drCode.GetDateTime(0), getTimeFormat()))
                    Else
                        returnValue = CStr(Format(drCode.GetDateTime(1), getTimeFormat()))
                    End If
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getLabelPerCase(ByVal label As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand("SELECT lblPerCase " & _
                " FROM dbo.tblLabels " & _
                " WHERE (lblDesc = '" & label & "')", c)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As Double
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetDouble(0)
                Else
                    returnValue = 0
                End If
            Else
                returnValue = 0
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function validatePallet(ByVal pallet As String) As Boolean
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getExistence_Pallet"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@pallet#"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = pallet

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(paramRecCount)

            Dim da As New SqlClient.SqlDataAdapter
            Dim ds As New DataSet("dbPPICIS")

            da.SelectCommand = cmd
            da.Fill(ds)

            If Val(cmd.Parameters("@recCount").Value) > 0 Then
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return True
            Else
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return False
            End If
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub saveNewPallet(ByVal prodnDate As String, ByVal shift As String, ByVal pallet As String, _
   ByVal label As String, ByVal warehouse As String, ByVal cartons As String, ByVal unlabel As String, _
   ByVal buyer As String, ByVal eu As String, ByVal loinGrade As String, _
   ByVal yr As String, ByVal canType As String, ByVal gw As String, ByVal nw As String, _
   ByVal remarks As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_addNew_Pallet2"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@id"
            p1.SqlDbType = SqlDbType.BigInt
            p1.Direction = ParameterDirection.Input
            p1.Value = getPalletCounter()

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@palletCode"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = pallet & getLabelCode(label)

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@pallet#"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = pallet

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@lblCode"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = getLabelCode(label)

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@whCode"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.VarChar
            p5.Value = getWarehouseCode(warehouse)

            Dim p6 As New SqlClient.SqlParameter
            p6.ParameterName = "@lblDate"
            p6.Direction = ParameterDirection.Input
            p6.SqlDbType = SqlDbType.DateTime
            p6.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p7 As New SqlClient.SqlParameter
            p7.ParameterName = "@lblShift"
            p7.Direction = ParameterDirection.Input
            p7.SqlDbType = SqlDbType.VarChar
            p7.Value = shift

            Dim pOptr As New SqlClient.SqlParameter
            pOptr.ParameterName = "@optr"
            pOptr.Direction = ParameterDirection.Input
            pOptr.SqlDbType = SqlDbType.VarChar
            pOptr.Value = modModule.getUsername

            Dim pEncoded As New SqlClient.SqlParameter
            pEncoded.ParameterName = "@dateTimeEncoded"
            pEncoded.Direction = ParameterDirection.Input
            pEncoded.SqlDbType = SqlDbType.DateTime
            pEncoded.Value = getServerDateTime()

            Dim p8 As New SqlClient.SqlParameter
            p8.ParameterName = "@matCode"
            p8.Direction = ParameterDirection.Input
            p8.SqlDbType = SqlDbType.VarChar
            p8.Value = getMRN_MaterialsCode(cartons)

            Dim p9 As New SqlClient.SqlParameter
            p9.ParameterName = "@unlabel"
            p9.Direction = ParameterDirection.Input
            p9.SqlDbType = SqlDbType.VarChar
            p9.Value = unlabel

            Dim p10 As New SqlClient.SqlParameter
            p10.ParameterName = "@buyerCode"
            p10.Direction = ParameterDirection.Input
            p10.SqlDbType = SqlDbType.VarChar
            p10.Value = getBuyerCode(buyer)

            Dim p11 As New SqlClient.SqlParameter
            p11.ParameterName = "@euNumber"
            p11.Direction = ParameterDirection.Input
            p11.SqlDbType = SqlDbType.VarChar
            p11.Value = eu

            Dim p12 As New SqlClient.SqlParameter
            p12.ParameterName = "@loinGrade"
            p12.Direction = ParameterDirection.Input
            p12.SqlDbType = SqlDbType.VarChar
            p12.Value = loinGrade

            Dim p13 As New SqlClient.SqlParameter
            p13.ParameterName = "@yr"
            p13.Direction = ParameterDirection.Input
            p13.SqlDbType = SqlDbType.Int
            p13.Value = CInt(yr)

            Dim p14 As New SqlClient.SqlParameter
            p14.ParameterName = "@canType"
            p14.Direction = ParameterDirection.Input
            p14.SqlDbType = SqlDbType.VarChar
            p14.Value = canType

            Dim p15 As New SqlClient.SqlParameter
            p15.ParameterName = "@gw"
            p15.Direction = ParameterDirection.Input
            p15.SqlDbType = SqlDbType.Float
            p15.Value = CDbl(gw)

            Dim p16 As New SqlClient.SqlParameter
            p16.ParameterName = "@nw"
            p16.Direction = ParameterDirection.Input
            p16.SqlDbType = SqlDbType.Float
            p16.Value = CDbl(nw)

            Dim p17 As New SqlClient.SqlParameter
            p17.ParameterName = "@remarks"
            p17.Direction = ParameterDirection.Input
            p17.SqlDbType = SqlDbType.VarChar
            p17.Value = remarks

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)
            cmd.Parameters.Add(p7)
            cmd.Parameters.Add(pOptr)
            cmd.Parameters.Add(pEncoded)
            cmd.Parameters.Add(p8)
            cmd.Parameters.Add(p9)
            cmd.Parameters.Add(p10)
            cmd.Parameters.Add(p11)
            cmd.Parameters.Add(p12)
            cmd.Parameters.Add(p13)
            cmd.Parameters.Add(p14)
            cmd.Parameters.Add(p15)
            cmd.Parameters.Add(p16)
            cmd.Parameters.Add(p17)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            daBuyer.Dispose()
            dsBuyer.Dispose()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub

    Public Function getLabelCode(ByVal label As String) As String
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand("SELECT lblCode " & _
                " FROM dbo.tblLabels " & _
                " WHERE (lblDesc = '" & label & "')", c)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As String
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetString(0)
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getWarehouseCode(ByVal warehouse As String) As String
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand("SELECT whCode " & _
                " FROM dbo.tblWarehouse " & _
                " WHERE (whName = '" & warehouse & "')", c)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As String
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetString(0)
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getPalletCounter() As Long
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand("SELECT id " & _
                " FROM   dbo.tblLabeling " & _
                " ORDER BY id DESC", c)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim ctr As Long
            If drCode.Read Then
                ctr = drCode.GetInt64(0) + 1
            Else
                ctr = 1
            End If

            drCode.Close()
            c.Close()
            Return ctr
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub saveNewPallet_Details(ByVal pallet As String, ByVal prodnDate As String, ByVal shift As String, _
    ByVal lot As String, ByVal pCode As String, ByVal cases As String, ByVal tins As String, ByVal mrnCarton As String, _
    ByVal mrnLabel As String, ByVal label As String, ByVal julian As String, ByVal pCode2 As String, _
    ByVal gw As String, ByVal nw As String, ByVal cycle As String, ByVal remarks As String, _
    ByVal tagNo As String, ByVal sublot As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_addNew_Pallet_Details"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@palletCode"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = getPalletCode(pallet)

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@retortCode"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = getRetortCode(prodnDate, shift, lot, getLotSublotCode(lot, sublot)) 'getRetortCodeByJulian(Format(CDate(prodnDate), "dd/MM/yyyy"), shift, lot, julian)

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@pCode"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = pCode.ToUpper

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@cases"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.Float
            p4.Value = CDbl(cases)

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@tins"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.Float
            p5.Value = CDbl(tins)

            Dim p6 As New SqlClient.SqlParameter
            p6.ParameterName = "@total"
            p6.Direction = ParameterDirection.Input
            p6.SqlDbType = SqlDbType.Float
            p6.Value = (cases * getLabelPerCase(label)) + tins

            Dim p7 As New SqlClient.SqlParameter
            p7.ParameterName = "@mrnNoCarton"
            p7.Direction = ParameterDirection.Input
            p7.SqlDbType = SqlDbType.VarChar
            p7.Value = mrnCarton

            Dim p8 As New SqlClient.SqlParameter
            p8.ParameterName = "@mrnNoLabel"
            p8.Direction = ParameterDirection.Input
            p8.SqlDbType = SqlDbType.VarChar
            p8.Value = mrnLabel

            Dim p9 As New SqlClient.SqlParameter
            p9.ParameterName = "@pCode2"
            p9.Direction = ParameterDirection.Input
            p9.SqlDbType = SqlDbType.VarChar
            p9.Value = pCode2.ToUpper

            Dim p10 As New SqlClient.SqlParameter
            p10.ParameterName = "@grossWeight"
            p10.Direction = ParameterDirection.Input
            p10.SqlDbType = SqlDbType.Float
            p10.Value = CDbl(gw)

            Dim p11 As New SqlClient.SqlParameter
            p11.ParameterName = "@netWeight"
            p11.Direction = ParameterDirection.Input
            p11.SqlDbType = SqlDbType.Float
            p11.Value = CDbl(nw)

            Dim p12 As New SqlClient.SqlParameter
            p12.ParameterName = "@cycle"
            p12.Direction = ParameterDirection.Input
            p12.SqlDbType = SqlDbType.VarChar
            p12.Value = cycle.ToUpper

            Dim p13 As New SqlClient.SqlParameter
            p13.ParameterName = "@remarks"
            p13.Direction = ParameterDirection.Input
            p13.SqlDbType = SqlDbType.VarChar
            p13.Value = remarks

            Dim p14 As New SqlClient.SqlParameter
            p14.ParameterName = "@tagNo"
            p14.Direction = ParameterDirection.Input
            p14.SqlDbType = SqlDbType.VarChar
            p14.Value = tagNo

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)
            cmd.Parameters.Add(p7)
            cmd.Parameters.Add(p8)
            cmd.Parameters.Add(p9)
            cmd.Parameters.Add(p10)
            cmd.Parameters.Add(p11)
            cmd.Parameters.Add(p12)
            cmd.Parameters.Add(p13)
            cmd.Parameters.Add(p14)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            daBuyer.Dispose()
            dsBuyer.Dispose()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub

    Public Function getPalletCode(ByVal pallet As String) As String
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand("SELECT palletCode " & _
                " FROM dbo.tblLabeling " & _
                " WHERE (pallet# = '" & pallet & "')", c)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As String
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetString(0)
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getProductionCode(ByVal prodnDate As String, ByVal shift As String, _
    ByVal lot As String, ByVal julian As String) As String
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getProductionCode2"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            If prodnDate = "" Then
                p1.Value = "1/1/1901"
            Else
                p1.Value = Format(CDate(prodnDate), getTimeFormat())
            End If

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@julian"
            p2.SqlDbType = SqlDbType.Int
            p2.Direction = ParameterDirection.Input
            p2.Value = CInt(julian)

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@lot"
            p3.SqlDbType = SqlDbType.VarChar
            p3.Direction = ParameterDirection.Input
            p3.Value = lot

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As String
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetString(0)
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub updatePallet(ByVal prodnDate As String, ByVal shift As String, ByVal pallet As String, _
     ByVal label As String, ByVal warehouse As String, ByVal cartons As String, ByVal unlabel As String, _
     ByVal buyer As String, ByVal eu As String, ByVal loinGrade As String, ByVal gw As String, ByVal nw As String, ByVal remarks As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_update_Pallet2"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@palletCode"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = getPalletCode(pallet)

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@pallet#"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = pallet

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@lblCode"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = getLabelCode(label)

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@whCode"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.VarChar
            p5.Value = getWarehouseCode(warehouse)

            Dim p6 As New SqlClient.SqlParameter
            p6.ParameterName = "@lblDate"
            p6.Direction = ParameterDirection.Input
            p6.SqlDbType = SqlDbType.DateTime
            p6.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p7 As New SqlClient.SqlParameter
            p7.ParameterName = "@lblShift"
            p7.Direction = ParameterDirection.Input
            p7.SqlDbType = SqlDbType.VarChar
            p7.Value = shift

            Dim pOptr As New SqlClient.SqlParameter
            pOptr.ParameterName = "@optr"
            pOptr.Direction = ParameterDirection.Input
            pOptr.SqlDbType = SqlDbType.VarChar
            pOptr.Value = modModule.getUsername

            Dim pEncoded As New SqlClient.SqlParameter
            pEncoded.ParameterName = "@dateTimeEncoded"
            pEncoded.Direction = ParameterDirection.Input
            pEncoded.SqlDbType = SqlDbType.DateTime
            pEncoded.Value = getServerDateTime()

            Dim p8 As New SqlClient.SqlParameter
            p8.ParameterName = "@matCode"
            p8.Direction = ParameterDirection.Input
            p8.SqlDbType = SqlDbType.VarChar
            p8.Value = getMRN_MaterialsCode(cartons)

            Dim p9 As New SqlClient.SqlParameter
            p9.ParameterName = "@unlabel"
            p9.Direction = ParameterDirection.Input
            p9.SqlDbType = SqlDbType.VarChar
            p9.Value = unlabel

            Dim p10 As New SqlClient.SqlParameter
            p10.ParameterName = "@buyerCode"
            p10.Direction = ParameterDirection.Input
            p10.SqlDbType = SqlDbType.VarChar
            p10.Value = getBuyerCode(buyer)

            Dim p11 As New SqlClient.SqlParameter
            p11.ParameterName = "@euNumber"
            p11.Direction = ParameterDirection.Input
            p11.SqlDbType = SqlDbType.VarChar
            p11.Value = eu

            Dim p12 As New SqlClient.SqlParameter
            p12.ParameterName = "@loinGrade"
            p12.Direction = ParameterDirection.Input
            p12.SqlDbType = SqlDbType.VarChar
            p12.Value = loinGrade

            Dim p13 As New SqlClient.SqlParameter
            p13.ParameterName = "@gw"
            p13.Direction = ParameterDirection.Input
            p13.SqlDbType = SqlDbType.Float
            p13.Value = CDbl(gw)

            Dim p14 As New SqlClient.SqlParameter
            p14.ParameterName = "@nw"
            p14.Direction = ParameterDirection.Input
            p14.SqlDbType = SqlDbType.Float
            p14.Value = CDbl(nw)

            Dim p15 As New SqlClient.SqlParameter
            p15.ParameterName = "@remarks"
            p15.Direction = ParameterDirection.Input
            p15.SqlDbType = SqlDbType.VarChar
            p15.Value = remarks

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)
            cmd.Parameters.Add(p7)
            cmd.Parameters.Add(pOptr)
            cmd.Parameters.Add(pEncoded)
            cmd.Parameters.Add(p8)
            cmd.Parameters.Add(p9)
            cmd.Parameters.Add(p10)
            cmd.Parameters.Add(p11)
            cmd.Parameters.Add(p12)
            cmd.Parameters.Add(p13)
            cmd.Parameters.Add(p14)
            cmd.Parameters.Add(p15)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Sub deletePalletDetails(ByVal pallet As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_delete_PalletDetails"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@palletCode"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = getPalletCode(pallet)

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Function getAllCanSize(ByVal category As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_displayAll_CanSize_Category"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@category"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = category

            cmd.Parameters.Add(p1)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getAllLS() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand("SELECT DISTINCT lsCode AS Code, lsDesc AS [Loin Size] " & _
                " FROM dbo.tblProduct_LoinSize " & _
                " ORDER BY lsDesc", c)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getProductLSCode() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand("SELECT DISTINCT lsCode AS Code " & _
                " FROM dbo.tblProduct_LoinSize " & _
                " ORDER BY lsCode", c)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getProductLSDescription() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand("SELECT DISTINCT lsDesc AS [Loin Size] " & _
                " FROM dbo.tblProduct_LoinSize " & _
                " ORDER BY lsDesc", c)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function validateLS(ByVal code As String, ByVal desc As String) As Boolean
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getExistence_LoinSize"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@lsCode"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = code

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@lsDesc"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = desc

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(paramRecCount)

            Dim da As New SqlClient.SqlDataAdapter
            Dim ds As New DataSet("dbPPICIS")

            da.SelectCommand = cmd
            da.Fill(ds)

            If Val(cmd.Parameters("@recCount").Value) > 0 Then
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return True
            Else
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return False
            End If
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub saveNewLS(ByVal code As String, ByVal desc As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_addNew_LoinSize"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@id"
            p1.SqlDbType = SqlDbType.BigInt
            p1.Direction = ParameterDirection.Input
            p1.Value = getLSCounter()

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@lsCode"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = code

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@lsDesc"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = desc

            Dim pOptr As New SqlClient.SqlParameter
            pOptr.ParameterName = "@optr"
            pOptr.Direction = ParameterDirection.Input
            pOptr.SqlDbType = SqlDbType.VarChar
            pOptr.Value = modModule.getUsername

            Dim pEncoded As New SqlClient.SqlParameter
            pEncoded.ParameterName = "@dateTimeEncoded"
            pEncoded.Direction = ParameterDirection.Input
            pEncoded.SqlDbType = SqlDbType.DateTime
            pEncoded.Value = getServerDateTime()

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(pOptr)
            cmd.Parameters.Add(pEncoded)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            daBuyer.Dispose()
            dsBuyer.Dispose()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub

    Public Function getLSCounter() As Long
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand("SELECT id " & _
                " FROM dbo.tblProduct_LoinSize " & _
                " ORDER BY id DESC", c)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim ctr As Long
            If drCode.Read Then
                ctr = drCode.GetInt64(0) + 1
            Else
                ctr = 1
            End If

            drCode.Close()
            c.Close()
            Return ctr
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub updateLS(ByVal code As String, ByVal desc As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_update_LoinSize"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@lsCode"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = code

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@lsDesc"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = desc

            Dim pOptr As New SqlClient.SqlParameter
            pOptr.ParameterName = "@optr"
            pOptr.Direction = ParameterDirection.Input
            pOptr.SqlDbType = SqlDbType.VarChar
            pOptr.Value = modModule.getUsername

            Dim pEncoded As New SqlClient.SqlParameter
            pEncoded.ParameterName = "@dateTimeEncoded"
            pEncoded.Direction = ParameterDirection.Input
            pEncoded.SqlDbType = SqlDbType.DateTime
            pEncoded.Value = getServerDateTime()

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(pOptr)
            cmd.Parameters.Add(pEncoded)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Function getProductLSCode(ByVal ls As String) As String
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getProductLoinSizeCode"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@lsDesc"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = ls

            cmd.Parameters.Add(p1)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As String
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetString(0)
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub updateProduction_Details(ByVal prodnDate As String, ByVal shift As String, _
    ByVal lot As String, ByVal pCode As String, ByVal units As String, ByVal mrnCan As String, _
    ByVal mrnEnd As String, ByVal mrnSoyOil As String, ByVal mrnBlenVegOil As String, ByVal mrnCurOil As String, _
    ByVal mrnChili As String, ByVal mrnChiliFruitDr As String, ByVal mrnSalt As String, _
    ByVal mrnChiiFruitFr As String, ByVal mrnBag As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_update_ProductionDetails"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@retortCode"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = getProductionCode(Format(CDate(prodnDate), getTimeFormat()), shift, lot)

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@pCode"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = pCode

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@units"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.Float
            p3.Value = CDbl(units)

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@mrnCan"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = mrnCan

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@mrnEnd"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.VarChar
            p5.Value = mrnEnd

            Dim p6 As New SqlClient.SqlParameter
            p6.ParameterName = "@mrnSoyOil"
            p6.Direction = ParameterDirection.Input
            p6.SqlDbType = SqlDbType.VarChar
            p6.Value = mrnSoyOil

            Dim p7 As New SqlClient.SqlParameter
            p7.ParameterName = "@mrnBlenVegOil"
            p7.Direction = ParameterDirection.Input
            p7.SqlDbType = SqlDbType.VarChar
            p7.Value = mrnBlenVegOil

            Dim p8 As New SqlClient.SqlParameter
            p8.ParameterName = "@mrnCurOil"
            p8.Direction = ParameterDirection.Input
            p8.SqlDbType = SqlDbType.VarChar
            p8.Value = mrnCurOil

            Dim p9 As New SqlClient.SqlParameter
            p9.ParameterName = "@mrnChili"
            p9.Direction = ParameterDirection.Input
            p9.SqlDbType = SqlDbType.VarChar
            p9.Value = mrnChili

            Dim p10 As New SqlClient.SqlParameter
            p10.ParameterName = "@mrnChiliFruitDr"
            p10.Direction = ParameterDirection.Input
            p10.SqlDbType = SqlDbType.VarChar
            p10.Value = mrnChiliFruitDr

            Dim p11 As New SqlClient.SqlParameter
            p11.ParameterName = "@mrnSalt"
            p11.Direction = ParameterDirection.Input
            p11.SqlDbType = SqlDbType.VarChar
            p11.Value = mrnSalt

            Dim p12 As New SqlClient.SqlParameter
            p12.ParameterName = "@mrnChiiFruitFr"
            p12.Direction = ParameterDirection.Input
            p12.SqlDbType = SqlDbType.VarChar
            p12.Value = mrnChiiFruitFr

            Dim p13 As New SqlClient.SqlParameter
            p13.ParameterName = "@mrnBag"
            p13.Direction = ParameterDirection.Input
            p13.SqlDbType = SqlDbType.VarChar
            p13.Value = mrnBag

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)
            cmd.Parameters.Add(p7)
            cmd.Parameters.Add(p8)
            cmd.Parameters.Add(p9)
            cmd.Parameters.Add(p10)
            cmd.Parameters.Add(p11)
            cmd.Parameters.Add(p12)
            cmd.Parameters.Add(p13)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Sub deleteProductCode(ByVal pCode As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_delete_ProductCode"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@pCode"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = pCode

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Function getProductCode_Type(ByVal product As String) As String
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getProductCode_Type"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@pCode"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = product

            cmd.Parameters.Add(p1)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As String
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetString(0)
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getVessel_Container() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand("SELECT DISTINCT voyageName AS [Vessel Name] " & _
                " FROM dbo.tblFGWithdrawal " & _
                " ORDER BY voyageName", c)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getPallet_PackType(ByVal packType As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getPallet_PackType"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@packType"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = packType

            cmd.Parameters.Add(p1)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getPalletQty(ByVal pallet As String, ByVal pCode As String, _
    ByVal prodnDate As String, ByVal cycle As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getPalletQty"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@pallet"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = getPalletCode(pallet)

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@pCode"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = pCode

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@prodnDate"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.DateTime
            p3.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@cycle"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = cycle

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)

            Dim dr As SqlClient.SqlDataReader
            dr = cmd.ExecuteReader

            Dim returnValue As Double
            If dr.Read Then
                If Not dr(0) Is DBNull.Value Then
                    returnValue = dr.GetDouble(0)
                Else
                    returnValue = 0
                End If
            Else
                returnValue = 0
            End If

            dr.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getFGWithdrawalCounter() As Long
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand("SELECT id " & _
                " FROM dbo.tblFGWithdrawal " & _
                " ORDER BY id DESC", c)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim ctr As Long
            If drCode.Read Then
                ctr = drCode.GetInt64(0) + 1
            Else
                ctr = 1
            End If

            drCode.Close()
            c.Close()
            Return ctr
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub saveNewFGWithdrawalDetails(ByVal loadingCode As String, ByVal pallet As String, ByVal pCode As String, _
   ByVal qty As String, ByVal startLoading As String, ByVal lot As String, ByVal prodnDate As String, _
   ByVal cycle As String, ByVal endLoading As String, ByVal pCode2 As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_addNew_FGWithdrawal_Details"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@loadingCode"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = loadingCode

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@palletCode"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = getPalletCode(pallet)

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@pCode"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = pCode

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@qty"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.Float
            p4.Value = CDbl(qty)

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@loadingDate"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.DateTime
            If startLoading = "" Then
                p5.Value = DBNull.Value
            Else
                p5.Value = startLoading
            End If

            Dim p6 As New SqlClient.SqlParameter
            p6.ParameterName = "@lot#"
            p6.Direction = ParameterDirection.Input
            p6.SqlDbType = SqlDbType.VarChar
            p6.Value = lot

            Dim p7 As New SqlClient.SqlParameter
            p7.ParameterName = "@prodnDate"
            p7.Direction = ParameterDirection.Input
            p7.SqlDbType = SqlDbType.DateTime
            p7.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p8 As New SqlClient.SqlParameter
            p8.ParameterName = "@cycle"
            p8.Direction = ParameterDirection.Input
            p8.SqlDbType = SqlDbType.VarChar
            p8.Value = cycle

            Dim p9 As New SqlClient.SqlParameter
            p9.ParameterName = "@endLoading"
            p9.Direction = ParameterDirection.Input
            p9.SqlDbType = SqlDbType.DateTime
            If startLoading = "" Then
                p9.Value = DBNull.Value
            Else
                p9.Value = endLoading
            End If

            Dim p10 As New SqlClient.SqlParameter
            p10.ParameterName = "@pCode2"
            p10.Direction = ParameterDirection.Input
            p10.SqlDbType = SqlDbType.VarChar
            p10.Value = pCode2

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)
            cmd.Parameters.Add(p7)
            cmd.Parameters.Add(p8)
            cmd.Parameters.Add(p9)
            cmd.Parameters.Add(p10)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            daBuyer.Dispose()
            dsBuyer.Dispose()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub

    Public Function getFGWithdrawn_Details() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_displayFGWithdrawalDetails"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub updateFGWithdrawn(ByVal code As String, ByVal loadingType As String, ByVal cont As String, ByVal voyageName As String, _
    ByVal purposeType As String, ByVal purpose As String, ByVal seal As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_update_FGWithdrawal"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@loadingCode"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = code

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@loadingType"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = loadingType

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@cont#"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = cont.ToUpper

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@voyageName"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.VarChar
            p5.Value = voyageName

            Dim p6 As New SqlClient.SqlParameter
            p6.ParameterName = "@purposeType"
            p6.Direction = ParameterDirection.Input
            p6.SqlDbType = SqlDbType.VarChar
            p6.Value = purposeType

            Dim p7 As New SqlClient.SqlParameter
            p7.ParameterName = "@purpose"
            p7.Direction = ParameterDirection.Input
            p7.SqlDbType = SqlDbType.VarChar
            If purposeType.StartsWith("Transfer") Then
                p7.Value = getWarehouseCode(purpose)
            Else
                p7.Value = purpose
            End If

            Dim pOptr As New SqlClient.SqlParameter
            pOptr.ParameterName = "@optr"
            pOptr.Direction = ParameterDirection.Input
            pOptr.SqlDbType = SqlDbType.VarChar
            pOptr.Value = modModule.getUsername

            Dim pEncoded As New SqlClient.SqlParameter
            pEncoded.ParameterName = "@dateTimeEncoded"
            pEncoded.Direction = ParameterDirection.Input
            pEncoded.SqlDbType = SqlDbType.DateTime
            pEncoded.Value = getServerDateTime()

            Dim p8 As New SqlClient.SqlParameter
            p8.ParameterName = "@seal#"
            p8.Direction = ParameterDirection.Input
            p8.SqlDbType = SqlDbType.VarChar
            p8.Value = seal.ToUpper

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)
            cmd.Parameters.Add(p7)
            cmd.Parameters.Add(pOptr)
            cmd.Parameters.Add(pEncoded)
            cmd.Parameters.Add(p8)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Sub deleteFGWithdrawnDetails(ByVal loadingCode As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_delete_FGWithdrawalDetails"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@loadingCode"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = loadingCode

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    'Public Function getReport_totalInventory(ByVal cs As String) As DataSet
    '    Try
    '        Dim c As New SqlClient.SqlConnection()
    '        c.ConnectionString = modModule.getConnectionString
    '        c.Open()

    '        Dim qry As String
    '        If cs = "%" Then
    '            qry = "proc_report_inventoryReport_Total"
    '        Else
    '            qry = "proc_report_inventoryReport"
    '        End If

    '        Dim cmd As New SqlClient.SqlCommand()
    '        cmd.CommandText = qry
    '        cmd.CommandType = CommandType.StoredProcedure
    '        cmd.Connection = c

    '        Dim p1 As New SqlClient.SqlParameter()
    '        p1.ParameterName = "@cs"
    '        p1.Direction = ParameterDirection.Input
    '        p1.SqlDbType = SqlDbType.VarChar
    '        p1.Value = cs

    '        Dim p2 As New SqlClient.SqlParameter()
    '        p2.ParameterName = "@heading"
    '        p2.Direction = ParameterDirection.Input
    '        p2.SqlDbType = SqlDbType.VarChar
    '        If cs = "%" Then
    '            p2.Value = "TOTAL INVENTORY REPORT"
    '        Else
    '            p2.Value = "TOTAL INVENTORY REPORT BY ROOM"
    '        End If

    '        cmd.Parameters.Add(p1)
    '        cmd.Parameters.Add(p2)

    '        Dim da As New SqlClient.SqlDataAdapter()
    '        da.SelectCommand = cmd

    '        Dim ds As New DataSet("dbPPICIS")
    '        da.Fill(ds)

    '        Dim d As DataSet = ds

    '        da.Dispose()
    '        ds.Dispose()
    '        c.Close()

    '        Return d
    '    Catch e As Exception
    '        MsgBox(e.Message)
    '    Finally
    '    End Try
    'End Function

    Public Function getReport_totalInventory(ByVal dateFrom As String, ByVal dateTo As String, _
    ByVal header As String, ByVal al As Integer) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_report_inventoryReport_Total"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@dateFrom"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            If dateFrom = "" Then
                p1.Value = getServerDateTime() 'Format(getServerDateTime(), getTimeFormat())
            Else
                p1.Value = CDate(dateFrom) 'Format(CDate(dateFrom), getTimeFormat())
            End If

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@dateTo"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.DateTime
            If dateTo = "" Then
                p2.Value = getServerDateTime()  'Format(getServerDateTime(), getTimeFormat())
            Else
                p2.Value = dateTo   'Format(CDate(dateTo), getTimeFormat())
            End If

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@dateUnloaded"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.DateTime
            p3.Value = getServerDateTime()  'Format(getServerDateTime(), getTimeFormat())

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@dueDate"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.DateTime
            p4.Value = getServerDateTime()

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@header"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.VarChar
            p5.Value = header

            Dim p6 As New SqlClient.SqlParameter
            p6.ParameterName = "@al"
            p6.Direction = ParameterDirection.Input
            p6.SqlDbType = SqlDbType.Int
            p6.Value = al

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getReport_totalInventory_tableView(ByVal dateFrom As String, ByVal dateTo As String, ByVal albacore As Integer) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_report_inventoryReport_Total_tableView"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@dateFrom"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            If dateFrom = "" Then
                p1.Value = getServerDateTime() 'Format(getServerDateTime(), getTimeFormat())
            Else
                p1.Value = CDate(dateFrom) 'Format(CDate(dateFrom), getTimeFormat())
            End If

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@dateTo"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.DateTime
            If dateTo = "" Then
                p2.Value = getServerDateTime()  'Format(getServerDateTime(), getTimeFormat())
            Else
                p2.Value = CDate(dateTo)  'Format(CDate(dateTo), getTimeFormat())
            End If

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@dateUnloaded"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.DateTime
            p3.Value = getServerDateTime()  'Format(getServerDateTime(), getTimeFormat())

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@albacore"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.Int
            p4.Value = albacore

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@days"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.Int
            p5.Value = 0

            Dim p6 As New SqlClient.SqlParameter
            p6.ParameterName = "@dueDate"
            p6.Direction = ParameterDirection.Input
            p6.SqlDbType = SqlDbType.DateTime
            p6.Value = DBNull.Value

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getReport_fwrDaily(ByVal dateFrom As String, ByVal dateTo As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_report_FWR_Daily"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@dateFrom"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            If dateFrom = "" Then
                p1.Value = Format(getServerDateTime(), getTimeFormat())
            Else
                p1.Value = Format(CDate(dateFrom), getTimeFormat())
            End If

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@dateTo"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.DateTime
            If dateTo = "" Then
                p2.Value = Format(getServerDateTime(), getTimeFormat())
            Else
                p2.Value = Format(CDate(dateTo), getTimeFormat())
            End If

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getReport_fwrLot(ByVal dateFrom As String, ByVal dateTo As String, _
    ByVal shift As String, ByVal category As String, ByVal header As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_report_FWR_Lot"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@dateFrom"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            If dateFrom = "" Then
                p1.Value = Format(getServerDateTime(), getTimeFormat())
            Else
                p1.Value = Format(CDate(dateFrom), getTimeFormat())
            End If

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@dateTo"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.DateTime
            If dateTo = "" Then
                p2.Value = Format(getServerDateTime(), getTimeFormat())
            Else
                p2.Value = Format(CDate(dateTo), getTimeFormat())
            End If

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@shift"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = shift

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@category"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = category

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@header"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.VarChar
            p5.Value = header

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getReport_fwrSpecie(ByVal dateFrom As String, ByVal dateTo As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_report_FWR_Specie"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@dateFrom"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            If dateFrom = "" Then
                p1.Value = Format(getServerDateTime(), getTimeFormat())
            Else
                p1.Value = Format(CDate(dateFrom), getTimeFormat())
            End If

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@dateTo"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.DateTime
            If dateTo = "" Then
                p2.Value = Format(getServerDateTime(), getTimeFormat())
            Else
                p2.Value = Format(CDate(dateTo), getTimeFormat())
            End If

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getReport_lotMovement(ByVal lot As String, ByVal bal As Double, ByVal ton As Double) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_report_lotMovement"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@lot"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = lot

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@totalBal"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.Float
            p2.Value = bal

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@totalTon"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.Float
            p3.Value = ton

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getReport_lotMovementSummary(ByVal lot As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_report_lotMovement_balance"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@lot"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = lot

            cmd.Parameters.Add(p1)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function
    '********************************************************************************
    Public Function getForReport_LotWithdrawn(ByVal lot As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_display_Lists_ForReport_LotWithdrawn"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@lot"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = lot

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@totalReceived"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.Float
            p2.Value = 0

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getQCSampleDetails(ByVal prodnDate As String, ByVal shift As String, ByVal lot As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            'Dim cmd As New SqlClient.SqlCommand("SELECT DISTINCT prodnDate AS [Prod'n Date], " & _
            '    " prodnShift AS Shift, lot# AS [Lot No.], qty AS Qty " & _
            '    " FROM dbo.tblQC_Sample " & _
            '    " WHERE prodnDate = '" & Format(CDate(prodnDate), getTimeFormat()) & "' AND " & _
            '    " prodnShift = '" & shift & "' AND lot# = '" & lot & "' " & _
            '    " ORDER BY [Prod'n Date] DESC, Shift, [Lot No.]", c)
            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getQCSampleDetails"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            p1.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@shift"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = shift

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@lot"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = lot

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function validateQCSample(ByVal prodnDate As String, ByVal shift As String, ByVal lot As String) As Boolean
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand("SELECT * " & _
                " FROM dbo.tblQC_Sample " & _
                " WHERE prodnDate = '" & Format(CDate(prodnDate), getTimeFormat()) & "' AND " & _
                " prodnShift = '" & shift & "' AND lot# = '" & lot & "'", c)

            Dim dr As SqlClient.SqlDataReader
            dr = cmd.ExecuteReader

            Dim recordFound As Boolean
            If dr.Read Then
                If Not dr(0) Is DBNull.Value Then
                    recordFound = True
                Else
                    recordFound = False
                End If
            Else
                recordFound = False
            End If

            dr.Close()
            c.Close()

            Return recordFound
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getQCSampleCounter() As Long
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand("SELECT TOP 1 PERCENT id FROM tblQC_Sample ORDER BY id DESC", c)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim ctr As Long
            If drCode.Read Then
                ctr = drCode.GetInt64(0) + 1
            Else
                ctr = 1
            End If

            drCode.Close()
            c.Close()
            Return ctr
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub updateQCSample(ByVal code As String, ByVal prodnDate As String, _
    ByVal shift As String, ByVal lot As String, ByVal qty As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_update_QCSample"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@qcsCode"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = code

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@prodnDate"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.DateTime
            p3.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@prodnShift"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = shift

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@lot#"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.VarChar
            p5.Value = lot

            Dim p6 As New SqlClient.SqlParameter
            p6.ParameterName = "@qty"
            p6.Direction = ParameterDirection.Input
            p6.SqlDbType = SqlDbType.Float
            p6.Value = qty

            Dim pOptr As New SqlClient.SqlParameter
            pOptr.ParameterName = "@optr"
            pOptr.Direction = ParameterDirection.Input
            pOptr.SqlDbType = SqlDbType.VarChar
            pOptr.Value = modModule.getUsername

            Dim pEncoded As New SqlClient.SqlParameter
            pEncoded.ParameterName = "@dateTimeEncoded"
            pEncoded.Direction = ParameterDirection.Input
            pEncoded.SqlDbType = SqlDbType.DateTime
            pEncoded.Value = getServerDateTime()

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)
            cmd.Parameters.Add(pOptr)
            cmd.Parameters.Add(pEncoded)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Function getQCSampleCode(ByVal prodnDate As String, ByVal shift As String, ByVal lot As String) As String
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            If prodnDate = "" Then prodnDate = Format(getServerDateTime(), getTimeFormat())

            Dim cmd As New SqlClient.SqlCommand("SELECT DISTINCT qcsCode " & _
                " FROM dbo.tblQC_Sample " & _
                " WHERE prodnDate = " & Format(CDate(prodnDate), getTimeFormat()) & " AND " & _
                " prodnShift = '" & shift & "' AND lot# = '" & lot & "'", c)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim code As String
            If drCode.Read Then
                code = drCode.GetString(0)
            Else
                code = ""
            End If

            drCode.Close()
            c.Close()
            Return code
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getQCSampleDetails() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand("SELECT DISTINCT prodnDate AS [Prod'n Date], " & _
                " prodnShift AS Shift, lot# AS [Lot No.], qty AS Qty " & _
                " FROM dbo.tblQC_Sample " & _
                " ORDER BY [Prod'n Date] DESC, Shift, [Lot No.]", c)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getFishingVessel(ByVal dateFrom As String, ByVal dateTo As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            If dateFrom = "" Or dateFrom Is DBNull.Value Then dateFrom = Format(getServerDateTime, getTimeFormat())
            If dateTo = "" Or dateTo Is DBNull.Value Then dateTo = Format(getServerDateTime, getTimeFormat())

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getVesselByDateDeposited"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@dateFrom"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            p1.Value = dateFrom

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@dateTo"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.DateTime
            p2.Value = dateTo

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getCOSAmountPerSpecieAndSize(ByVal lot As String, ByVal sublot As String, _
    ByVal specie As String, ByVal size As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getCOSAmountPerSpecieAndSize"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@lot"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = lot

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@sublot"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = sublot

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@specie"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = specie

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@size"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = size

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)

            Dim dr As SqlClient.SqlDataReader
            dr = cmd.ExecuteReader

            Dim amount As Double
            If dr.Read Then
                If Not dr(0) Is DBNull.Value Then
                    amount = dr.GetDouble(0)
                Else
                    amount = 0
                End If
            Else
                amount = 0
            End If

            dr.Close()
            c.Close()

            Return amount
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub saveNewTmpFishDepositSummary(ByVal dateFrom As String, ByVal dateTo As String, _
    ByVal fv As String, ByVal lot As String, ByVal sublot As String, _
    ByVal specie As String, ByVal size As String, ByVal totalWeight As String, _
    ByVal minSize As String, ByVal price As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_addNew_tmp_FishDepositSummary"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@fv"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = fv

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@lot"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = lot

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@sublot"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = sublot

            'Dim p4 As New SqlClient.SqlParameter
            'p4.ParameterName = "@dateTransfer"
            'p4.Direction = ParameterDirection.Input
            'p4.SqlDbType = SqlDbType.DateTime
            'p4.Value = Format(CDate(dateTransfer), getTimeFormat())

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@specie"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.VarChar
            p5.Value = specie

            Dim p6 As New SqlClient.SqlParameter
            p6.ParameterName = "@size"
            p6.Direction = ParameterDirection.Input
            p6.SqlDbType = SqlDbType.VarChar
            p6.Value = size

            Dim p7 As New SqlClient.SqlParameter
            p7.ParameterName = "@totalWeight"
            p7.Direction = ParameterDirection.Input
            p7.SqlDbType = SqlDbType.Float
            p7.Value = CDbl(totalWeight)

            Dim p8 As New SqlClient.SqlParameter
            p8.ParameterName = "@minSize"
            p8.Direction = ParameterDirection.Input
            p8.SqlDbType = SqlDbType.Float
            p8.Value = CDbl(minSize)

            Dim p9 As New SqlClient.SqlParameter
            p9.ParameterName = "@price"
            p9.Direction = ParameterDirection.Input
            p9.SqlDbType = SqlDbType.Float
            p9.Value = CDbl(price)

            Dim p10 As New SqlClient.SqlParameter
            p10.ParameterName = "@dateFrom"
            p10.Direction = ParameterDirection.Input
            p10.SqlDbType = SqlDbType.DateTime
            p10.Value = CDate(dateFrom)

            Dim p11 As New SqlClient.SqlParameter
            p11.ParameterName = "@dateTo"
            p11.Direction = ParameterDirection.Input
            p11.SqlDbType = SqlDbType.DateTime
            p11.Value = CDate(dateTo)

            'Dim p12 As New SqlClient.SqlParameter
            'p12.ParameterName = "@amount"
            'p12.Direction = ParameterDirection.Input
            'p12.SqlDbType = SqlDbType.Float
            'p12.Value = amount

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            'cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)
            cmd.Parameters.Add(p7)
            cmd.Parameters.Add(p8)
            cmd.Parameters.Add(p9)
            cmd.Parameters.Add(p10)
            cmd.Parameters.Add(p11)
            'cmd.Parameters.Add(p12)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            daBuyer.Dispose()
            dsBuyer.Dispose()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub

    Public Sub deleteTmpFishDepositSummary()
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_delete_tmp_fishDepositSummary"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Function getProductCodePerProductionOutput(ByVal prodnDate As String, ByVal shift As String, ByVal lot As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandType = CommandType.StoredProcedure
            cmd.CommandText = "proc_getProductCodePerProductionOutput"
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            p1.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@shift"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = shift

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@lot"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = lot

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getAllMRNNoAvailable(ByVal materials As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getMRNNo_ByMaterials"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@materials"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = materials

            cmd.Parameters.Add(p1)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getAllMRNNoPerMaterials(ByVal materials As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getMRNNo_ByMaterials2"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@materials"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = materials

            cmd.Parameters.Add(p1)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getAllMRNNoAvailable() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand("SELECT dbo.tblMRN.mrnNo AS [MRN No.] " & _
                " FROM dbo.tblMRN INNER JOIN " & _
                " dbo.tblMRN_Materials ON dbo.tblMRN.matCode = dbo.tblMRN_Materials.matCode " & _
                " ORDER BY [MRN No.], dbo.tblMRN_Materials.matCategory", c)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function displayMRNAvailable() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_display_AvailableMRN"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getMRN_MatDesc_byCode(ByVal mrn As String, ByVal category As String) As String
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getMRN_MatDesc_byCode"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@mrn"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = mrn

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@category"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = category

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As String
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetString(0)
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getProductionDetailsByMRNCategory(ByVal prodnDate As String, _
    ByVal shift As String, ByVal category As String, ByVal validationData As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_display_ProductionDetails_byMRNCategory"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            p1.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@shift"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = shift

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@category"
            p3.SqlDbType = SqlDbType.VarChar
            p3.Direction = ParameterDirection.Input
            p3.Value = category

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@validationData"
            p4.SqlDbType = SqlDbType.VarChar
            p4.Direction = ParameterDirection.Input
            p4.Value = validationData

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub updateProduction_Details_MRN(ByVal prodnDate As String, ByVal shift As String, ByVal lot As String, _
    ByVal pCode As String, ByVal category As String, ByVal mrn As String, ByVal mrnValue As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_update_ProductionDetails_MRN"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            p1.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@shift"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = shift

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@lot"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = lot

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@pCode"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = pCode

            Dim p11 As New SqlClient.SqlParameter
            p11.ParameterName = "@category"
            p11.Direction = ParameterDirection.Input
            p11.SqlDbType = SqlDbType.VarChar
            p11.Value = category

            Dim p12 As New SqlClient.SqlParameter
            p12.ParameterName = "@mrn"
            p12.Direction = ParameterDirection.Input
            p12.SqlDbType = SqlDbType.VarChar
            p12.Value = mrn

            Dim p13 As New SqlClient.SqlParameter
            p13.ParameterName = "@mrnValue"
            p13.Direction = ParameterDirection.Input
            p13.SqlDbType = SqlDbType.Float
            p13.Value = CDbl(mrnValue)

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt


            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p11)
            cmd.Parameters.Add(p12)
            cmd.Parameters.Add(p13)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Function validateProduction_Details_MRN(ByVal prodnDate As String, _
    ByVal shift As String, ByVal lot As String, ByVal pCode As String) As Boolean
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getExistence_ProductionDetails_MRN"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            p1.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@shift"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = shift

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@lot"
            p3.SqlDbType = SqlDbType.VarChar
            p3.Direction = ParameterDirection.Input
            p3.Value = lot

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@pCode"
            p4.SqlDbType = SqlDbType.VarChar
            p4.Direction = ParameterDirection.Input
            p4.Value = pCode

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(paramRecCount)

            Dim da As New SqlClient.SqlDataAdapter
            Dim ds As New DataSet("dbPPICIS")

            da.SelectCommand = cmd
            da.Fill(ds)

            If Val(cmd.Parameters("@recCount").Value) > 0 Then
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return True
            Else
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return False
            End If
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function validateProduction_Details_MRN(ByVal prodnDate As String, _
   ByVal shift As String, ByVal lot As String, ByVal pCode As String, ByVal category As String) As Boolean
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getExistence_ProductionDetails_MRN_Category"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            p1.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@shift"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = shift

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@lot"
            p3.SqlDbType = SqlDbType.VarChar
            p3.Direction = ParameterDirection.Input
            p3.Value = lot

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@pCode"
            p4.SqlDbType = SqlDbType.VarChar
            p4.Direction = ParameterDirection.Input
            p4.Value = pCode

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@category"
            p5.SqlDbType = SqlDbType.VarChar
            p5.Direction = ParameterDirection.Input
            p5.Value = category

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(paramRecCount)

            Dim dr As SqlClient.SqlDataReader
            dr = cmd.ExecuteReader

            Dim returnValue As Boolean
            If dr.Read Then
                If Not dr(0) Is DBNull.Value Then
                    If dr.GetString(0) = "" Then
                        returnValue = False
                    Else
                        returnValue = True
                    End If
                Else
                    returnValue = False
                End If
            Else
                returnValue = False
            End If

            dr.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getMaterialsByMRNNo(ByVal mrnNo As String) As String
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getMaterials_ByMRNNo"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@mrnNo"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = mrnNo

            cmd.Parameters.Add(p1)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As String
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetString(0)
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getAllMRNNoByProdnDate(ByVal prodnDate As String, ByVal shift As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_displayAllMRNUsage_PerProdnDate"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            p1.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@shift"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = shift

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function validateMRNUsage(ByVal prodnDate As String, ByVal shift As String, _
    ByVal mrn As String) As Boolean
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getExistence_MRNUsage"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            p1.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@shift"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = shift

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@mrnNo"
            p3.SqlDbType = SqlDbType.VarChar
            p3.Direction = ParameterDirection.Input
            p3.Value = mrn

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(paramRecCount)

            Dim da As New SqlClient.SqlDataAdapter
            Dim ds As New DataSet("dbPPICIS")

            da.SelectCommand = cmd
            da.Fill(ds)

            If Val(cmd.Parameters("@recCount").Value) > 0 Then
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return True
            Else
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return False
            End If
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub saveNewMRN_Usage(ByVal prodnDate As String, ByVal shift As String, _
    ByVal mrn As String, ByVal qty As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_addNew_MRN_Usage"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            p1.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@shift"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = shift

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@mrnNo"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = mrn

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@qty"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.Float
            p4.Value = CDbl(qty)

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            daBuyer.Dispose()
            dsBuyer.Dispose()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub

    Public Sub updateMRN_Usage(ByVal prodnDate As String, ByVal shift As String, _
    ByVal mrn As String, ByVal qty As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_update_MRN_Usage"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            p1.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@shift"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = shift

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@mrnNo"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = mrn

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@qty"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.Float
            p4.Value = CDbl(qty)

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Function getAllMRNUsage() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_displayAllMRN_Usage"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getProductCosting(ByVal prodnDate As String, ByVal shift As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_displayAll_ProductCosting"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@cs"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.Float
            p1.Value = 0

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@fw"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.Float
            p2.Value = 0

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@totalFWQty"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.Float
            p3.Value = 0

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@lot"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = ""

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@cosAmount"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.Float
            p5.Value = 0

            Dim p6 As New SqlClient.SqlParameter
            p6.ParameterName = "@julian"
            p6.Direction = ParameterDirection.Input
            p6.SqlDbType = SqlDbType.VarChar
            p6.Value = ""

            Dim p7 As New SqlClient.SqlParameter
            p7.ParameterName = "@oilBom"
            p7.Direction = ParameterDirection.Input
            p7.SqlDbType = SqlDbType.Float
            p7.Value = 0

            Dim p8 As New SqlClient.SqlParameter
            p8.ParameterName = "@oilUsage"
            p8.Direction = ParameterDirection.Input
            p8.SqlDbType = SqlDbType.Float
            p8.Value = 0

            Dim p9 As New SqlClient.SqlParameter
            p9.ParameterName = "@oilAmount"
            p9.Direction = ParameterDirection.Input
            p9.SqlDbType = SqlDbType.Float
            p9.Value = 0

            Dim p10 As New SqlClient.SqlParameter
            p10.ParameterName = "@aoBom"
            p10.Direction = ParameterDirection.Input
            p10.SqlDbType = SqlDbType.Float
            p10.Value = 0

            Dim p11 As New SqlClient.SqlParameter
            p11.ParameterName = "@aoUsage"
            p11.Direction = ParameterDirection.Input
            p11.SqlDbType = SqlDbType.Float
            p11.Value = 0

            Dim p12 As New SqlClient.SqlParameter
            p12.ParameterName = "@aoAmount"
            p12.Direction = ParameterDirection.Input
            p12.SqlDbType = SqlDbType.Float
            p12.Value = 0

            Dim p13 As New SqlClient.SqlParameter
            p13.ParameterName = "@brothBom"
            p13.Direction = ParameterDirection.Input
            p13.SqlDbType = SqlDbType.Float
            p13.Value = 0

            Dim p14 As New SqlClient.SqlParameter
            p14.ParameterName = "@brothUsage"
            p14.Direction = ParameterDirection.Input
            p14.SqlDbType = SqlDbType.Float
            p14.Value = 0

            Dim p15 As New SqlClient.SqlParameter
            p15.ParameterName = "@brothAmount"
            p15.Direction = ParameterDirection.Input
            p15.SqlDbType = SqlDbType.Float
            p15.Value = 0

            Dim p16 As New SqlClient.SqlParameter
            p16.ParameterName = "@cfBom"
            p16.Direction = ParameterDirection.Input
            p16.SqlDbType = SqlDbType.Float
            p16.Value = 0

            Dim p17 As New SqlClient.SqlParameter
            p17.ParameterName = "@cfUsage"
            p17.Direction = ParameterDirection.Input
            p17.SqlDbType = SqlDbType.Float
            p17.Value = 0

            Dim p18 As New SqlClient.SqlParameter
            p18.ParameterName = "@cfAmount"
            p18.Direction = ParameterDirection.Input
            p18.SqlDbType = SqlDbType.Float
            p18.Value = 0

            Dim p19 As New SqlClient.SqlParameter
            p19.ParameterName = "@cpBom"
            p19.Direction = ParameterDirection.Input
            p19.SqlDbType = SqlDbType.Float
            p19.Value = 0

            Dim p20 As New SqlClient.SqlParameter
            p20.ParameterName = "@cpUsage"
            p20.Direction = ParameterDirection.Input
            p20.SqlDbType = SqlDbType.Float
            p20.Value = 0

            Dim p21 As New SqlClient.SqlParameter
            p21.ParameterName = "@cpAmount"
            p21.Direction = ParameterDirection.Input
            p21.SqlDbType = SqlDbType.Float
            p21.Value = 0

            Dim p22 As New SqlClient.SqlParameter
            p22.ParameterName = "@curryBom"
            p22.Direction = ParameterDirection.Input
            p22.SqlDbType = SqlDbType.Float
            p22.Value = 0

            Dim p23 As New SqlClient.SqlParameter
            p23.ParameterName = "@curryUsage"
            p23.Direction = ParameterDirection.Input
            p23.SqlDbType = SqlDbType.Float
            p23.Value = 0

            Dim p24 As New SqlClient.SqlParameter
            p24.ParameterName = "@curryAmount"
            p24.Direction = ParameterDirection.Input
            p24.SqlDbType = SqlDbType.Float
            p24.Value = 0

            Dim p25 As New SqlClient.SqlParameter
            p25.ParameterName = "@msgBom"
            p25.Direction = ParameterDirection.Input
            p25.SqlDbType = SqlDbType.Float
            p25.Value = 0

            Dim p26 As New SqlClient.SqlParameter
            p26.ParameterName = "@msgUsage"
            p26.Direction = ParameterDirection.Input
            p26.SqlDbType = SqlDbType.Float
            p26.Value = 0

            Dim p27 As New SqlClient.SqlParameter
            p27.ParameterName = "@msgAmount"
            p27.Direction = ParameterDirection.Input
            p27.SqlDbType = SqlDbType.Float
            p27.Value = 0

            Dim p28 As New SqlClient.SqlParameter
            p28.ParameterName = "@saltBom"
            p28.Direction = ParameterDirection.Input
            p28.SqlDbType = SqlDbType.Float
            p28.Value = 0

            Dim p29 As New SqlClient.SqlParameter
            p29.ParameterName = "@saltUsage"
            p29.Direction = ParameterDirection.Input
            p29.SqlDbType = SqlDbType.Float
            p29.Value = 0

            Dim p30 As New SqlClient.SqlParameter
            p30.ParameterName = "@saltAmount"
            p30.Direction = ParameterDirection.Input
            p30.SqlDbType = SqlDbType.Float
            p30.Value = 0

            Dim p31 As New SqlClient.SqlParameter
            p31.ParameterName = "@totalIng"
            p31.Direction = ParameterDirection.Input
            p31.SqlDbType = SqlDbType.Float
            p31.Value = 0

            Dim p32 As New SqlClient.SqlParameter
            p32.ParameterName = "@totalIngUPC"
            p32.Direction = ParameterDirection.Input
            p32.SqlDbType = SqlDbType.Float
            p32.Value = 0

            Dim p33 As New SqlClient.SqlParameter
            p33.ParameterName = "@canBom"
            p33.Direction = ParameterDirection.Input
            p33.SqlDbType = SqlDbType.Float
            p33.Value = 0

            Dim p34 As New SqlClient.SqlParameter
            p34.ParameterName = "@canUsage"
            p34.Direction = ParameterDirection.Input
            p34.SqlDbType = SqlDbType.Float
            p34.Value = 0

            Dim p35 As New SqlClient.SqlParameter
            p35.ParameterName = "@canAmount"
            p35.Direction = ParameterDirection.Input
            p35.SqlDbType = SqlDbType.Float
            p35.Value = 0

            Dim p36 As New SqlClient.SqlParameter
            p36.ParameterName = "@oilVariance"
            p36.Direction = ParameterDirection.Input
            p36.SqlDbType = SqlDbType.Float
            p36.Value = 0

            Dim p37 As New SqlClient.SqlParameter
            p37.ParameterName = "@oilTotal"
            p37.Direction = ParameterDirection.Input
            p37.SqlDbType = SqlDbType.Float
            p37.Value = 0

            Dim p38 As New SqlClient.SqlParameter
            p38.ParameterName = "@aoVariance"
            p38.Direction = ParameterDirection.Input
            p38.SqlDbType = SqlDbType.Float
            p38.Value = 0

            Dim p39 As New SqlClient.SqlParameter
            p39.ParameterName = "@aoTotal"
            p39.Direction = ParameterDirection.Input
            p39.SqlDbType = SqlDbType.Float
            p39.Value = 0

            Dim p40 As New SqlClient.SqlParameter
            p40.ParameterName = "@brothVariance"
            p40.Direction = ParameterDirection.Input
            p40.SqlDbType = SqlDbType.Float
            p40.Value = 0

            Dim p41 As New SqlClient.SqlParameter
            p41.ParameterName = "@brothTotal"
            p41.Direction = ParameterDirection.Input
            p41.SqlDbType = SqlDbType.Float
            p41.Value = 0

            Dim p42 As New SqlClient.SqlParameter
            p42.ParameterName = "@cfVariance"
            p42.Direction = ParameterDirection.Input
            p42.SqlDbType = SqlDbType.Float
            p42.Value = 0

            Dim p43 As New SqlClient.SqlParameter
            p43.ParameterName = "@cfTotal"
            p43.Direction = ParameterDirection.Input
            p43.SqlDbType = SqlDbType.Float
            p43.Value = 0

            Dim p44 As New SqlClient.SqlParameter
            p44.ParameterName = "@cpVariance"
            p44.Direction = ParameterDirection.Input
            p44.SqlDbType = SqlDbType.Float
            p44.Value = 0

            Dim p45 As New SqlClient.SqlParameter
            p45.ParameterName = "@cpTotal"
            p45.Direction = ParameterDirection.Input
            p45.SqlDbType = SqlDbType.Float
            p45.Value = 0

            Dim p46 As New SqlClient.SqlParameter
            p46.ParameterName = "@curryVariance"
            p46.Direction = ParameterDirection.Input
            p46.SqlDbType = SqlDbType.Float
            p46.Value = 0

            Dim p47 As New SqlClient.SqlParameter
            p47.ParameterName = "@curryTotal"
            p47.Direction = ParameterDirection.Input
            p47.SqlDbType = SqlDbType.Float
            p47.Value = 0

            Dim p48 As New SqlClient.SqlParameter
            p48.ParameterName = "@msgVariance"
            p48.Direction = ParameterDirection.Input
            p48.SqlDbType = SqlDbType.Float
            p48.Value = 0

            Dim p49 As New SqlClient.SqlParameter
            p49.ParameterName = "@msgTotal"
            p49.Direction = ParameterDirection.Input
            p49.SqlDbType = SqlDbType.Float
            p49.Value = 0

            Dim p50 As New SqlClient.SqlParameter
            p50.ParameterName = "@saltVariance"
            p50.Direction = ParameterDirection.Input
            p50.SqlDbType = SqlDbType.Float
            p50.Value = 0

            Dim p51 As New SqlClient.SqlParameter
            p51.ParameterName = "@saltTotal"
            p51.Direction = ParameterDirection.Input
            p51.SqlDbType = SqlDbType.Float
            p51.Value = 0

            Dim p52 As New SqlClient.SqlParameter
            p52.ParameterName = "@canVariance"
            p52.Direction = ParameterDirection.Input
            p52.SqlDbType = SqlDbType.Float
            p52.Value = 0

            Dim p53 As New SqlClient.SqlParameter
            p53.ParameterName = "@canTotal"
            p53.Direction = ParameterDirection.Input
            p53.SqlDbType = SqlDbType.Float
            p53.Value = 0

            Dim p54 As New SqlClient.SqlParameter
            p54.ParameterName = "@endBom"
            p54.Direction = ParameterDirection.Input
            p54.SqlDbType = SqlDbType.Float
            p54.Value = 0

            Dim p55 As New SqlClient.SqlParameter
            p55.ParameterName = "@endUsage"
            p55.Direction = ParameterDirection.Input
            p55.SqlDbType = SqlDbType.Float
            p55.Value = 0

            Dim p56 As New SqlClient.SqlParameter
            p56.ParameterName = "@endAmount"
            p56.Direction = ParameterDirection.Input
            p56.SqlDbType = SqlDbType.Float
            p56.Value = 0

            Dim p57 As New SqlClient.SqlParameter
            p57.ParameterName = "@endVariance"
            p57.Direction = ParameterDirection.Input
            p57.SqlDbType = SqlDbType.Float
            p57.Value = 0

            Dim p58 As New SqlClient.SqlParameter
            p58.ParameterName = "@endTotal"
            p58.Direction = ParameterDirection.Input
            p58.SqlDbType = SqlDbType.Float
            p58.Value = 0

            Dim p59 As New SqlClient.SqlParameter
            p59.ParameterName = "@cartonBom"
            p59.Direction = ParameterDirection.Input
            p59.SqlDbType = SqlDbType.Float
            p59.Value = 0

            Dim p60 As New SqlClient.SqlParameter
            p60.ParameterName = "@cartonUsage"
            p60.Direction = ParameterDirection.Input
            p60.SqlDbType = SqlDbType.Float
            p60.Value = 0

            Dim p61 As New SqlClient.SqlParameter
            p61.ParameterName = "@cartonAmount"
            p61.Direction = ParameterDirection.Input
            p61.SqlDbType = SqlDbType.Float
            p61.Value = 0

            Dim p62 As New SqlClient.SqlParameter
            p62.ParameterName = "@cartonVariance"
            p62.Direction = ParameterDirection.Input
            p62.SqlDbType = SqlDbType.Float
            p62.Value = 0

            Dim p63 As New SqlClient.SqlParameter
            p63.ParameterName = "@cartonTotal"
            p63.Direction = ParameterDirection.Input
            p63.SqlDbType = SqlDbType.Float
            p63.Value = 0

            Dim p64 As New SqlClient.SqlParameter
            p64.ParameterName = "@labelBom"
            p64.Direction = ParameterDirection.Input
            p64.SqlDbType = SqlDbType.Float
            p64.Value = 0

            Dim p65 As New SqlClient.SqlParameter
            p65.ParameterName = "@labelUsage"
            p65.Direction = ParameterDirection.Input
            p65.SqlDbType = SqlDbType.Float
            p65.Value = 0

            Dim p66 As New SqlClient.SqlParameter
            p66.ParameterName = "@labelAmount"
            p66.Direction = ParameterDirection.Input
            p66.SqlDbType = SqlDbType.Float
            p66.Value = 0

            Dim p67 As New SqlClient.SqlParameter
            p67.ParameterName = "@labelVariance"
            p67.Direction = ParameterDirection.Input
            p67.SqlDbType = SqlDbType.Float
            p67.Value = 0

            Dim p68 As New SqlClient.SqlParameter
            p68.ParameterName = "@labelTotal"
            p68.Direction = ParameterDirection.Input
            p68.SqlDbType = SqlDbType.Float
            p68.Value = 0

            Dim p69 As New SqlClient.SqlParameter
            p69.ParameterName = "@totalPackaging"
            p69.Direction = ParameterDirection.Input
            p69.SqlDbType = SqlDbType.Float
            p69.Value = 0

            Dim p70 As New SqlClient.SqlParameter
            p70.ParameterName = "@prodnDate"
            p70.Direction = ParameterDirection.Input
            p70.SqlDbType = SqlDbType.DateTime
            p70.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p71 As New SqlClient.SqlParameter
            p71.ParameterName = "@shift"
            p71.Direction = ParameterDirection.Input
            p71.SqlDbType = SqlDbType.VarChar
            p71.Value = shift

            Dim p72 As New SqlClient.SqlParameter
            p72.ParameterName = "@laborUC"
            p72.Direction = ParameterDirection.Input
            p72.SqlDbType = SqlDbType.Float
            p72.Value = 0

            Dim p73 As New SqlClient.SqlParameter
            p73.ParameterName = "@laborAmount"
            p73.Direction = ParameterDirection.Input
            p73.SqlDbType = SqlDbType.Float
            p73.Value = 0

            Dim p74 As New SqlClient.SqlParameter
            p74.ParameterName = "@utilityUC"
            p74.Direction = ParameterDirection.Input
            p74.SqlDbType = SqlDbType.Float
            p74.Value = 0

            Dim p75 As New SqlClient.SqlParameter
            p75.ParameterName = "@utilityAmount"
            p75.Direction = ParameterDirection.Input
            p75.SqlDbType = SqlDbType.Float
            p75.Value = 0

            Dim p76 As New SqlClient.SqlParameter
            p76.ParameterName = "@ohUC"
            p76.Direction = ParameterDirection.Input
            p76.SqlDbType = SqlDbType.Float
            p76.Value = 0

            Dim p77 As New SqlClient.SqlParameter
            p77.ParameterName = "@ohAmount"
            p77.Direction = ParameterDirection.Input
            p77.SqlDbType = SqlDbType.Float
            p77.Value = 0

            Dim p78 As New SqlClient.SqlParameter
            p78.ParameterName = "@totalUC"
            p78.Direction = ParameterDirection.Input
            p78.SqlDbType = SqlDbType.Float
            p78.Value = 0

            Dim p79 As New SqlClient.SqlParameter
            p79.ParameterName = "@totalProductCost"
            p79.Direction = ParameterDirection.Input
            p79.SqlDbType = SqlDbType.Float
            p79.Value = 0

            Dim p80 As New SqlClient.SqlParameter
            p80.ParameterName = "@fishVariance"
            p80.Direction = ParameterDirection.Input
            p80.SqlDbType = SqlDbType.Float
            p80.Value = 0

            Dim p81 As New SqlClient.SqlParameter
            p81.ParameterName = "@fishTotal"
            p81.Direction = ParameterDirection.Input
            p81.SqlDbType = SqlDbType.Float
            p81.Value = 0

            Dim p82 As New SqlClient.SqlParameter
            p82.ParameterName = "@desc"
            p82.Direction = ParameterDirection.Input
            p82.SqlDbType = SqlDbType.VarChar
            p82.Value = ""

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)
            cmd.Parameters.Add(p7)
            cmd.Parameters.Add(p8)
            cmd.Parameters.Add(p9)
            cmd.Parameters.Add(p10)
            cmd.Parameters.Add(p11)
            cmd.Parameters.Add(p12)
            cmd.Parameters.Add(p13)
            cmd.Parameters.Add(p14)
            cmd.Parameters.Add(p15)
            cmd.Parameters.Add(p16)
            cmd.Parameters.Add(p17)
            cmd.Parameters.Add(p18)
            cmd.Parameters.Add(p19)
            cmd.Parameters.Add(p20)
            cmd.Parameters.Add(p21)
            cmd.Parameters.Add(p22)
            cmd.Parameters.Add(p23)
            cmd.Parameters.Add(p24)
            cmd.Parameters.Add(p25)
            cmd.Parameters.Add(p26)
            cmd.Parameters.Add(p27)
            cmd.Parameters.Add(p28)
            cmd.Parameters.Add(p29)
            cmd.Parameters.Add(p30)
            cmd.Parameters.Add(p31)
            cmd.Parameters.Add(p32)
            cmd.Parameters.Add(p33)
            cmd.Parameters.Add(p34)
            cmd.Parameters.Add(p35)
            cmd.Parameters.Add(p36)
            cmd.Parameters.Add(p37)
            cmd.Parameters.Add(p38)
            cmd.Parameters.Add(p39)
            cmd.Parameters.Add(p40)
            cmd.Parameters.Add(p41)
            cmd.Parameters.Add(p42)
            cmd.Parameters.Add(p43)
            cmd.Parameters.Add(p44)
            cmd.Parameters.Add(p45)
            cmd.Parameters.Add(p46)
            cmd.Parameters.Add(p47)
            cmd.Parameters.Add(p48)
            cmd.Parameters.Add(p49)
            cmd.Parameters.Add(p50)
            cmd.Parameters.Add(p51)
            cmd.Parameters.Add(p52)
            cmd.Parameters.Add(p53)
            cmd.Parameters.Add(p54)
            cmd.Parameters.Add(p55)
            cmd.Parameters.Add(p56)
            cmd.Parameters.Add(p57)
            cmd.Parameters.Add(p58)
            cmd.Parameters.Add(p59)
            cmd.Parameters.Add(p60)
            cmd.Parameters.Add(p61)
            cmd.Parameters.Add(p62)
            cmd.Parameters.Add(p63)
            cmd.Parameters.Add(p64)
            cmd.Parameters.Add(p65)
            cmd.Parameters.Add(p66)
            cmd.Parameters.Add(p67)
            cmd.Parameters.Add(p68)
            cmd.Parameters.Add(p69)
            cmd.Parameters.Add(p70)
            cmd.Parameters.Add(p71)
            cmd.Parameters.Add(p72)
            cmd.Parameters.Add(p73)
            cmd.Parameters.Add(p74)
            cmd.Parameters.Add(p75)
            cmd.Parameters.Add(p76)
            cmd.Parameters.Add(p77)
            cmd.Parameters.Add(p78)
            cmd.Parameters.Add(p79)
            cmd.Parameters.Add(p80)
            cmd.Parameters.Add(p81)
            cmd.Parameters.Add(p82)


            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function computeProductCost(ByVal prodnDate As String, ByVal shift As String, _
    ByVal pCode As String, ByVal category As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_computeProductCost"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            p1.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@shift"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = shift

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@pCode"
            p3.SqlDbType = SqlDbType.VarChar
            p3.Direction = ParameterDirection.Input
            p3.Value = pCode

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@category"
            p4.SqlDbType = SqlDbType.VarChar
            p4.Direction = ParameterDirection.Input
            p4.Value = category

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As Double
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetDouble(0)
                Else
                    returnValue = 0
                End If
            Else
                returnValue = 0
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function computeProductLot(ByVal prodnDate As String, ByVal shift As String, _
    ByVal pCode As String, ByVal category As String) As String
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_computeProductLot"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            p1.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@shift"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = shift

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@pCode"
            p3.SqlDbType = SqlDbType.VarChar
            p3.Direction = ParameterDirection.Input
            p3.Value = pCode

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@category"
            p4.SqlDbType = SqlDbType.VarChar
            p4.Direction = ParameterDirection.Input
            p4.Value = category

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As String

            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    If category = "lot" Then
                        returnValue = drCode.GetString(0)
                    ElseIf category = "unit" Then
                        returnValue = CStr(drCode.GetDouble(0))
                    Else
                        returnValue = CStr(drCode.GetInt32(0))
                    End If
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getProductCategory(ByVal pCode As String) As String
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand("SELECT DISTINCT dbo.tblProduct_PackStyle.packType " & _
                " FROM dbo.tblProduct INNER JOIN " & _
                " dbo.tblProduct_PackStyle ON dbo.tblProduct.psCode = dbo.tblProduct_PackStyle.psCode " & _
                " WHERE (dbo.tblProduct.pCode LIKE '" & pCode & "')", c)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As String

            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetString(0)
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getAveAmountPerLotAndSpecie(ByVal lot As String, ByVal specie As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_computeAvePricePerLotAndSpecie"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@lot"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = lot

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@specie"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = specie

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As Double

            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetDouble(0)
                Else
                    returnValue = 0
                End If
            Else
                returnValue = 0
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getAveFishCost_byProdnDate(ByVal prodnDate As String, ByVal shift As String, _
    ByVal specie As String) As Double

        'MsgBox(prodnDate & " " & shift & " " & specie)

        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_computeAverageFishCost_byProdnDate"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            p1.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@shift"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = shift

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@specie"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = specie

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As Double

            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetDouble(0)
                Else
                    returnValue = 0
                End If
            Else
                returnValue = 0
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getFishCost(ByVal prodnDate As String, ByVal shift As String, _
    ByVal specie As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_computeFishCost"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            p1.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@shift"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = shift

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@specie"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = specie

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As Double

            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetDouble(2)
                Else
                    returnValue = 0
                End If
            Else
                returnValue = 0
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getAveConversion_byProdnDate(ByVal prodnDate As String, ByVal shift As String, _
    ByVal specie As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_computeAverageConversion_byProdnDate"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            p1.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@shift"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = shift

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@specie"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = specie

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As Double

            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetDouble(0)
                Else
                    returnValue = 0
                End If
            Else
                returnValue = 0
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getLoinsPriceInCOP(ByVal lot As String, ByVal specie As String, _
    ByVal cleaning As String, ByVal size As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_computeLoinsPriceByCOP"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@lot"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = lot

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@cleaning"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = cleaning

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@specie"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = specie

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@loinSize"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = size

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As Double

            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetDouble(0)
                Else
                    returnValue = 0
                End If
            Else
                returnValue = 0
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    'Public Function getProductSpecie(ByVal pCode As String) As String
    '    Try
    '        Dim c As New SqlClient.SqlConnection
    '        c.ConnectionString = modModule.getConnectionString
    '        c.Open()

    '        Dim cmd As New SqlClient.SqlCommand("SELECT DISTINCT dbo.tblFishSpecie.specie " & _
    '            " FROM dbo.tblProduct INNER JOIN " & _
    '            " dbo.tblFishSpecie ON dbo.tblProduct.specieCode = dbo.tblFishSpecie.specieCode " & _
    '            " WHERE (dbo.tblProduct.pCode = '" & pCode & "')", c)

    '        Dim drCode As SqlClient.SqlDataReader
    '        drCode = cmd.ExecuteReader

    '        Dim returnValue As String

    '        If drCode.Read Then
    '            If Not drCode(0) Is DBNull.Value Then
    '                returnValue = drCode.GetString(0)
    '            Else
    '                returnValue = ""
    '            End If
    '        Else
    '            returnValue = ""
    '        End If

    '        drCode.Close()
    '        c.Close()

    '        Return returnValue
    '    Catch e As Exception
    '        MsgBox(e.Message)
    '    Finally
    '    End Try
    'End Function

    Public Function getProductCleaning(ByVal pCode As String) As String
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand("SELECT dbo.tblProduct_Cleaning.clnDesc " & _
                " FROM dbo.tblProduct INNER JOIN " & _
                " dbo.tblProduct_Cleaning ON dbo.tblProduct.clnCode = dbo.tblProduct_Cleaning.clnCode " & _
                " WHERE (dbo.tblProduct.pCode = '" & pCode & "')", c)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As String

            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetString(0)
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getProductCanSize(ByVal pCode As String) As String
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand("SELECT dbo.tblProduct_CanSize.canSize " & _
                " FROM dbo.tblProduct INNER JOIN " & _
                " dbo.tblProduct_CanSize ON dbo.tblProduct.canCode = dbo.tblProduct_CanSize.canCode " & _
                " WHERE (dbo.tblProduct.pCode = '" & pCode & "')", c)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As String

            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetString(0)
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getProductDesc() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand("SELECT DISTINCT pDesc AS Description " & _
                " FROM dbo.tblProduct_BOM " & _
                " ORDER BY Description", c)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getProductDesc(ByVal pCode As String) As String
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand("SELECT DISTINCT pDesc AS Description " & _
                " FROM dbo.tblProduct_BOM " & _
                " WHERE pCode LIKE '" & pCode & "' " & _
                " ORDER BY Description", c)

            Dim dr As SqlClient.SqlDataReader
            dr = cmd.ExecuteReader

            Dim returnValue As String
            If dr.Read Then
                If Not dr(0) Is DBNull.Value Then
                    returnValue = dr.GetString(0)
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            dr.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function validateBOM(ByVal pCode As String, ByVal desc As String, ByVal revDate As String) As Boolean
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getExistence_BOM"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@pCode"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = pCode

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@pCodeDesc"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = desc

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@revDate"
            p3.SqlDbType = SqlDbType.DateTime
            p3.Direction = ParameterDirection.Input
            p3.Value = Format(CDate(revDate), getTimeFormat())

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(paramRecCount)

            Dim da As New SqlClient.SqlDataAdapter
            Dim ds As New DataSet("dbPPICIS")

            da.SelectCommand = cmd
            da.Fill(ds)

            If Val(cmd.Parameters("@recCount").Value) > 0 Then
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return True
            Else
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return False
            End If
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub saveNewBOM(ByVal pCode As String, ByVal desc As String, ByVal bomFish As String, _
    ByVal upc As String, ByVal ends As String, ByVal oil As String, ByVal broth As String, _
    ByVal cf As String, ByVal cp As String, ByVal curry As String, ByVal msg As String, _
    ByVal can As String, ByVal label As String, ByVal carton As String, ByVal revDate As String, _
    ByVal salt As String, ByVal nw As String, ByVal fw As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_addNew_BOM"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@pCode"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = pCode

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@pDesc"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = desc

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@bomFish"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.Float
            p3.Value = CDbl(bomFish)

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@bomUnitPerCase"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.Float
            p4.Value = CDbl(upc)

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@bomEnd"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.Float
            p5.Value = CDbl(ends)

            Dim p6 As New SqlClient.SqlParameter
            p6.ParameterName = "@bomOil"
            p6.Direction = ParameterDirection.Input
            p6.SqlDbType = SqlDbType.Float
            p6.Value = CDbl(oil)

            Dim p7 As New SqlClient.SqlParameter
            p7.ParameterName = "@bomBroth"
            p7.Direction = ParameterDirection.Input
            p7.SqlDbType = SqlDbType.Float
            p7.Value = CDbl(broth)

            Dim p8 As New SqlClient.SqlParameter
            p8.ParameterName = "@bomCF"
            p8.Direction = ParameterDirection.Input
            p8.SqlDbType = SqlDbType.Float
            p8.Value = CDbl(cf)

            Dim p9 As New SqlClient.SqlParameter
            p9.ParameterName = "@bomCP"
            p9.Direction = ParameterDirection.Input
            p9.SqlDbType = SqlDbType.Float
            p9.Value = CDbl(cp)

            Dim p10 As New SqlClient.SqlParameter
            p10.ParameterName = "@bomCurry"
            p10.Direction = ParameterDirection.Input
            p10.SqlDbType = SqlDbType.Float
            p10.Value = CDbl(curry)

            Dim p11 As New SqlClient.SqlParameter
            p11.ParameterName = "@bomMSG"
            p11.Direction = ParameterDirection.Input
            p11.SqlDbType = SqlDbType.Float
            p11.Value = CDbl(msg)

            Dim p12 As New SqlClient.SqlParameter
            p12.ParameterName = "@bomCan"
            p12.Direction = ParameterDirection.Input
            p12.SqlDbType = SqlDbType.Float
            p12.Value = CDbl(can)

            Dim p13 As New SqlClient.SqlParameter
            p13.ParameterName = "@bomLabel"
            p13.Direction = ParameterDirection.Input
            p13.SqlDbType = SqlDbType.Float
            p13.Value = CDbl(label)

            Dim p14 As New SqlClient.SqlParameter
            p14.ParameterName = "@bomCarton"
            p14.Direction = ParameterDirection.Input
            p14.SqlDbType = SqlDbType.Float
            p14.Value = CDbl(carton)

            Dim p15 As New SqlClient.SqlParameter
            p15.ParameterName = "@revisionDate"
            p15.Direction = ParameterDirection.Input
            p15.SqlDbType = SqlDbType.DateTime
            p15.Value = Format(CDate(revDate), getTimeFormat())

            Dim p16 As New SqlClient.SqlParameter
            p16.ParameterName = "@bomSalt"
            p16.Direction = ParameterDirection.Input
            p16.SqlDbType = SqlDbType.Float
            p16.Value = CDbl(salt)

            Dim p17 As New SqlClient.SqlParameter
            p17.ParameterName = "@nw"
            p17.Direction = ParameterDirection.Input
            p17.SqlDbType = SqlDbType.Float
            p17.Value = CDbl(nw)

            Dim p18 As New SqlClient.SqlParameter
            p18.ParameterName = "@fw"
            p18.Direction = ParameterDirection.Input
            p18.SqlDbType = SqlDbType.Float
            p18.Value = CDbl(fw)

            Dim p19 As New SqlClient.SqlParameter
            p19.ParameterName = "@bomCode"
            p19.Direction = ParameterDirection.Input
            p19.SqlDbType = SqlDbType.VarChar
            p19.Value = pCode & Format(CDate(revDate), "ddMMyy")

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)
            cmd.Parameters.Add(p7)
            cmd.Parameters.Add(p8)
            cmd.Parameters.Add(p9)
            cmd.Parameters.Add(p10)
            cmd.Parameters.Add(p11)
            cmd.Parameters.Add(p12)
            cmd.Parameters.Add(p13)
            cmd.Parameters.Add(p14)
            cmd.Parameters.Add(p15)
            cmd.Parameters.Add(p16)
            cmd.Parameters.Add(p17)
            cmd.Parameters.Add(p18)
            cmd.Parameters.Add(p19)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            daBuyer.Dispose()
            dsBuyer.Dispose()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub

    Public Sub updateBOM(ByVal pCode As String, ByVal desc As String, ByVal bomFish As String, _
    ByVal upc As String, ByVal ends As String, ByVal oil As String, ByVal broth As String, _
    ByVal cf As String, ByVal cp As String, ByVal curry As String, ByVal msg As String, _
    ByVal can As String, ByVal label As String, ByVal carton As String, ByVal revDate As String, _
    ByVal salt As String, ByVal nw As String, ByVal fw As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_update_BOM"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@pCode"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = pCode

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@pDesc"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = desc

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@bomFish"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.Float
            p3.Value = CDbl(bomFish)

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@bomUnitPerCase"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.Float
            p4.Value = CDbl(upc)

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@bomEnd"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.Float
            p5.Value = CDbl(ends)

            Dim p6 As New SqlClient.SqlParameter
            p6.ParameterName = "@bomOil"
            p6.Direction = ParameterDirection.Input
            p6.SqlDbType = SqlDbType.Float
            p6.Value = CDbl(oil)

            Dim p7 As New SqlClient.SqlParameter
            p7.ParameterName = "@bomBroth"
            p7.Direction = ParameterDirection.Input
            p7.SqlDbType = SqlDbType.Float
            p7.Value = CDbl(broth)

            Dim p8 As New SqlClient.SqlParameter
            p8.ParameterName = "@bomCF"
            p8.Direction = ParameterDirection.Input
            p8.SqlDbType = SqlDbType.Float
            p8.Value = CDbl(cf)

            Dim p9 As New SqlClient.SqlParameter
            p9.ParameterName = "@bomCP"
            p9.Direction = ParameterDirection.Input
            p9.SqlDbType = SqlDbType.Float
            p9.Value = CDbl(cp)

            Dim p10 As New SqlClient.SqlParameter
            p10.ParameterName = "@bomCurry"
            p10.Direction = ParameterDirection.Input
            p10.SqlDbType = SqlDbType.Float
            p10.Value = CDbl(curry)

            Dim p11 As New SqlClient.SqlParameter
            p11.ParameterName = "@bomMSG"
            p11.Direction = ParameterDirection.Input
            p11.SqlDbType = SqlDbType.Float
            p11.Value = CDbl(msg)

            Dim p12 As New SqlClient.SqlParameter
            p12.ParameterName = "@bomCan"
            p12.Direction = ParameterDirection.Input
            p12.SqlDbType = SqlDbType.Float
            p12.Value = CDbl(can)

            Dim p13 As New SqlClient.SqlParameter
            p13.ParameterName = "@bomLabel"
            p13.Direction = ParameterDirection.Input
            p13.SqlDbType = SqlDbType.Float
            p13.Value = CDbl(label)

            Dim p14 As New SqlClient.SqlParameter
            p14.ParameterName = "@bomCarton"
            p14.Direction = ParameterDirection.Input
            p14.SqlDbType = SqlDbType.Float
            p14.Value = CDbl(carton)

            Dim p15 As New SqlClient.SqlParameter
            p15.ParameterName = "@revisionDate"
            p15.Direction = ParameterDirection.Input
            p15.SqlDbType = SqlDbType.DateTime
            p15.Value = Format(CDate(revDate), getTimeFormat())

            Dim p16 As New SqlClient.SqlParameter
            p16.ParameterName = "@bomSalt"
            p16.Direction = ParameterDirection.Input
            p16.SqlDbType = SqlDbType.Float
            p16.Value = CDbl(salt)

            Dim p17 As New SqlClient.SqlParameter
            p17.ParameterName = "@nw"
            p17.Direction = ParameterDirection.Input
            p17.SqlDbType = SqlDbType.Float
            p17.Value = CDbl(nw)

            Dim p18 As New SqlClient.SqlParameter
            p18.ParameterName = "@fw"
            p18.Direction = ParameterDirection.Input
            p18.SqlDbType = SqlDbType.Float
            p18.Value = CDbl(fw)

            Dim p19 As New SqlClient.SqlParameter
            p19.ParameterName = "@bomCode"
            p19.Direction = ParameterDirection.Input
            p19.SqlDbType = SqlDbType.VarChar
            p19.Value = pCode & Format(CDate(revDate), "ddMMyy")

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)
            cmd.Parameters.Add(p7)
            cmd.Parameters.Add(p8)
            cmd.Parameters.Add(p9)
            cmd.Parameters.Add(p10)
            cmd.Parameters.Add(p11)
            cmd.Parameters.Add(p12)
            cmd.Parameters.Add(p13)
            cmd.Parameters.Add(p14)
            cmd.Parameters.Add(p15)
            cmd.Parameters.Add(p16)
            cmd.Parameters.Add(p17)
            cmd.Parameters.Add(p18)
            cmd.Parameters.Add(p19)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub

    Public Function getAllBOM() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_displayAll_BOM"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function computeProductBOM(ByVal pCode As String, ByVal category As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_computeProductBOM"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@pCode"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = pCode

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@category"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = category

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As Double

            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetDouble(0)
                Else
                    returnValue = 0
                End If
            Else
                returnValue = 0
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getProductMaterials(ByVal pCode As String, ByVal productType As String, ByVal media As String) As String
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_computeProductMaterials"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@pCode"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = pCode

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@productType"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = productType

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@media"
            p3.SqlDbType = SqlDbType.VarChar
            p3.Direction = ParameterDirection.Input
            p3.Value = media

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As String

            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetString(0)
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getMRN_ByProdnDate(ByVal prodnDate As String, ByVal shift As String, _
    ByVal materials As String, ByVal category As String) As String
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_computeProductMRN_byMaterials"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            p1.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@shift"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = shift

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@materials"
            p3.SqlDbType = SqlDbType.VarChar
            p3.Direction = ParameterDirection.Input
            p3.Value = materials

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@category"
            p4.SqlDbType = SqlDbType.VarChar
            p4.Direction = ParameterDirection.Input
            p4.Value = category

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As String

            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetString(0)
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getProductMRN_ByProdnDate(ByVal prodnDate As String, ByVal shift As String, _
    ByVal materials As String, ByVal canType As String) As String
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_computeProductMRN_byMaterials_Cans"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            p1.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@shift"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = shift

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@materials"
            p3.SqlDbType = SqlDbType.VarChar
            p3.Direction = ParameterDirection.Input
            p3.Value = materials

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As String

            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetString(0)
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function computeProductMaterials(ByVal mrnNo As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_computeProductMaterials_byCost"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@mrnNo"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = mrnNo

            cmd.Parameters.Add(p1)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As Double

            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetDouble(1)
                Else
                    returnValue = 0
                End If
            Else
                returnValue = 0
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function computeLaborRate(ByVal prodnDate As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_computeLaborRate"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            p1.Value = Format(CDate(prodnDate), getTimeFormat())

            cmd.Parameters.Add(p1)

            Dim dr As SqlClient.SqlDataReader
            dr = cmd.ExecuteReader

            Dim returnValue As Double
            If dr.Read Then
                If Not dr(0) Is DBNull.Value Then
                    returnValue = dr.GetDouble(0)
                Else
                    returnValue = 0
                End If
            Else
                returnValue = 0
            End If

            dr.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getTotalProcessed(ByVal prodnDate As String, ByVal shift As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_computeTotalProcessed"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            p1.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@shift"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = shift

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As Double
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetDouble(0)
                Else
                    returnValue = 0
                End If
            Else
                returnValue = 0
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function computeUtilityExpenses(ByVal prodnDate As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_computeTotalUtilityExpenses"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@dateFrom"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            p1.Value = Format(CDate(prodnDate), getTimeFormat()) '"01/" & Format(CDate(prodnDate), "/MM/yyyy")

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@dateTo"
            p2.SqlDbType = SqlDbType.DateTime
            p2.Direction = ParameterDirection.Input
            p2.Value = Format(CDate(prodnDate), getTimeFormat()) 'CDate(prodnDate).DaysInMonth(Format(CDate(prodnDate), "yyyy"), Format(CDate(prodnDate), "MM")) & Format(CDate(prodnDate), "/MM/yyyy")

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As Double
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetDouble(0)
                Else
                    returnValue = 0
                End If
            Else
                returnValue = 0
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function computeUtilityExpenses(ByVal prodnDate As String, ByVal category As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_computeUtilityExpenses"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@dateFrom"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            p1.Value = Format(CDate(prodnDate), getTimeFormat()) '"01/" & Format(CDate(prodnDate), "/MM/yyyy")

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@dateTo"
            p2.SqlDbType = SqlDbType.DateTime
            p2.Direction = ParameterDirection.Input
            p2.Value = Format(CDate(prodnDate), getTimeFormat()) 'CDate(prodnDate).DaysInMonth(Format(CDate(prodnDate), "yyyy"), Format(CDate(prodnDate), "MM")) & Format(CDate(prodnDate), "/MM/yyyy")

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@category"
            p3.SqlDbType = SqlDbType.VarChar
            p3.Direction = ParameterDirection.Input
            p3.Value = category

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As Double
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetDouble(0)
                Else
                    returnValue = 0
                End If
            Else
                returnValue = 0
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function computeTotalOH(ByVal prodnDate As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_computeTotalOH"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@dateFrom"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            p1.Value = Format(CDate(prodnDate), getTimeFormat()) '"01/" & Format(CDate(prodnDate), "/MM/yyyy")

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@dateTo"
            p2.SqlDbType = SqlDbType.DateTime
            p2.Direction = ParameterDirection.Input
            p2.Value = Format(CDate(prodnDate), getTimeFormat()) ' CDate(prodnDate).DaysInMonth(Format(CDate(prodnDate), "yyyy"), Format(CDate(prodnDate), "MM")) & Format(CDate(prodnDate), "/MM/yyyy")

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As Double
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetDouble(0)
                Else
                    returnValue = 0
                End If
            Else
                returnValue = 0
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function computeTotalFW(ByVal prodnDate As String, ByVal shift As String, ByVal lot As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_computeTotalFW"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            p1.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@shift"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = shift

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@lot"
            p3.SqlDbType = SqlDbType.VarChar
            p3.Direction = ParameterDirection.Input
            p3.Value = lot

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As Double
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetDouble(0)
                Else
                    returnValue = 0
                End If
            Else
                returnValue = 0
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub saveNewPrintProductCost(ByVal pCode As String, ByVal lot As String, ByVal julian As String, _
        ByVal totalCs As String, ByVal fw As String, ByVal totalFW As String, ByVal fishCost As String, _
        ByVal fishVariance As String, ByVal fishTotal As String, ByVal bomOil As String, _
        ByVal oilUsage As String, ByVal oilAmount As String, ByVal oilVariance As String, ByVal oilTotal As String, _
        ByVal bomAO As String, ByVal aoUsage As String, ByVal aoAmount As String, ByVal aoVariance As String, _
        ByVal aoTotal As String, ByVal bomBroth As String, ByVal brothUsage As String, ByVal brothAmount As String, _
        ByVal brothVariance As String, ByVal brothTotal As String, ByVal bomCF As String, ByVal cfUsage As String, _
        ByVal cfAmount As String, ByVal cfVariance As String, ByVal cfTotal As String, ByVal bomCP As String, _
        ByVal cpUsage As String, ByVal cpAmount As String, ByVal cpVariance As String, ByVal cpTotal As String, _
        ByVal bomCurry As String, ByVal curryUsage As String, ByVal curryAmount As String, ByVal curryVariance As String, _
        ByVal curryTotal As String, ByVal bomMSG As String, ByVal msgUsage As String, ByVal msgAmount As String, _
        ByVal msgVariance As String, ByVal msgTotal As String, ByVal bomSalt As String, ByVal saltUsage As String, _
        ByVal saltAmount As String, ByVal saltVariance As String, ByVal saltTotal As String, ByVal ingUC As String, _
        ByVal ingTotal As String, ByVal bomCan As String, ByVal canUsage As String, ByVal canAmount As String, _
        ByVal canVariance As String, ByVal canTotal As String, ByVal bomEnds As String, ByVal endUsage As String, _
        ByVal endAmount As String, ByVal endVariance As String, ByVal endTotal As String, ByVal bomCartons As String, _
        ByVal cartonsUsage As String, ByVal cartonsAmount As String, ByVal cartonsVariance As String, ByVal cartonsTotal As String, _
        ByVal bomLabel As String, ByVal labelUsage As String, ByVal labelAmount As String, ByVal labelVariance As String, _
        ByVal labelTotal As String, ByVal packTotal As String, ByVal laborUC As String, ByVal laborAmount As String, _
        ByVal utilityUC As String, ByVal utilityAmount As String, ByVal ohUC As String, ByVal ohAmount As String, _
        ByVal totalUC As String, ByVal totalPackagingCost As String, ByVal specie As String, _
        ByVal size As String, ByVal prodnDate As String, ByVal shift As String, ByVal pDesc As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_addNew_tmp_PrintProductCosting"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@pCode"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = pCode

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@lot#"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = lot

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@julian"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.Int
            p3.Value = CInt(julian)

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@totalCs"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.Float
            p4.Value = CDbl(totalCs)

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@fw"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.Float
            p5.Value = CDbl(fw)

            Dim p6 As New SqlClient.SqlParameter
            p6.ParameterName = "@totalFW"
            p6.Direction = ParameterDirection.Input
            p6.SqlDbType = SqlDbType.Float
            p6.Value = CDbl(totalFW)

            Dim p7 As New SqlClient.SqlParameter
            p7.ParameterName = "@fishCost"
            p7.Direction = ParameterDirection.Input
            p7.SqlDbType = SqlDbType.Float
            p7.Value = CDbl(fishCost)

            Dim p8 As New SqlClient.SqlParameter
            p8.ParameterName = "@fishVariance"
            p8.Direction = ParameterDirection.Input
            p8.SqlDbType = SqlDbType.Float
            p8.Value = CDbl(fishVariance)

            Dim p9 As New SqlClient.SqlParameter
            p9.ParameterName = "@fishTotal"
            p9.Direction = ParameterDirection.Input
            p9.SqlDbType = SqlDbType.Float
            p9.Value = CDbl(fishTotal)

            Dim p10 As New SqlClient.SqlParameter
            p10.ParameterName = "@bomOil"
            p10.Direction = ParameterDirection.Input
            p10.SqlDbType = SqlDbType.Float
            p10.Value = CDbl(bomOil)

            Dim p11 As New SqlClient.SqlParameter
            p11.ParameterName = "@oilUsage"
            p11.Direction = ParameterDirection.Input
            p11.SqlDbType = SqlDbType.Float
            p11.Value = CDbl(oilUsage)

            Dim p12 As New SqlClient.SqlParameter
            p12.ParameterName = "@oilAmount"
            p12.Direction = ParameterDirection.Input
            p12.SqlDbType = SqlDbType.Float
            p12.Value = CDbl(oilAmount)

            Dim p13 As New SqlClient.SqlParameter
            p13.ParameterName = "@oilVariance"
            p13.Direction = ParameterDirection.Input
            p13.SqlDbType = SqlDbType.Float
            p13.Value = CDbl(oilVariance)

            Dim p14 As New SqlClient.SqlParameter
            p14.ParameterName = "@oilTotal"
            p14.Direction = ParameterDirection.Input
            p14.SqlDbType = SqlDbType.Float
            p14.Value = CDbl(oilTotal)

            Dim p15 As New SqlClient.SqlParameter
            p15.ParameterName = "@bomAO"
            p15.Direction = ParameterDirection.Input
            p15.SqlDbType = SqlDbType.Float
            p15.Value = CDbl(bomAO)

            Dim p16 As New SqlClient.SqlParameter
            p16.ParameterName = "@aoUsage"
            p16.Direction = ParameterDirection.Input
            p16.SqlDbType = SqlDbType.Float
            p16.Value = CDbl(aoUsage)

            Dim p17 As New SqlClient.SqlParameter
            p17.ParameterName = "@aoAmount"
            p17.Direction = ParameterDirection.Input
            p17.SqlDbType = SqlDbType.Float
            p17.Value = CDbl(aoAmount)

            Dim p18 As New SqlClient.SqlParameter
            p18.ParameterName = "@aoVariance"
            p18.Direction = ParameterDirection.Input
            p18.SqlDbType = SqlDbType.Float
            p18.Value = CDbl(aoVariance)

            Dim p19 As New SqlClient.SqlParameter
            p19.ParameterName = "@aoTotal"
            p19.Direction = ParameterDirection.Input
            p19.SqlDbType = SqlDbType.Float
            p19.Value = CDbl(aoTotal)

            Dim p20 As New SqlClient.SqlParameter
            p20.ParameterName = "@bomBroth"
            p20.Direction = ParameterDirection.Input
            p20.SqlDbType = SqlDbType.Float
            p20.Value = CDbl(bomBroth)

            Dim p21 As New SqlClient.SqlParameter
            p21.ParameterName = "@brothUsage"
            p21.Direction = ParameterDirection.Input
            p21.SqlDbType = SqlDbType.Float
            p21.Value = CDbl(brothUsage)

            Dim p22 As New SqlClient.SqlParameter
            p22.ParameterName = "@brothAmount"
            p22.Direction = ParameterDirection.Input
            p22.SqlDbType = SqlDbType.Float
            p22.Value = CDbl(brothAmount)

            Dim p23 As New SqlClient.SqlParameter
            p23.ParameterName = "@brothVariance"
            p23.Direction = ParameterDirection.Input
            p23.SqlDbType = SqlDbType.Float
            p23.Value = CDbl(brothVariance)

            Dim p24 As New SqlClient.SqlParameter
            p24.ParameterName = "@brothTotal"
            p24.Direction = ParameterDirection.Input
            p24.SqlDbType = SqlDbType.Float
            p24.Value = CDbl(brothTotal)

            Dim p25 As New SqlClient.SqlParameter
            p25.ParameterName = "@bomCF"
            p25.Direction = ParameterDirection.Input
            p25.SqlDbType = SqlDbType.Float
            p25.Value = CDbl(bomCF)

            Dim p26 As New SqlClient.SqlParameter
            p26.ParameterName = "@cfUsage"
            p26.Direction = ParameterDirection.Input
            p26.SqlDbType = SqlDbType.Float
            p26.Value = CDbl(cfUsage)

            Dim p27 As New SqlClient.SqlParameter
            p27.ParameterName = "@cfAmount"
            p27.Direction = ParameterDirection.Input
            p27.SqlDbType = SqlDbType.Float
            p27.Value = CDbl(cfAmount)

            Dim p28 As New SqlClient.SqlParameter
            p28.ParameterName = "@cfVariance"
            p28.Direction = ParameterDirection.Input
            p28.SqlDbType = SqlDbType.Float
            p28.Value = CDbl(cfVariance)

            Dim p29 As New SqlClient.SqlParameter
            p29.ParameterName = "@cfTotal"
            p29.Direction = ParameterDirection.Input
            p29.SqlDbType = SqlDbType.Float
            p29.Value = CDbl(cfTotal)

            Dim p30 As New SqlClient.SqlParameter
            p30.ParameterName = "@bomCP"
            p30.Direction = ParameterDirection.Input
            p30.SqlDbType = SqlDbType.Float
            p30.Value = CDbl(bomCP)

            Dim p31 As New SqlClient.SqlParameter
            p31.ParameterName = "@cpUsage"
            p31.Direction = ParameterDirection.Input
            p31.SqlDbType = SqlDbType.Float
            p31.Value = CDbl(cpUsage)

            Dim p32 As New SqlClient.SqlParameter
            p32.ParameterName = "@cpAmount"
            p32.Direction = ParameterDirection.Input
            p32.SqlDbType = SqlDbType.Float
            p32.Value = CDbl(cpAmount)

            Dim p33 As New SqlClient.SqlParameter
            p33.ParameterName = "@cpVariance"
            p33.Direction = ParameterDirection.Input
            p33.SqlDbType = SqlDbType.Float
            p33.Value = CDbl(cpVariance)

            Dim p34 As New SqlClient.SqlParameter
            p34.ParameterName = "@cpTotal"
            p34.Direction = ParameterDirection.Input
            p34.SqlDbType = SqlDbType.Float
            p34.Value = CDbl(cpTotal)

            Dim p35 As New SqlClient.SqlParameter
            p35.ParameterName = "@bomCurry"
            p35.Direction = ParameterDirection.Input
            p35.SqlDbType = SqlDbType.Float
            p35.Value = CDbl(bomCurry)

            Dim p36 As New SqlClient.SqlParameter
            p36.ParameterName = "@curryUsage"
            p36.Direction = ParameterDirection.Input
            p36.SqlDbType = SqlDbType.Float
            p36.Value = CDbl(curryUsage)

            Dim p37 As New SqlClient.SqlParameter
            p37.ParameterName = "@curryAmount"
            p37.Direction = ParameterDirection.Input
            p37.SqlDbType = SqlDbType.Float
            p37.Value = CDbl(curryAmount)

            Dim p38 As New SqlClient.SqlParameter
            p38.ParameterName = "@curryVariance"
            p38.Direction = ParameterDirection.Input
            p38.SqlDbType = SqlDbType.Float
            p38.Value = CDbl(curryVariance)

            Dim p39 As New SqlClient.SqlParameter
            p39.ParameterName = "@curryTotal"
            p39.Direction = ParameterDirection.Input
            p39.SqlDbType = SqlDbType.Float
            p39.Value = CDbl(curryTotal)

            Dim p40 As New SqlClient.SqlParameter
            p40.ParameterName = "@bomMSG"
            p40.Direction = ParameterDirection.Input
            p40.SqlDbType = SqlDbType.Float
            p40.Value = CDbl(bomMSG)

            Dim p41 As New SqlClient.SqlParameter
            p41.ParameterName = "@msgUsage"
            p41.Direction = ParameterDirection.Input
            p41.SqlDbType = SqlDbType.Float
            p41.Value = CDbl(msgUsage)

            Dim p42 As New SqlClient.SqlParameter
            p42.ParameterName = "@msgAmount"
            p42.Direction = ParameterDirection.Input
            p42.SqlDbType = SqlDbType.Float
            p42.Value = CDbl(msgAmount)

            Dim p43 As New SqlClient.SqlParameter
            p43.ParameterName = "@msgVariance"
            p43.Direction = ParameterDirection.Input
            p43.SqlDbType = SqlDbType.Float
            p43.Value = CDbl(msgVariance)

            Dim p44 As New SqlClient.SqlParameter
            p44.ParameterName = "@msgTotal"
            p44.Direction = ParameterDirection.Input
            p44.SqlDbType = SqlDbType.Float
            p44.Value = CDbl(msgTotal)

            Dim p45 As New SqlClient.SqlParameter
            p45.ParameterName = "@bomSalt"
            p45.Direction = ParameterDirection.Input
            p45.SqlDbType = SqlDbType.Float
            p45.Value = CDbl(bomSalt)

            Dim p46 As New SqlClient.SqlParameter
            p46.ParameterName = "@saltUsage"
            p46.Direction = ParameterDirection.Input
            p46.SqlDbType = SqlDbType.Float
            p46.Value = CDbl(saltUsage)

            Dim p47 As New SqlClient.SqlParameter
            p47.ParameterName = "@saltAmount"
            p47.Direction = ParameterDirection.Input
            p47.SqlDbType = SqlDbType.Float
            p47.Value = CDbl(saltAmount)

            Dim p48 As New SqlClient.SqlParameter
            p48.ParameterName = "@saltVariance"
            p48.Direction = ParameterDirection.Input
            p48.SqlDbType = SqlDbType.Float
            p48.Value = CDbl(saltVariance)

            Dim p49 As New SqlClient.SqlParameter
            p49.ParameterName = "@saltTotal"
            p49.Direction = ParameterDirection.Input
            p49.SqlDbType = SqlDbType.Float
            p49.Value = CDbl(saltTotal)

            Dim p50 As New SqlClient.SqlParameter
            p50.ParameterName = "@ingUC"
            p50.Direction = ParameterDirection.Input
            p50.SqlDbType = SqlDbType.Float
            p50.Value = CDbl(ingUC)

            Dim p51 As New SqlClient.SqlParameter
            p51.ParameterName = "@ingTotal"
            p51.Direction = ParameterDirection.Input
            p51.SqlDbType = SqlDbType.Float
            p51.Value = CDbl(ingTotal)

            Dim p52 As New SqlClient.SqlParameter
            p52.ParameterName = "@bomCan"
            p52.Direction = ParameterDirection.Input
            p52.SqlDbType = SqlDbType.Float
            p52.Value = CDbl(bomCan)

            Dim p53 As New SqlClient.SqlParameter
            p53.ParameterName = "@canUsage"
            p53.Direction = ParameterDirection.Input
            p53.SqlDbType = SqlDbType.Float
            p53.Value = CDbl(canUsage)

            Dim p54 As New SqlClient.SqlParameter
            p54.ParameterName = "@canAmount"
            p54.Direction = ParameterDirection.Input
            p54.SqlDbType = SqlDbType.Float
            p54.Value = CDbl(canAmount)

            Dim p55 As New SqlClient.SqlParameter
            p55.ParameterName = "@canVariance"
            p55.Direction = ParameterDirection.Input
            p55.SqlDbType = SqlDbType.Float
            p55.Value = CDbl(canVariance)

            Dim p56 As New SqlClient.SqlParameter
            p56.ParameterName = "@canTotal"
            p56.Direction = ParameterDirection.Input
            p56.SqlDbType = SqlDbType.Float
            p56.Value = CDbl(canTotal)

            Dim p57 As New SqlClient.SqlParameter
            p57.ParameterName = "@bomEnds"
            p57.Direction = ParameterDirection.Input
            p57.SqlDbType = SqlDbType.Float
            p57.Value = CDbl(bomEnds)

            Dim p58 As New SqlClient.SqlParameter
            p58.ParameterName = "@endUsage"
            p58.Direction = ParameterDirection.Input
            p58.SqlDbType = SqlDbType.Float
            p58.Value = CDbl(endUsage)

            Dim p59 As New SqlClient.SqlParameter
            p59.ParameterName = "@endAmount"
            p59.Direction = ParameterDirection.Input
            p59.SqlDbType = SqlDbType.Float
            p59.Value = CDbl(endAmount)

            Dim p60 As New SqlClient.SqlParameter
            p60.ParameterName = "@endVariance"
            p60.Direction = ParameterDirection.Input
            p60.SqlDbType = SqlDbType.Float
            p60.Value = CDbl(endVariance)

            Dim p61 As New SqlClient.SqlParameter
            p61.ParameterName = "@endTotal"
            p61.Direction = ParameterDirection.Input
            p61.SqlDbType = SqlDbType.Float
            p61.Value = CDbl(endTotal)

            Dim p62 As New SqlClient.SqlParameter
            p62.ParameterName = "@bomCartons"
            p62.Direction = ParameterDirection.Input
            p62.SqlDbType = SqlDbType.Float
            p62.Value = CDbl(bomCartons)

            Dim p63 As New SqlClient.SqlParameter
            p63.ParameterName = "@cartonsUsage"
            p63.Direction = ParameterDirection.Input
            p63.SqlDbType = SqlDbType.Float
            p63.Value = CDbl(cartonsUsage)

            Dim p64 As New SqlClient.SqlParameter
            p64.ParameterName = "@cartonsAmount"
            p64.Direction = ParameterDirection.Input
            p64.SqlDbType = SqlDbType.Float
            p64.Value = CDbl(cartonsAmount)

            Dim p65 As New SqlClient.SqlParameter
            p65.ParameterName = "@cartonsVariance"
            p65.Direction = ParameterDirection.Input
            p65.SqlDbType = SqlDbType.Float
            p65.Value = CDbl(cartonsVariance)

            Dim p66 As New SqlClient.SqlParameter
            p66.ParameterName = "@cartonsTotal"
            p66.Direction = ParameterDirection.Input
            p66.SqlDbType = SqlDbType.Float
            p66.Value = CDbl(cartonsTotal)

            Dim p67 As New SqlClient.SqlParameter
            p67.ParameterName = "@bomLabel"
            p67.Direction = ParameterDirection.Input
            p67.SqlDbType = SqlDbType.Float
            p67.Value = CDbl(bomLabel)

            Dim p68 As New SqlClient.SqlParameter
            p68.ParameterName = "@labelUsage"
            p68.Direction = ParameterDirection.Input
            p68.SqlDbType = SqlDbType.Float
            p68.Value = CDbl(labelUsage)

            Dim p69 As New SqlClient.SqlParameter
            p69.ParameterName = "@labelAmount"
            p69.Direction = ParameterDirection.Input
            p69.SqlDbType = SqlDbType.Float
            p69.Value = CDbl(labelAmount)

            Dim p70 As New SqlClient.SqlParameter
            p70.ParameterName = "@labelVariance"
            p70.Direction = ParameterDirection.Input
            p70.SqlDbType = SqlDbType.Float
            p70.Value = CDbl(labelVariance)

            Dim p71 As New SqlClient.SqlParameter
            p71.ParameterName = "@labelTotal"
            p71.Direction = ParameterDirection.Input
            p71.SqlDbType = SqlDbType.Float
            p71.Value = CDbl(labelTotal)

            Dim p72 As New SqlClient.SqlParameter
            p72.ParameterName = "@packTotal"
            p72.Direction = ParameterDirection.Input
            p72.SqlDbType = SqlDbType.Float
            p72.Value = CDbl(packTotal)

            Dim p73 As New SqlClient.SqlParameter
            p73.ParameterName = "@laborUC"
            p73.Direction = ParameterDirection.Input
            p73.SqlDbType = SqlDbType.Float
            p73.Value = CDbl(laborUC)

            Dim p74 As New SqlClient.SqlParameter
            p74.ParameterName = "@laborAmount"
            p74.Direction = ParameterDirection.Input
            p74.SqlDbType = SqlDbType.Float
            p74.Value = CDbl(laborAmount)

            Dim p75 As New SqlClient.SqlParameter
            p75.ParameterName = "@utilityUC"
            p75.Direction = ParameterDirection.Input
            p75.SqlDbType = SqlDbType.Float
            p75.Value = CDbl(utilityUC)

            Dim p76 As New SqlClient.SqlParameter
            p76.ParameterName = "@utilityAmount"
            p76.Direction = ParameterDirection.Input
            p76.SqlDbType = SqlDbType.Float
            p76.Value = CDbl(utilityAmount)

            Dim p77 As New SqlClient.SqlParameter
            p77.ParameterName = "@ohUC"
            p77.Direction = ParameterDirection.Input
            p77.SqlDbType = SqlDbType.Float
            p77.Value = CDbl(ohUC)

            Dim p78 As New SqlClient.SqlParameter
            p78.ParameterName = "@ohAmount"
            p78.Direction = ParameterDirection.Input
            p78.SqlDbType = SqlDbType.Float
            p78.Value = CDbl(ohAmount)

            Dim p79 As New SqlClient.SqlParameter
            p79.ParameterName = "@totalUC"
            p79.Direction = ParameterDirection.Input
            p79.SqlDbType = SqlDbType.Float
            p79.Value = CDbl(totalUC)

            Dim p80 As New SqlClient.SqlParameter
            p80.ParameterName = "@totalPackagingCost"
            p80.Direction = ParameterDirection.Input
            p80.SqlDbType = SqlDbType.Float
            p80.Value = CDbl(totalPackagingCost)

            Dim p81 As New SqlClient.SqlParameter
            p81.ParameterName = "@specie"
            p81.Direction = ParameterDirection.Input
            p81.SqlDbType = SqlDbType.VarChar
            p81.Value = specie

            Dim p82 As New SqlClient.SqlParameter
            p82.ParameterName = "@size"
            p82.Direction = ParameterDirection.Input
            p82.SqlDbType = SqlDbType.VarChar
            p82.Value = size

            Dim p83 As New SqlClient.SqlParameter
            p83.ParameterName = "@prodnDate"
            p83.Direction = ParameterDirection.Input
            p83.SqlDbType = SqlDbType.DateTime
            p83.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p84 As New SqlClient.SqlParameter
            p84.ParameterName = "@shift"
            p84.Direction = ParameterDirection.Input
            p84.SqlDbType = SqlDbType.VarChar
            p84.Value = shift

            Dim p85 As New SqlClient.SqlParameter
            p85.ParameterName = "@pDesc"
            p85.Direction = ParameterDirection.Input
            p85.SqlDbType = SqlDbType.VarChar
            p85.Value = pDesc

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)
            cmd.Parameters.Add(p7)
            cmd.Parameters.Add(p8)
            cmd.Parameters.Add(p9)
            cmd.Parameters.Add(p10)
            cmd.Parameters.Add(p11)
            cmd.Parameters.Add(p12)
            cmd.Parameters.Add(p13)
            cmd.Parameters.Add(p14)
            cmd.Parameters.Add(p15)
            cmd.Parameters.Add(p16)
            cmd.Parameters.Add(p17)
            cmd.Parameters.Add(p18)
            cmd.Parameters.Add(p19)
            cmd.Parameters.Add(p20)
            cmd.Parameters.Add(p21)
            cmd.Parameters.Add(p22)
            cmd.Parameters.Add(p23)
            cmd.Parameters.Add(p24)
            cmd.Parameters.Add(p25)
            cmd.Parameters.Add(p26)
            cmd.Parameters.Add(p27)
            cmd.Parameters.Add(p28)
            cmd.Parameters.Add(p29)
            cmd.Parameters.Add(p30)
            cmd.Parameters.Add(p31)
            cmd.Parameters.Add(p32)
            cmd.Parameters.Add(p33)
            cmd.Parameters.Add(p34)
            cmd.Parameters.Add(p35)
            cmd.Parameters.Add(p36)
            cmd.Parameters.Add(p37)
            cmd.Parameters.Add(p38)
            cmd.Parameters.Add(p39)
            cmd.Parameters.Add(p40)
            cmd.Parameters.Add(p41)
            cmd.Parameters.Add(p42)
            cmd.Parameters.Add(p43)
            cmd.Parameters.Add(p44)
            cmd.Parameters.Add(p45)
            cmd.Parameters.Add(p46)
            cmd.Parameters.Add(p47)
            cmd.Parameters.Add(p48)
            cmd.Parameters.Add(p49)
            cmd.Parameters.Add(p50)
            cmd.Parameters.Add(p51)
            cmd.Parameters.Add(p52)
            cmd.Parameters.Add(p53)
            cmd.Parameters.Add(p54)
            cmd.Parameters.Add(p55)
            cmd.Parameters.Add(p56)
            cmd.Parameters.Add(p57)
            cmd.Parameters.Add(p58)
            cmd.Parameters.Add(p59)
            cmd.Parameters.Add(p60)
            cmd.Parameters.Add(p61)
            cmd.Parameters.Add(p62)
            cmd.Parameters.Add(p63)
            cmd.Parameters.Add(p64)
            cmd.Parameters.Add(p65)
            cmd.Parameters.Add(p66)
            cmd.Parameters.Add(p67)
            cmd.Parameters.Add(p68)
            cmd.Parameters.Add(p69)
            cmd.Parameters.Add(p70)
            cmd.Parameters.Add(p71)
            cmd.Parameters.Add(p72)
            cmd.Parameters.Add(p73)
            cmd.Parameters.Add(p74)
            cmd.Parameters.Add(p75)
            cmd.Parameters.Add(p76)
            cmd.Parameters.Add(p77)
            cmd.Parameters.Add(p78)
            cmd.Parameters.Add(p79)
            cmd.Parameters.Add(p80)
            cmd.Parameters.Add(p81)
            cmd.Parameters.Add(p82)
            cmd.Parameters.Add(p83)
            cmd.Parameters.Add(p84)
            cmd.Parameters.Add(p85)


            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            daBuyer.Dispose()
            dsBuyer.Dispose()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub

    Public Sub deletePrintProductCosting()
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_delete_PrintProductCosting"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Sub deletePrintProductCostingTable()
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_delete_PrintProductCostingTable"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Sub deletePrintProductCostingTable2()
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_delete_PrintProductCostingTable2"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Function getTotalWithdrawalOfTheDay(ByVal prodnDate As String, _
    ByVal shift As String, ByVal bags As Boolean) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim qry As String
            If bags Then
                qry = "proc_displayTotalWithdrawalOfTheDay_Bags"
            Else
                qry = "proc_displayTotalWithdrawalOfTheDay"
            End If
            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = qry
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            p1.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@shift"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = shift

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function validateFishBinDeposited(ByVal bin As String) As Boolean
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getExistence_FishBinDeposited_byBins"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@bin"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = bin

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(paramRecCount)

            Dim dr As SqlClient.SqlDataReader
            dr = cmd.ExecuteReader

            Dim returnValue As Boolean
            If dr.Read Then
                If Not dr(0) Is DBNull.Value Then
                    returnValue = True
                Else
                    returnValue = False
                End If
            Else
                returnValue = False
            End If

            c.Close()
            dr.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getLotSummaryPerDeposited(ByVal lot As String, ByVal receivedDate As String, _
    ByVal sublot As String, ByVal cs As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_display_depositLotSummaryDetails"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@lot"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = lot

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@dateFrom"
            p2.SqlDbType = SqlDbType.DateTime
            p2.Direction = ParameterDirection.Input
            p2.Value = Format(CDate(receivedDate), getTimeFormat()) ' 00:00:01")

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@dateTo"
            p3.SqlDbType = SqlDbType.DateTime
            p3.Direction = ParameterDirection.Input
            p3.Value = Format(CDate(receivedDate), getTimeFormat()) ' 23:59:59")

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@sublot"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = sublot

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@cs"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.VarChar
            p5.Value = cs

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getLotSummaryPerDeposited_Bags(ByVal lot As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_display_depositLotSummaryDetails_Bags"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@lot"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = lot

            cmd.Parameters.Add(p1)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getFishBinsDeposited(ByVal lot As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand("SELECT dbo.tblFishBins.bin# AS [Bin No.], " & _
                " dbo.tblFishDeposit.grossWeight AS GW, dbo.tblFishBins.tareWeight AS TW, " & _
                " dbo.tblFishDeposit.grossWeight - dbo.tblFishBins.tareWeight AS [Net Weight] " & _
                " FROM dbo.tblFishBins INNER JOIN " & _
                " dbo.tblFishDeposit ON dbo.tblFishBins.binCode = dbo.tblFishDeposit.binCode " & _
                " WHERE (dbo.tblFishDeposit.batchlot = '" & lot & "') " & _
                " ORDER BY [Bin No.]", c)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getFishBinsDeposited2(ByVal lot As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand("SELECT DISTINCT dbo.tblFishBins.bin# AS [Bin No.], " & _
                " dbo.tblFishSpecie.specie AS [Fish Specie], dbo.tblFishSizes.sizeRange AS [Fish Size], " & _
                " dbo.tblFishDeposit.grossWeight AS [Gross Weight], dbo.tblFishDeposit.grossWeight - dbo.tblFishBins.tareWeight AS [Net Weight] " & _
                " FROM dbo.tblFishBins INNER JOIN " & _
                " dbo.tblFishDeposit ON dbo.tblFishBins.binCode = dbo.tblFishDeposit.binCode INNER JOIN " & _
                " dbo.tblFishSpecie ON dbo.tblFishDeposit.specieCode = dbo.tblFishSpecie.specieCode INNER JOIN " & _
                " dbo.tblFishSizes ON dbo.tblFishDeposit.sizeCode = dbo.tblFishSizes.sizeCode " & _
                " WHERE (dbo.tblFishDeposit.batchlot = '" & lot & "') " & _
                " ORDER BY [Bin No.]", c)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub updateFishBinDepositedQuantity(ByVal lot As String, ByVal bin As String, ByVal GW As String, _
    ByVal remarks As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_update_FishBinDeposited_Quantity"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@binCode"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = getFishBinCode(bin)

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@batchlot"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = lot

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@grossWeight"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.Float
            p3.Value = CDbl(GW)

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@remarks"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = remarks

            Dim pOptr As New SqlClient.SqlParameter
            pOptr.ParameterName = "@optr"
            pOptr.Direction = ParameterDirection.Input
            pOptr.SqlDbType = SqlDbType.VarChar
            pOptr.Value = modModule.getUsername

            Dim pEncoded As New SqlClient.SqlParameter
            pEncoded.ParameterName = "@dateTimeEncoded"
            pEncoded.Direction = ParameterDirection.Input
            pEncoded.SqlDbType = SqlDbType.DateTime
            pEncoded.Value = getServerDateTime()

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(pOptr)
            cmd.Parameters.Add(pEncoded)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Sub saveNewPrintProductCost_Table(ByVal code As String, ByVal lot As String, ByVal item As String, _
    ByVal account As String, ByVal qty As String, ByVal unitCost As String, ByVal debit As String, ByVal credit As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_addNew_tmp_PrintProductCosting_table"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@code"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = code

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@lot#"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = lot

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@item"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = item

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@accountCode"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = account

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@qty"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.Float
            p5.Value = CDbl(qty)

            Dim p6 As New SqlClient.SqlParameter
            p6.ParameterName = "@unitCost"
            p6.Direction = ParameterDirection.Input
            p6.SqlDbType = SqlDbType.Float
            p6.Value = CDbl(unitCost)

            Dim p7 As New SqlClient.SqlParameter
            p7.ParameterName = "@debit"
            p7.Direction = ParameterDirection.Input
            p7.SqlDbType = SqlDbType.Float
            p7.Value = CDbl(debit)

            Dim p8 As New SqlClient.SqlParameter
            p8.ParameterName = "@credit"
            p8.Direction = ParameterDirection.Input
            p8.SqlDbType = SqlDbType.Float
            p8.Value = CDbl(credit)

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)
            cmd.Parameters.Add(p7)
            cmd.Parameters.Add(p8)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            daBuyer.Dispose()
            dsBuyer.Dispose()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub

    Public Function getCostData_FG_FL(ByVal dateFrom As String, ByVal dateTo As String, ByVal category As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim qry As String
            Select Case category
                Case "FG"
                    qry = "proc_extractProductCost_FG"
                Case "FL"
                    qry = "proc_extractProductCost_FL"
            End Select

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = qry
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@dateFrom"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            p1.Value = Format(CDate(dateFrom), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@dateTo"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.DateTime
            p2.Value = Format(CDate(dateTo), getTimeFormat())

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@desc"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = ""

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@accountCode"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            If category = "FG" Then
                p4.Value = "5043"
            Else
                p4.Value = "5042"
            End If

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@unitCost"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.Float
            p5.Value = 0

            Dim p6 As New SqlClient.SqlParameter
            p6.ParameterName = "@credit"
            p6.Direction = ParameterDirection.Input
            p6.SqlDbType = SqlDbType.Float
            p6.Value = 0

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getUnitCost_FG_FL(ByVal pCode As String, ByVal lot As String) As Double
        'LOT WAS IGNORED CONSIDERING THAT PRODUCT WITH SAME CODE HAVE THE SAME PRICE IN COMMON
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getUnitCost_FG_FL"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@pCode"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = pCode

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@lot"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = lot

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As Double
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetDouble(0)
                Else
                    returnValue = 0
                End If
            Else
                returnValue = 0
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getManufacturingAbsorption_Labor_OH(ByVal prodnDate As String, ByVal shift As String, _
    ByVal pCode As String, ByVal lot As String, ByVal category As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_extractProductCost_Labor_OH_perProduct"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            p1.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@shift"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = shift

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@pCode"
            p3.SqlDbType = SqlDbType.VarChar
            p3.Direction = ParameterDirection.Input
            p3.Value = pCode

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@lot"
            p4.SqlDbType = SqlDbType.VarChar
            p4.Direction = ParameterDirection.Input
            p4.Value = lot

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@category"
            p5.SqlDbType = SqlDbType.VarChar
            p5.Direction = ParameterDirection.Input
            p5.Value = category

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As Double
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetDouble(0)
                Else
                    returnValue = 0
                End If
            Else
                returnValue = 0
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getCostData_Specie(ByVal prodnDate As String, ByVal shift As String, ByVal category As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim qry As String
            Select Case category
                Case "SJ"
                    qry = "proc_extractProductCost_RM_SJ"
                Case "YF"
                    qry = "proc_extractProductCost_RM_YF"
            End Select

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = qry
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            p1.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@shift"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = shift

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@accountCode"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = "5050"

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@unitCost"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.Float
            p4.Value = 0

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@debit"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.Float
            p5.Value = 0

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getCostData_Specie2(ByVal dateFrom As String, ByVal dateTo As String, ByVal category As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim qry As String
            Select Case category
                Case "SJ"
                    qry = "proc_extractProductCost_RM_SJ2"
                Case "YF"
                    qry = "proc_extractProductCost_RM_YF2"
            End Select

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = qry
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@dateFrom"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            p1.Value = Format(CDate(dateFrom), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@dateTo"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.DateTime
            p2.Value = Format(CDate(dateTo), getTimeFormat())

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@accountCode"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = "5050"

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@unitCost"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.Float
            p4.Value = 0

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getCostData_Specie(ByVal dateFrom As String, ByVal dateTo As String, ByVal category As String, ByVal specie As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_extractProductCost_RM_Specie"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@dateFrom"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            p1.Value = Format(CDate(dateFrom), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@dateTo"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.DateTime
            p2.Value = Format(CDate(dateTo), getTimeFormat())

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@accountCode"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = "5050"

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@unitCost"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.Float
            p4.Value = 0

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@specie"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.VarChar
            p5.Value = specie

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getCostData_Materials(ByVal prodnDate As String, ByVal shift As String, ByVal category As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim qry As String
            Select Case category
                Case "packaging"
                    qry = "proc_extractProductCost_RM_Packaging3"
                Case "ingredients"
                    qry = "proc_extractProductCost_RM_Ingredients3"
            End Select

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = qry
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            p1.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@shift"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = shift

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@accountCode"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            If category = "packaging" Then
                p3.Value = "5060"
            Else
                p3.Value = "5051"
            End If

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@unitCost"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.Float
            p4.Value = 0

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@debit"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.Float
            p5.Value = 0

            Dim p6 As New SqlClient.SqlParameter
            p6.ParameterName = "@lot"
            p6.Direction = ParameterDirection.Input
            p6.SqlDbType = SqlDbType.VarChar
            p6.Value = ""

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getCostData_Materials2(ByVal dateFrom As String, ByVal dateTo As String, ByVal category As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim qry As String
            Select Case category
                Case "packaging"
                    qry = "proc_extractProductCost_RM_Packaging2"
                Case "ingredients"
                    qry = "proc_extractProductCost_RM_Ingredients2"
            End Select

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = qry
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@dateFrom"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            p1.Value = Format(CDate(dateFrom), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@dateTo"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.DateTime
            p2.Value = Format(CDate(dateTo), getTimeFormat())

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@accountCode"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            If category = "packaging" Then
                p3.Value = "5060"
            Else
                p3.Value = "5051"
            End If

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@unitCost"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.Float
            p4.Value = 0

            'Dim p5 As New SqlClient.SqlParameter
            'p5.ParameterName = "@debit"
            'p5.Direction = ParameterDirection.Input
            'p5.SqlDbType = SqlDbType.Float
            'p5.Value = 0

            'Dim p6 As New SqlClient.SqlParameter
            'p6.ParameterName = "@lot"
            'p6.Direction = ParameterDirection.Input
            'p6.SqlDbType = SqlDbType.VarChar
            'p6.Value = ""

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            'cmd.Parameters.Add(p5)
            'cmd.Parameters.Add(p6)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getCostData_PackagingMaterials(ByVal prodnDate As String, ByVal shift As String, _
    ByVal category As String, ByVal materials As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim qry As String
            qry = "proc_extractProductCost_RM_Packaging_TotalUsage"

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = qry
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            p1.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@shift"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = shift

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@materials"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = materials

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@category"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = category

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)

            Dim dr As SqlClient.SqlDataReader
            dr = cmd.ExecuteReader
            Dim usage As Double

            If dr.Read Then
                If Not dr(0) Is DBNull.Value Then
                    usage = dr.GetDouble(0)
                Else
                    usage = 0
                End If
            Else
                usage = 0
            End If

            dr.Close()
            c.Close()

            Return usage
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getCostData_PackagingMaterials_Cartons(ByVal prodnDate As String, ByVal shift As String, _
    ByVal category As String, ByVal materials As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim qry As String
            qry = "proc_extractProductCost_RM_Packaging_TotalUsage"

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = qry
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            p1.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@shift"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = shift

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@materials"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = materials

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@category"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = category

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)

            Dim dr As SqlClient.SqlDataReader
            dr = cmd.ExecuteReader
            Dim tinsUsage As Double
            Dim casesUsage As Double
            Dim perCase As Double

            While dr.Read
                casesUsage += dr.GetDouble(0)
                perCase = dr.GetDouble(1)
                tinsUsage += dr.GetDouble(2)

            End While

            dr.Close()
            c.Close()

            If perCase = 0 Then
                Return 0
            Else
                If category = "Cartons" Then
                    Return casesUsage + (tinsUsage / perCase)
                Else
                    Return casesUsage * perCase + tinsUsage
                End If
            End If
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getCostData_IngredientsMaterials(ByVal prodnDate As String, ByVal shift As String, _
    ByVal materials As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim qry As String
            qry = "proc_extractProductCost_RM_Ingredients_TotalUsage"

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = qry
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            p1.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@shift"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = shift

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@materials"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = materials

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@category"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            If materials.Trim.IndexOf("Oil") >= 0 Then
                p4.Value = "oil"
            ElseIf materials.Trim.IndexOf("Salt") >= 0 Then
                p4.Value = "salt"
            Else
                p4.Value = materials
            End If

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)

            Dim dr As SqlClient.SqlDataReader
            dr = cmd.ExecuteReader
            Dim usage As Double

            If dr.Read Then
                If Not dr(0) Is DBNull.Value Then
                    usage = dr.GetDouble(0)
                Else
                    usage = 0
                End If
            Else
                usage = 0
            End If

            dr.Close()
            c.Close()

            Return usage
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getCostData_Labor_OH(ByVal prodnDate As String, ByVal shift As String, _
    ByVal category As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim qry As String
            qry = "proc_extractProductCost_Labor_OH"

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = qry
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            p1.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@shift"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = shift

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@category"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = category

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)

            Dim dr As SqlClient.SqlDataReader
            dr = cmd.ExecuteReader
            Dim usage As Double

            If dr.Read Then
                If Not dr(0) Is DBNull.Value Then
                    usage = dr.GetDouble(0)
                Else
                    usage = 0
                End If
            Else
                usage = 0
            End If

            dr.Close()
            c.Close()

            Return usage
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getCostData_ManufacturingAbsorption(ByVal dateFrom As String, ByVal dateTo As String, _
   ByVal category As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_extractProductCost_ManufacturingAbsorption"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@dateFrom"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            p1.Value = Format(CDate(dateFrom), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@dateTo"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.DateTime
            p2.Value = Format(CDate(dateTo), getTimeFormat())

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@category"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = category

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)

            Dim dr As SqlClient.SqlDataReader
            dr = cmd.ExecuteReader
            Dim usage As Double

            If dr.Read Then
                If Not dr(0) Is DBNull.Value Then
                    usage = dr.GetDouble(0)
                Else
                    usage = 0
                End If
            Else
                usage = 0
            End If

            dr.Close()
            c.Close()

            Return usage
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getCostData_Utility(ByVal prodnDate As String, ByVal shift As String, _
  ByVal category As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim qry As String
            qry = "proc_extractProductCost_Utility"

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = qry
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            p1.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@shift"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = shift

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@category"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = category

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)

            Dim dr As SqlClient.SqlDataReader
            dr = cmd.ExecuteReader
            Dim usage As Double

            If dr.Read Then
                If Not dr(0) Is DBNull.Value Then
                    usage = dr.GetDouble(0)
                Else
                    usage = 0
                End If
            Else
                usage = 0
            End If

            dr.Close()
            c.Close()

            Return usage
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    'Public Function getMaterialUsage_fromProductCost(ByVal prodnDate As String, ByVal shift As String, ByVal category As String) As DataSet
    '    Try
    '        Dim c As New SqlClient.SqlConnection
    '        c.ConnectionString = modModule.getConnectionString
    '        c.Open()

    '        Dim cmd As New SqlClient.SqlCommand
    '        cmd.CommandText = "proc_getMaterialsUsage_inProductCosting"
    '        cmd.CommandType = CommandType.StoredProcedure
    '        cmd.Connection = c

    '        Dim p1 As New SqlClient.SqlParameter
    '        p1.ParameterName = "@prodnDate"
    '        p1.Direction = ParameterDirection.Input
    '        p1.SqlDbType = SqlDbType.DateTime
    '        p1.Value = Format(CDate(prodnDate), getTimeFormat())

    '        Dim p2 As New SqlClient.SqlParameter
    '        p2.ParameterName = "@shift"
    '        p2.Direction = ParameterDirection.Input
    '        p2.SqlDbType = SqlDbType.VarChar
    '        p2.Value = shift

    '        Dim p3 As New SqlClient.SqlParameter
    '        p3.ParameterName = "@accountCode"
    '        p3.Direction = ParameterDirection.Input
    '        p3.SqlDbType = SqlDbType.VarChar
    '        If category = "packaging" Then
    '            p3.Value = "5060"
    '        Else
    '            p3.Value = "5051"
    '        End If

    '        Dim p4 As New SqlClient.SqlParameter
    '        p4.ParameterName = "@unitCost"
    '        p4.Direction = ParameterDirection.Input
    '        p4.SqlDbType = SqlDbType.Float
    '        p4.Value = 0

    '        Dim p5 As New SqlClient.SqlParameter
    '        p5.ParameterName = "@debit"
    '        p5.Direction = ParameterDirection.Input
    '        p5.SqlDbType = SqlDbType.Float
    '        p5.Value = 0

    '        Dim p6 As New SqlClient.SqlParameter
    '        p6.ParameterName = "@lot"
    '        p6.Direction = ParameterDirection.Input
    '        p6.SqlDbType = SqlDbType.VarChar
    '        p6.Value = ""

    '        cmd.Parameters.Add(p1)
    '        cmd.Parameters.Add(p2)
    '        cmd.Parameters.Add(p3)
    '        cmd.Parameters.Add(p4)
    '        cmd.Parameters.Add(p5)
    '        cmd.Parameters.Add(p6)

    '        Dim da As New SqlClient.SqlDataAdapterp1
    '        da.SelectCommand = cmd

    '        Dim ds As New DataSet("dbPPICIS")
    '        da.Fill(ds)

    '        Dim d As DataSet = ds

    '        da.Dispose()
    '        ds.Dispose()
    '        c.Close()

    '        Return d
    '    Catch e As Exception
    '        MsgBox(e.Message)
    '    Finally
    '    End Try
    'End Function

    Public Function getProductCansPerCase(ByVal julian As String, ByVal lot As String, ByVal pCode As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandType = CommandType.StoredProcedure
            cmd.CommandText = "proc_getProductCansPerCase"
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@julian"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.Int
            p1.Value = CInt(julian)

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@lot"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = lot

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@pCode"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = pCode

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As Double
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetDouble(0)
                Else
                    returnValue = 0
                End If
            Else
                returnValue = 0
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getPackagingMaterialsMRN_Cartons_Labels(ByVal prodnDate As String, _
    ByVal shift As String, ByVal pCode As String, ByVal lot As String, ByVal materials As String) As String
        'LOT NUMBER WAS IGNORED SINCE SAME PRODUCT WITH DIFFERENT LOT IS USING THE SAME CARTONS
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getPackagingMaterialsMRN_Cartons_Labels"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            p1.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@shift"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = shift

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@pCode"
            p3.SqlDbType = SqlDbType.VarChar
            p3.Direction = ParameterDirection.Input
            p3.Value = pCode

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@lot"
            p4.SqlDbType = SqlDbType.VarChar
            p4.Direction = ParameterDirection.Input
            p4.Value = lot

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@materials"
            p5.SqlDbType = SqlDbType.VarChar
            p5.Direction = ParameterDirection.Input
            p5.Value = materials

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As String
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetString(0)
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function computeMaterials_UnitCost(ByVal prodnDate As String, _
    ByVal shift As String, ByVal materials As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_computeMaterials_UnitCost"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            p1.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@shift"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = shift

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@materials"
            p3.SqlDbType = SqlDbType.VarChar
            p3.Direction = ParameterDirection.Input
            p3.Value = materials

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As Double
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetDouble(0)
                Else
                    returnValue = 0
                End If
            Else
                returnValue = 0
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getPackagingMaterials(ByVal prodnDate As String, _
    ByVal shift As String, ByVal pCode As String, ByVal category As String) As String
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_extractPackagingMaterials"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            p1.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@shift"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = shift

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@pCode"
            p3.SqlDbType = SqlDbType.VarChar
            p3.Direction = ParameterDirection.Input
            p3.Value = pCode

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@category"
            p4.SqlDbType = SqlDbType.VarChar
            p4.Direction = ParameterDirection.Input
            p4.Value = category

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As String
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetString(0)
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getPackagingMaterialsUsage_Cartons_Labels(ByVal prodnDate As String, _
    ByVal shift As String, ByVal pCode As String, ByVal lot As String, ByVal materials As String) As Double
        'LOT NUMBER WAS IGNORED CONSIDERING THAT WE GET THE TOTAL CARTONS PER PRODUCTION DATE AND CODE
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getPackagingMaterialsTotalUsage_Cartons_Labels"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            p1.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@shift"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = shift

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@pCode"
            p3.SqlDbType = SqlDbType.VarChar
            p3.Direction = ParameterDirection.Input
            p3.Value = pCode

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@lot"
            p4.SqlDbType = SqlDbType.VarChar
            p4.Direction = ParameterDirection.Input
            p4.Value = lot

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@materials"
            p5.SqlDbType = SqlDbType.VarChar
            p5.Direction = ParameterDirection.Input
            p5.Value = materials

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As Double
            'While drCode.Read
            '    If Not drCode(0) Is DBNull.Value Then
            '        returnValue += drCode.GetDouble(7)
            '    End If
            'End While
            'If materials = "Cartons" Then
            '    Dim tinsUsage, casesUsage, perCase As Double
            '    While drCode.Read
            '        tinsUsage += drCode.GetDouble(0)
            '        perCase = drCode.GetDouble(1)
            '        casesUsage += drCode.GetDouble(2)
            '    End While

            '    If perCase = 0 Then
            '        returnValue = 0
            '    Else
            '        returnValue = (tinsUsage / perCase) + casesUsage
            '    End If
            'Else
            '    If drCode.Read Then
            '        If Not drCode(0) Is DBNull.Value Then
            '            returnValue = drCode.GetDouble(0)
            '        Else
            '            returnValue = 0
            '        End If
            '    Else
            '        returnValue = 0
            '    End If
            'End If

            Dim tinsUsage, casesUsage, perCase As Double
            While drCode.Read
                casesUsage += drCode.GetDouble(0)
                perCase = drCode.GetDouble(1)
                tinsUsage += drCode.GetDouble(2)
            End While

            If perCase = 0 Then
                returnValue = 0
            Else
                If materials = "Cartons" Then
                    returnValue = casesUsage + (tinsUsage / perCase)
                Else
                    returnValue = casesUsage * perCase + tinsUsage
                End If
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getPackagingMaterialsUsage_Cartons_Labels(ByVal prodnDate As String, _
    ByVal shift As String, ByVal pCode As String, ByVal lot As String, _
    ByVal materials As String, ByVal category As String) As Double
        'LOT NUMBER WAS IGNORED CONSIDERING THAT WE GET THE TOTAL CARTONS PER PRODUCTION DATE AND CODE
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getPackagingMaterialsTotalUsage_Cartons_Labels_perProduct"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            p1.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@shift"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = shift

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@pCode"
            p3.SqlDbType = SqlDbType.VarChar
            p3.Direction = ParameterDirection.Input
            p3.Value = pCode

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@lot"
            p4.SqlDbType = SqlDbType.VarChar
            p4.Direction = ParameterDirection.Input
            p4.Value = lot

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@materials"
            p5.SqlDbType = SqlDbType.VarChar
            p5.Direction = ParameterDirection.Input
            p5.Value = materials

            Dim p6 As New SqlClient.SqlParameter
            p6.ParameterName = "@category"
            p6.SqlDbType = SqlDbType.VarChar
            p6.Direction = ParameterDirection.Input
            p6.Value = category

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As Double
            'While drCode.Read
            '    If Not drCode(0) Is DBNull.Value Then
            '        returnValue += drCode.GetDouble(7)
            '    End If
            'End While
            If category = "Cartons" Or category = "Labels" Then
                Dim tinsUsage, casesUsage, perCase As Double
                While drCode.Read
                    casesUsage += drCode.GetDouble(0)
                    perCase = drCode.GetDouble(1)
                    tinsUsage += drCode.GetDouble(2)
                End While

                If perCase = 0 Then
                    returnValue = 0
                Else
                    If category = "Cartons" Then
                        returnValue = casesUsage + (tinsUsage / perCase)
                    Else
                        returnValue = casesUsage * perCase + tinsUsage
                    End If
                End If
            Else
                If drCode.Read Then
                    If Not drCode(0) Is DBNull.Value Then
                        returnValue = drCode.GetDouble(0)
                    Else
                        returnValue = 0
                    End If
                Else
                    returnValue = 0
                End If
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getAllFishBinsWithdrawn() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_displayAll_FishBinsWithdrawn"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getFishBinsWithdrawn_Details(ByVal bin As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getFishBinsWithdrawn_Details2"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@bin"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = bin

            cmd.Parameters.Add(p1)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getFWSCode(ByVal prodnDate As String, ByVal shift As String, _
    ByVal lot As String, ByVal bin As String) As String
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getFWSCode"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            p1.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@shift"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = shift

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@lot"
            p3.SqlDbType = SqlDbType.VarChar
            p3.Direction = ParameterDirection.Input
            p3.Value = lot

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@bin"
            p4.SqlDbType = SqlDbType.VarChar
            p4.Direction = ParameterDirection.Input
            p4.Value = bin

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As String
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetString(0)
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub deleteBinFromFWS(ByVal fwsCode As String, ByVal depositCode As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_delete_binFromFWS"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@fwsCode"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = fwsCode

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@depositCode"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = depositCode

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Sub updateBin_PushBack(ByVal depositCode As String, ByVal pushBack As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_update_FishBinPushBack"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@depositCode"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = depositCode

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@pushBack"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = pushBack

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Function getMRNUsageDetails(ByVal prodnDate As String, ByVal shift As String, _
   ByVal mrnNo As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getMRNUsage_Details"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            p1.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@shift"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = shift

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@mrnNo"
            p3.SqlDbType = SqlDbType.VarChar
            p3.Direction = ParameterDirection.Input
            p3.Value = mrnNo

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As Double
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetDouble(1)
                Else
                    returnValue = "0"
                End If
            Else
                returnValue = "0"
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getReport_LabelingDetails(ByVal prodnDate As String, ByVal shift As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_report_LabelingDetials"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            p1.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@shift"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = shift

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getMaterialsInventoryCount(ByVal mrnCode As String, ByVal type As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim qry As String
            Select Case type
                Case "received"
                    qry = "SELECT qty " & _
                        " FROM dbo.tblMRN " & _
                        " WHERE (mrnNo = '" & mrnCode & "')"
                Case "bal"
                    qry = "SELECT bal " & _
                        " FROM dbo.tblMRN " & _
                        " WHERE (mrnNo = '" & mrnCode & "')"
                Case "usage"
                    qry = "SELECT SUM(qty) AS Expr1" & _
                        " FROM dbo.tblMRN_Usage " & _
                        " WHERE (mrnNo = '" & mrnCode & "')"
            End Select

            Dim cmd As New SqlClient.SqlCommand(qry, c)

            Dim dr As SqlClient.SqlDataReader
            dr = cmd.ExecuteReader

            Dim qty As Double
            If dr.Read Then
                If Not dr(0) Is DBNull.Value Then
                    qty = dr.GetDouble(0)
                Else
                    qty = 0
                End If
            Else
                qty = 0
            End If

            dr.Close()
            c.Close()
            Return qty
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getCostData_FG_FL2(ByVal dateFrom As String, ByVal dateTo As String, ByVal category As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim qry As String
            Select Case category
                Case "FG"
                    qry = "proc_extractProductCost_FG2"
                Case "FL"
                    qry = "proc_extractProductCost_FL2"
            End Select

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = qry
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@dateFrom"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            p1.Value = Format(CDate(dateFrom), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@dateTo"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.DateTime
            p2.Value = Format(CDate(dateTo), getTimeFormat())

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@desc"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = ""

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@accountCode"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            If category = "FG" Then
                p4.Value = "5043"
            Else
                p4.Value = "5042"
            End If

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@unitCost"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.Float
            p5.Value = 0

            'Dim p6 As New SqlClient.SqlParameter
            'p6.ParameterName = "@credit"
            'p6.Direction = ParameterDirection.Input
            'p6.SqlDbType = SqlDbType.Float
            'p6.Value = 0

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            'cmd.Parameters.Add(p6)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub saveNewPrintProductCost_Table(ByVal field1 As String, ByVal field2 As String, _
    ByVal field3 As String, ByVal field4 As String, ByVal field5 As String, ByVal field6 As String, _
    ByVal field7 As String, ByVal field8 As String, ByVal field9 As String, ByVal field10 As String, ByVal field11 As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_addNew_tmp_PrintProductCosting_table2"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@field1"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = field1

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@field2"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = field2

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@field3"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = field3

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@field4"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = field4

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@field5"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.VarChar
            p5.Value = field5

            Dim p6 As New SqlClient.SqlParameter
            p6.ParameterName = "@field6"
            p6.Direction = ParameterDirection.Input
            p6.SqlDbType = SqlDbType.VarChar
            p6.Value = field6

            Dim p7 As New SqlClient.SqlParameter
            p7.ParameterName = "@field7"
            p7.Direction = ParameterDirection.Input
            p7.SqlDbType = SqlDbType.VarChar
            p7.Value = field7

            Dim p8 As New SqlClient.SqlParameter
            p8.ParameterName = "@field8"
            p8.Direction = ParameterDirection.Input
            p8.SqlDbType = SqlDbType.VarChar
            p8.Value = field8

            Dim p9 As New SqlClient.SqlParameter
            p9.ParameterName = "@field9"
            p9.Direction = ParameterDirection.Input
            p9.SqlDbType = SqlDbType.VarChar
            p9.Value = field9

            Dim p10 As New SqlClient.SqlParameter
            p10.ParameterName = "@field10"
            p10.Direction = ParameterDirection.Input
            p10.SqlDbType = SqlDbType.VarChar
            p10.Value = field10

            Dim p11 As New SqlClient.SqlParameter
            p11.ParameterName = "@field11"
            p11.Direction = ParameterDirection.Input
            p11.SqlDbType = SqlDbType.VarChar
            p11.Value = field11

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)
            cmd.Parameters.Add(p7)
            cmd.Parameters.Add(p8)
            cmd.Parameters.Add(p9)
            cmd.Parameters.Add(p10)
            cmd.Parameters.Add(p11)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            daBuyer.Dispose()
            dsBuyer.Dispose()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub

    Public Function getListsOfFishBinsForDeposit2() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_display_ListsFishBinForDeposit2"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@bin#"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = ""

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@weight"
            p2.SqlDbType = SqlDbType.Float
            p2.Direction = ParameterDirection.Input
            p2.Value = "0"

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@tare"
            p3.SqlDbType = SqlDbType.Float
            p3.Direction = ParameterDirection.Input
            p3.Value = "0"

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@net"
            p4.SqlDbType = SqlDbType.Float
            p4.Direction = ParameterDirection.Input
            p4.Value = "0"

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@specie"
            p5.SqlDbType = SqlDbType.VarChar
            p5.Direction = ParameterDirection.Input
            p5.Value = ""

            Dim p6 As New SqlClient.SqlParameter
            p6.ParameterName = "@size"
            p6.SqlDbType = SqlDbType.VarChar
            p6.Direction = ParameterDirection.Input
            p6.Value = ""

            Dim p7 As New SqlClient.SqlParameter
            p7.ParameterName = "@lane"
            p7.SqlDbType = SqlDbType.VarChar
            p7.Direction = ParameterDirection.Input
            p7.Value = ""

            Dim p8 As New SqlClient.SqlParameter
            p8.ParameterName = "@position"
            p8.SqlDbType = SqlDbType.VarChar
            p8.Direction = ParameterDirection.Input
            p8.Value = ""

            Dim p9 As New SqlClient.SqlParameter
            p9.ParameterName = "@height"
            p9.SqlDbType = SqlDbType.VarChar
            p9.Direction = ParameterDirection.Input
            p9.Value = ""

            Dim p10 As New SqlClient.SqlParameter
            p10.ParameterName = "@type"
            p10.SqlDbType = SqlDbType.VarChar
            p10.Direction = ParameterDirection.Input
            p10.Value = ""

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)
            cmd.Parameters.Add(p7)
            cmd.Parameters.Add(p8)
            cmd.Parameters.Add(p9)
            cmd.Parameters.Add(p10)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getFishLotDepositedDetails_Bags(ByVal cs As String, ByVal lot As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_display_FishLotsDetailsDepositedByColdStorage_Bags"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@cs"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = cs

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@lot"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = lot

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getAllocatedBags(ByVal depositCode As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = getConnectionString()
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getAllocatedBags"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@depositCode"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = depositCode

            cmd.Parameters.Add(p1)

            Dim dr As SqlClient.SqlDataReader
            dr = cmd.ExecuteReader

            Dim qty As Double
            If dr.Read Then
                If Not dr(0) Is DBNull.Value Then
                    qty = dr.GetDouble(0)
                Else
                    qty = 0
                End If
            Else
                qty = 0
            End If

            dr.Close()
            c.Close()

            Return qty
        Catch ex As Exception
            MsgBox(ex.Message)
        End Try
    End Function

    Public Function getStoredBags(ByVal depositCode As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = getConnectionString()
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getStoredBags"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@depositCode"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = depositCode

            cmd.Parameters.Add(p1)

            Dim dr As SqlClient.SqlDataReader
            dr = cmd.ExecuteReader

            Dim qty As Double
            If dr.Read Then
                If Not dr(0) Is DBNull.Value Then
                    qty = dr.GetDouble(0)
                Else
                    qty = 0
                End If
            Else
                qty = 0
            End If

            dr.Close()
            c.Close()

            Return qty
        Catch ex As Exception
            MsgBox(ex.Message)
        End Try
    End Function

    Public Function getAllocatedBags(ByVal lot As String, ByVal specie As String, _
    ByVal fishType As String, ByVal loinSize As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = getConnectionString()
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getAllocatedBags_bySpecie"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@lot"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = lot

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@specie"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = specie

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@fishType"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = fishType

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@loinSize"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = loinSize

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)

            Dim dr As SqlClient.SqlDataReader
            dr = cmd.ExecuteReader

            Dim qty As Double
            If dr.Read Then
                If Not dr(0) Is DBNull.Value Then
                    qty = dr.GetDouble(0)
                Else
                    qty = 0
                End If
            Else
                qty = 0
            End If

            dr.Close()
            c.Close()

            Return qty
        Catch ex As Exception
            MsgBox(ex.Message)
        End Try
    End Function

    Public Function getLabeledQtyPerProduct(ByVal prodnDate As String, ByVal shift As String, _
    ByVal lot As String, ByVal pCode As String, ByVal pCode2 As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = getConnectionString()
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandType = CommandType.StoredProcedure
            cmd.CommandText = "proc_getLabeledQty_perProduct"
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            If prodnDate = "" Then
                p1.Value = getServerDateTime()
            Else
                p1.Value = CDate(prodnDate)
            End If

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@shift"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = shift

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@lot"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = lot

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@pCode"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = pCode

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@pCode2"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.VarChar
            p5.Value = pCode2

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)

            Dim dr As SqlClient.SqlDataReader
            dr = cmd.ExecuteReader

            Dim qty As Double
            If dr.Read Then
                If Not dr(0) Is DBNull.Value Then
                    qty = dr.GetDouble(0)
                Else
                    qty = 0
                End If
            Else
                qty = 0
            End If

            dr.Close()
            c.Close()

            Return qty
        Catch ex As Exception
            MsgBox(ex.Message)
        End Try
    End Function

    Public Function getAllMaterials() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_display_Materials"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getAllMRNUsageHistory(ByVal materials As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_display_MRNUsageHistory"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@materials"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = materials

            cmd.Parameters.Add(p1)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub updateMRN_Balance(ByVal code As String, ByVal bal As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_update_MRN_Balance"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@mrnNo"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = code

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@bal"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.Float
            p2.Value = CDbl(bal)

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Function getOutstandingLotNumberDeposited(ByVal lot As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = getConnectionString()
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_report_fishDepositInventory_byLot" '"proc_displayAll_fishReceiptsDetails"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@lot"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = lot

            cmd.Parameters.Add(p1)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("TRAKIM")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        End Try
    End Function

    Public Function getLotCanneryAcceptanceDetails(ByVal lot As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = getConnectionString()
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_printFWS_byLot"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@lot"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = lot

            cmd.Parameters.Add(p1)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("TRAKIM")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        End Try
    End Function

    Public Function getLoinInventory(ByVal dateFrom As String, ByVal dateTo As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = getConnectionString()
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_report_loinInventory"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@dateFrom"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            If dateFrom = "" Then
                p1.Value = getServerDateTime()
            Else
                p1.Value = CDate(dateFrom)
            End If

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@dateTo"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.DateTime
            If dateTo = "" Then
                p2.Value = getServerDateTime()
            Else
                p2.Value = CDate(dateTo)
            End If

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("TRAKIM")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        End Try
    End Function

    Public Function getLoinInventory_Summary(ByVal dateFrom As String, ByVal dateTo As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = getConnectionString()
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_report_loinInventorySummary"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@dateFrom"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            If dateFrom = "" Then
                p1.Value = getServerDateTime()
            Else
                p1.Value = CDate(dateFrom)
            End If

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@dateTo"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.DateTime
            If dateTo = "" Then
                p2.Value = getServerDateTime()
            Else
                p2.Value = CDate(dateTo)
            End If

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("TRAKIM")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        End Try
    End Function

    Public Function getLatestBOMCode(ByVal pCode As String) As String
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getLatestBOMCode"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@pCode"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = pCode

            cmd.Parameters.Add(p1)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As String
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetString(0)
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getFGTransaction() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand("SELECT fgTypeDesc AS [Transaction] " & _
                " FROM dbo.tblFG_TransType", c)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getFGOutputDetails(ByVal prodnDate As String, _
    ByVal shift As String, ByVal lot As String, ByVal trans As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = getConnectionString()
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_display_FGOutputDetails"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            If prodnDate = "" Then
                p1.Value = getServerDateTime()
            Else
                p1.Value = CDate(prodnDate)
            End If

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@shift"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = shift

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@trans"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = trans

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@lot"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = lot

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("TRAKIM")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        End Try
    End Function

    Public Function getFGOutputCode(ByVal prodnDate As String, ByVal shift As String, _
    ByVal lot As String, ByVal trans As String) As String
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getFGOutputCode"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            If prodnDate = "" Then
                p1.Value = getServerDateTime()
            Else
                p1.Value = Format(CDate(prodnDate), getTimeFormat())
            End If

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@shift"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = shift

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@lot"
            p3.SqlDbType = SqlDbType.VarChar
            p3.Direction = ParameterDirection.Input
            p3.Value = lot

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@trans"
            p4.SqlDbType = SqlDbType.VarChar
            p4.Direction = ParameterDirection.Input
            p4.Value = getTransCode(trans)

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As String
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetString(0)
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub saveNewFGOutput(ByVal prodnDate As String, ByVal shift As String, ByVal lot As String, _
    ByVal fgStatus As String, ByVal remarks As String, ByVal fgTransCode As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_addNew_FGOutput"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@fgCode"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            If fgTransCode.StartsWith("QA") Then
                p1.Value = "Q" & Format(CDate(prodnDate), "ddMMyy") & lot
            ElseIf fgTransCode.StartsWith("Dent") Then
                p1.Value = "D" & Format(CDate(prodnDate), "ddMMyy") & lot
            ElseIf fgTransCode.StartsWith("Rej") Then
                p1.Value = "R" & Format(CDate(prodnDate), "ddMMyy") & lot
            End If

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@prodnDate"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.DateTime
            p2.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@shift"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = shift

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@lot#"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = lot

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@fgStatus"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.VarChar
            p5.Value = fgStatus

            Dim p6 As New SqlClient.SqlParameter
            p6.ParameterName = "@remarks"
            p6.Direction = ParameterDirection.Input
            p6.SqlDbType = SqlDbType.VarChar
            p6.Value = remarks

            Dim p7 As New SqlClient.SqlParameter
            p7.ParameterName = "@optr"
            p7.Direction = ParameterDirection.Input
            p7.SqlDbType = SqlDbType.VarChar
            p7.Value = getUsername()

            Dim p8 As New SqlClient.SqlParameter
            p8.ParameterName = "@dateTimeEncoded"
            p8.Direction = ParameterDirection.Input
            p8.SqlDbType = SqlDbType.DateTime
            p8.Value = getServerDateTime()

            Dim p9 As New SqlClient.SqlParameter
            p9.ParameterName = "@fgTransCode"
            p9.Direction = ParameterDirection.Input
            p9.SqlDbType = SqlDbType.VarChar
            p9.Value = getTransCode(fgTransCode)

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)
            cmd.Parameters.Add(p7)
            cmd.Parameters.Add(p8)
            cmd.Parameters.Add(p9)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            daBuyer.Dispose()
            dsBuyer.Dispose()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub

    Public Function getTransCode(ByVal trans As String) As String
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand("SELECT fgTransCode " & _
                " FROM dbo.tblFG_TransType " & _
                " WHERE fgTypeDesc = '" & trans & "'", c)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As String
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetString(0)
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub saveNewFGOutput_Details(ByVal prodndate As String, ByVal shift As String, ByVal lot As String, _
    ByVal pCode As String, ByVal pCode2 As String, ByVal units As String, ByVal location As String, _
    ByVal defCode As String, ByVal trans As String, ByVal status As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_addNew_FGOutputDetails"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@fgCode"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = getFGOutputCode(prodndate, shift, lot, trans)

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@pCode"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = pCode

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@pCode2"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = pCode2

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@units"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.Float
            p4.Value = CDbl(units)

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@location"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.VarChar
            p5.Value = location

            Dim p6 As New SqlClient.SqlParameter
            p6.ParameterName = "@defCode"
            p6.Direction = ParameterDirection.Input
            p6.SqlDbType = SqlDbType.VarChar
            p6.Value = getFGDefectCode(defCode)

            Dim p7 As New SqlClient.SqlParameter
            p7.ParameterName = "@defectStatus"
            p7.Direction = ParameterDirection.Input
            p7.SqlDbType = SqlDbType.VarChar
            p7.Value = status

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)
            cmd.Parameters.Add(p7)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            daBuyer.Dispose()
            dsBuyer.Dispose()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub

    Public Function getFGDefectCode(ByVal defects As String) As String
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand("SELECT defCode " & _
                " FROM dbo.tblFG_Defects " & _
                " WHERE (defDesc = '" & defects & "')", c)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As String
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetString(0)
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub deleteFGOutputDetails(ByVal prodnDate As String, ByVal shift As String, _
    ByVal lot As String, ByVal trans As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_delete_FGOutputDetails"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@fgCode"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = getFGOutputCode(prodnDate, shift, lot, trans)

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Function getFGDefects() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand("SELECT DISTINCT defDesc AS Defects" & _
                " FROM dbo.tblFG_Defects ", c)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("TRAKIM")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getFGDefectStatus(ByVal status As String) As String
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand("SELECT defectStatus " & _
                " FROM dbo.tblFG_DefectsStatus " & _
                " WHERE (defectStatus LIKE '" & status & "')", c)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As String
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetString(0)
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getAllFGDefectStatus() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand("SELECT defectStatus AS [Status] " & _
                " FROM dbo.tblFG_DefectsStatus", c)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("TRAKIM")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getAllFGDefects() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand("SELECT defCode AS Code, defDesc AS [Desc] " & _
                " FROM dbo.tblFG_Defects " & _
                " ORDER BY defDesc", c)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("TRAKIM")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getFGDefectCounter() As Integer
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getCounter_FGDefect"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim ctr As Integer
            If drCode.Read Then
                ctr = drCode.GetInt32(0) + 1
            Else
                ctr = 1
            End If

            drCode.Close()
            c.Close()
            Return ctr
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub updateFGDefects(ByVal code As String, ByVal defect As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_update_FGDefects"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@defCode"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = code

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@defDesc"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = defect

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Function validateFGDefect(ByVal defect As String) As Boolean
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getExistence_FGDefect"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@defDesc"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = defect

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(paramRecCount)

            Dim da As New SqlClient.SqlDataAdapter
            Dim ds As New DataSet("dbPPICIS")

            da.SelectCommand = cmd
            da.Fill(ds)

            If Val(cmd.Parameters("@recCount").Value) > 0 Then
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return True
            Else
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return False
            End If
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getFGOutputQuantity(ByVal prodnDate As String, ByVal shift As String, _
    ByVal lot As String, ByVal pCode As String, ByVal pCode2 As String, ByVal trans As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getFGOutputQuantity"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            p1.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@shift"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = shift

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@lot"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = lot

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@pCode"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = pCode

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@pCode2"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.VarChar
            p5.Value = pCode2

            Dim p6 As New SqlClient.SqlParameter
            p6.ParameterName = "@trans"
            p6.Direction = ParameterDirection.Input
            p6.SqlDbType = SqlDbType.VarChar
            p6.Value = trans

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As Double
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetDouble(0)
                Else
                    returnValue = 0
                End If
            Else
                returnValue = 0
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub saveNewPrintProductionOutput(ByVal prodnDate As String, ByVal shift As String, ByVal lot As String, _
    ByVal pCode As String, ByVal pCode2 As String, ByVal julian As String, ByVal units As String, ByVal perCase As String, _
    ByVal dents As String, ByVal rejects As String, ByVal qa As String, ByVal bbe As String, ByVal packType As String, _
    ByVal fw As String, ByVal nw As String, ByVal oil As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_addNew_tmp_PrintDailyProductionOutput"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodndate"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            p1.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@shift"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = shift

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@lot#"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = lot

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@pCode"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = pCode

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@pCode2"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.VarChar
            p5.Value = pCode2

            Dim p6 As New SqlClient.SqlParameter
            p6.ParameterName = "@julian"
            p6.Direction = ParameterDirection.Input
            p6.SqlDbType = SqlDbType.Int
            p6.Value = CInt(julian)

            Dim p7 As New SqlClient.SqlParameter
            p7.ParameterName = "@units"
            p7.Direction = ParameterDirection.Input
            p7.SqlDbType = SqlDbType.Float
            p7.Value = CDbl(units)

            Dim p8 As New SqlClient.SqlParameter
            p8.ParameterName = "@perCase"
            p8.Direction = ParameterDirection.Input
            p8.SqlDbType = SqlDbType.Float
            p8.Value = CDbl(perCase)

            Dim p9 As New SqlClient.SqlParameter
            p9.ParameterName = "@dents"
            p9.Direction = ParameterDirection.Input
            p9.SqlDbType = SqlDbType.Float
            p9.Value = CDbl(dents)

            Dim p10 As New SqlClient.SqlParameter
            p10.ParameterName = "@rejects"
            p10.Direction = ParameterDirection.Input
            p10.SqlDbType = SqlDbType.Float
            p10.Value = CDbl(rejects)

            Dim p11 As New SqlClient.SqlParameter
            p11.ParameterName = "@qa"
            p11.Direction = ParameterDirection.Input
            p11.SqlDbType = SqlDbType.Float
            p11.Value = CDbl(qa)

            Dim p12 As New SqlClient.SqlParameter
            p12.ParameterName = "@bbe"
            p12.Direction = ParameterDirection.Input
            p12.SqlDbType = SqlDbType.DateTime
            p12.Value = Format(CDate(bbe), getTimeFormat())

            Dim p13 As New SqlClient.SqlParameter
            p13.ParameterName = "@packType"
            p13.Direction = ParameterDirection.Input
            p13.SqlDbType = SqlDbType.VarChar
            p13.Value = packType

            Dim p14 As New SqlClient.SqlParameter
            p14.ParameterName = "@fw"
            p14.Direction = ParameterDirection.Input
            p14.SqlDbType = SqlDbType.Float
            p14.Value = CDbl(fw)

            Dim p15 As New SqlClient.SqlParameter
            p15.ParameterName = "@nw"
            p15.Direction = ParameterDirection.Input
            p15.SqlDbType = SqlDbType.Float
            p15.Value = CDbl(nw)

            Dim p16 As New SqlClient.SqlParameter
            p16.ParameterName = "@oil"
            p16.Direction = ParameterDirection.Input
            p16.SqlDbType = SqlDbType.Float
            p16.Value = CDbl(oil)

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)
            cmd.Parameters.Add(p7)
            cmd.Parameters.Add(p8)
            cmd.Parameters.Add(p9)
            cmd.Parameters.Add(p10)
            cmd.Parameters.Add(p11)
            cmd.Parameters.Add(p12)
            cmd.Parameters.Add(p13)
            cmd.Parameters.Add(p14)
            cmd.Parameters.Add(p15)
            cmd.Parameters.Add(p16)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            daBuyer.Dispose()
            dsBuyer.Dispose()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub

    Public Sub delete_tmp_DailyProductionOutput()
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_delete_tmp_PrintDailyProductionOutput"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Function getCansPerCase(ByVal canSize As String, ByVal classification As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getCansPerCase"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@canSize"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = canSize

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@class"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = classification

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As Double
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetDouble(0)
                Else
                    returnValue = 0
                End If
            Else
                returnValue = 0
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getFVStartUnloadingDate(ByVal start As Boolean, ByVal lot As String) As String
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim qry As String
            If start Then
                qry = "SELECT DISTINCT dateTimeTransfer " & _
                    " FROM dbo.tblFishDeposit " & _
                    " WHERE (batchlot = '" & lot & "')"
            Else
                qry = "SELECT DISTINCT dateTimeTransfer " & _
                    " FROM dbo.tblFishDeposit " & _
                    " WHERE (batchlot = '" & lot & "') " & _
                    " ORDER BY dateTimeTransfer DESC"
            End If

            Dim cmd As New SqlClient.SqlCommand(qry, c)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As Date
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetDateTime(0)
                Else
                    returnValue = getServerDateTime()
                End If
            Else
                returnValue = getServerDateTime()
            End If

            drCode.Close()
            c.Close()

            If start Then
                Return Format(returnValue, "dd - ")
            Else
                Return Format(returnValue, "dd MMMM yyyy")
            End If
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getFishSpoilagesReport(ByVal prodnDate As String, ByVal shift As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_report_fishSpoilages"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            If prodnDate = "" Then
                p1.Value = Format(getServerDateTime(), getTimeFormat())
            Else
                p1.Value = Format(CDate(prodnDate), getTimeFormat())
            End If

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@shift"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = shift

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function validateMaterialUsages(ByVal prodnDate As String, ByVal shift As String, _
    ByVal materials As String) As Boolean
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getExistence_MaterialUsages"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            p1.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@shift"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = shift

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@matCode"
            p3.SqlDbType = SqlDbType.VarChar
            p3.Direction = ParameterDirection.Input
            p3.Value = getMRN_MaterialsCode(materials)

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(paramRecCount)

            Dim da As New SqlClient.SqlDataAdapter
            Dim ds As New DataSet("dbPPICIS")

            da.SelectCommand = cmd
            da.Fill(ds)

            If Val(cmd.Parameters("@recCount").Value) > 0 Then
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return True
            Else
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return False
            End If
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub saveNewMaterialUsages(ByVal prodnDate As String, ByVal shift As String, _
    ByVal materials As String, ByVal qty As String, ByVal mrnNo As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_addNew_MaterialUsages"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@matCode"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = getMRN_MaterialsCode(materials)

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@prodnDate"
            p2.SqlDbType = SqlDbType.DateTime
            p2.Direction = ParameterDirection.Input
            p2.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@prodnShift"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = shift

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@qty"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.Float
            p4.Value = CDbl(qty)

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@usageCode"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.VarChar
            p5.Value = p1.Value & Format(CDate(prodnDate), "ddMMyy") & shift.Substring(0, 1)

            Dim p6 As New SqlClient.SqlParameter
            p6.ParameterName = "@mrnNo"
            p6.Direction = ParameterDirection.Input
            p6.SqlDbType = SqlDbType.VarChar
            p6.Value = mrnNo

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            daBuyer.Dispose()
            dsBuyer.Dispose()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub

    Public Sub updateMaterialUsages(ByVal prodnDate As String, ByVal shift As String, _
    ByVal materials As String, ByVal qty As String, ByVal mrnNo As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_update_MaterialUsages"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@matCode"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = getMRN_MaterialsCode(materials)

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@prodnDate"
            p2.SqlDbType = SqlDbType.DateTime
            p2.Direction = ParameterDirection.Input
            p2.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@prodnShift"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = shift

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@qty"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.Float
            p4.Value = CDbl(qty)

            Dim p6 As New SqlClient.SqlParameter
            p6.ParameterName = "@mrnNo"
            p6.Direction = ParameterDirection.Input
            p6.SqlDbType = SqlDbType.VarChar
            p6.Value = mrnNo

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p6)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Function getAllMaterialsByProdnDate(ByVal prodnDate As String, ByVal shift As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_displayAll_MaterialUsages"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            p1.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@prodnShift"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = shift

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getAllMaterialsUsage() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_displayAll_MaterialsUsage"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getMaterialsCost(ByVal prodnDate As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_display_MaterialsCost"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            If prodnDate = "" Then
                p1.Value = Format(getServerDateTime, getTimeFormat())
            Else
                p1.Value = Format(CDate(prodnDate), getTimeFormat())
            End If

            cmd.Parameters.Add(p1)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getMaterialCosts(ByVal prodnDate As String, ByVal materials As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getMaterialCosts"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            If prodnDate = "" Then
                p1.Value = Format(getServerDateTime, getTimeFormat())
            Else
                p1.Value = Format(CDate(prodnDate), getTimeFormat())
            End If

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@materials"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = materials

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As Double
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetDouble(0)
                Else
                    returnValue = 0
                End If
            Else
                returnValue = 0
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub saveNewMaterialCosts(ByVal prodnDate As String, ByVal material As String, ByVal cost As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_addNew_MaterialCosts"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@matCode"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = getMRN_MaterialsCode(material)

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@prodnDate"
            p2.SqlDbType = SqlDbType.DateTime
            p2.Direction = ParameterDirection.Input
            p2.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@cost"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.Float
            p3.Value = CDbl(cost)

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            daBuyer.Dispose()
            dsBuyer.Dispose()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub

    Public Sub updateMaterialCosts(ByVal prodnDate As String, ByVal material As String, ByVal cost As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_update_MaterialCosts"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@matCode"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = getMRN_MaterialsCode(material)

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@prodnDate"
            p2.SqlDbType = SqlDbType.DateTime
            p2.Direction = ParameterDirection.Input
            p2.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@cost"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.Float
            p3.Value = CDbl(cost)

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Function getMaterialUsagesDetail(ByVal prodnDate As String, ByVal shift As String, _
    ByVal materials As String, ByVal category As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getMaterialUsages"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            p1.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@shift"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = shift

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@materials"
            p3.SqlDbType = SqlDbType.VarChar
            p3.Direction = ParameterDirection.Input
            p3.Value = materials

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@category"
            p4.SqlDbType = SqlDbType.VarChar
            p4.Direction = ParameterDirection.Input
            p4.Value = category

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As Double
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetDouble(0)
                Else
                    returnValue = "0"
                End If
            Else
                returnValue = "0"
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getMaterialCosts(ByVal prodnDate As String, ByVal materials As String, ByVal category As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getMaterialCosts_byCategory"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            If prodnDate = "" Then
                p1.Value = Format(getServerDateTime, getTimeFormat())
            Else
                p1.Value = Format(CDate(prodnDate), getTimeFormat())
            End If

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@materials"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = materials

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@category"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = category

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As Double
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetDouble(0)
                Else
                    returnValue = 0
                End If
            Else
                returnValue = 0
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getUtilityExpenses(ByVal prodnDate As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_display_UtilityExpenses"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            If prodnDate = "" Then
                p1.Value = Format(getServerDateTime(), getTimeFormat())
            Else
                p1.Value = Format(CDate(prodnDate), getTimeFormat())
            End If

            cmd.Parameters.Add(p1)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getUtilityCosts(ByVal prodnDate As String, ByVal utility As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getUtilityCosts"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            If prodnDate = "" Then
                p1.Value = Format(getServerDateTime(), getTimeFormat())
            Else
                p1.Value = Format(CDate(prodnDate), getTimeFormat())
            End If

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@utility"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = utility

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)

            Dim dr As SqlClient.SqlDataReader
            dr = cmd.ExecuteReader

            Dim returnValue As Double
            If dr.Read Then
                If Not dr(0) Is DBNull.Value Then
                    returnValue = dr.GetDouble(0)
                Else
                    returnValue = 0
                End If
            Else
                returnValue = 0
            End If

            dr.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getFishDepositPerColdStorage(ByVal lot As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = getConnectionString()
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_displayAll_fishDepositPerCS"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@lot"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = lot

            cmd.Parameters.Add(p1)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("TRAKIM")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        End Try
    End Function

    Public Sub saveNewUtilityExpenses(ByVal utility As String, ByVal liters As String, ByVal price As String, _
    ByVal coverageDate As String, ByVal category As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_addNew_UtilityExpenses"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@utilDesc"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = utility

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@liters"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.Float
            p2.Value = CDbl(liters)

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@price"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.Float
            p3.Value = CDbl(price)

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@coverageDate"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.DateTime
            p4.Value = Format(CDate(coverageDate), getTimeFormat())

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@utilCategory"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.VarChar
            p5.Value = category

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            daBuyer.Dispose()
            dsBuyer.Dispose()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub

    Public Sub updateUtilityExpenses(ByVal utility As String, ByVal liters As String, ByVal price As String, _
    ByVal coverageDate As String, ByVal category As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_update_UtilityExpenses"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@utilDesc"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = utility

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@liters"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.Float
            p2.Value = CDbl(liters)

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@price"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.Float
            p3.Value = CDbl(price)

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@coverageDate"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.DateTime
            p4.Value = Format(CDate(coverageDate), getTimeFormat())

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@utilCategory"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.VarChar
            p5.Value = category

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Function getAllLaborRate() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_displayAll_LaborRate"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getLaborRate(ByVal prodnDate As String, ByVal hr As Boolean) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getLaborRate"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            If prodnDate = "" Then
                p1.Value = Format(getServerDateTime, getTimeFormat())
            Else
                p1.Value = Format(CDate(prodnDate), getTimeFormat())
            End If

            cmd.Parameters.Add(p1)

            Dim dr As SqlClient.SqlDataReader
            dr = cmd.ExecuteReader

            Dim returnValue As Double
            If dr.Read Then
                If Not dr(0) Is DBNull.Value Then
                    If hr Then
                        returnValue = dr.GetDouble(0)
                    Else
                        returnValue = dr.GetDouble(1)
                    End If
                Else
                    returnValue = 0
                End If
            Else
                returnValue = 0
            End If

            dr.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub saveNewLaborRate(ByVal prodnDate As String, ByVal hour As String, ByVal rate As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_addNew_LaborRate"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@revisionDate"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            p1.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@manHr"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.Float
            p2.Value = CDbl(hour)

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@rate"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.Float
            p3.Value = CDbl(rate)

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            daBuyer.Dispose()
            dsBuyer.Dispose()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub

    Public Sub updateLaborRate(ByVal prodnDate As String, ByVal hour As String, ByVal rate As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_update_LaborRate"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@revisionDate"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            p1.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@manHr"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.Float
            p2.Value = CDbl(hour)

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@rate"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.Float
            p3.Value = CDbl(rate)

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Function getFVLastUnloadingDate(ByVal lot As String) As Date
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getFVLastUnloadingDate"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@lot"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = lot

            cmd.Parameters.Add(p1)

            Dim dr As SqlClient.SqlDataReader
            dr = cmd.ExecuteReader

            Dim returnValue As Date
            If dr.Read Then
                If Not dr(0) Is DBNull.Value Then
                    returnValue = Format(dr.GetDateTime(0), getTimeFormat())
                Else
                    'returnValue = DBNull.Value  'Format(CDate("01/01/1901"), getTimeFormat())
                End If
            Else
                'returnValue = DBNull.Value ' Format(CDate("01/01/1901"), getTimeFormat())
            End If

            dr.Close()
            c.Close()

            Return Format(returnValue, getTimeFormat())
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub saveNewTmpPrintRoundFishInventory(ByVal fv As String, ByVal lot As String, _
     ByVal specie As String, ByVal size As String, ByVal nw As String, ByVal dateFrom As String, _
     ByVal dateTo As String, ByVal dateUnloaded As String, ByVal days As String, _
     ByVal dueDate As String, ByVal header As String, ByVal sublot As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_addNew_tmp_PrintRoundFishInventory2"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@fv"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = fv

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@lot"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = lot

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@specie"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = specie

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@size"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = size

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@nw"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.Float
            p5.Value = CDbl(nw)

            Dim p6 As New SqlClient.SqlParameter
            p6.ParameterName = "@dateFrom"
            p6.Direction = ParameterDirection.Input
            p6.SqlDbType = SqlDbType.DateTime
            p6.Value = Format(CDate(dateFrom), getTimeFormat())

            Dim p7 As New SqlClient.SqlParameter
            p7.ParameterName = "@dateTo"
            p7.Direction = ParameterDirection.Input
            p7.SqlDbType = SqlDbType.DateTime
            p7.Value = Format(CDate(dateTo), getTimeFormat())

            Dim p8 As New SqlClient.SqlParameter
            p8.ParameterName = "@dateUnloaded"
            p8.Direction = ParameterDirection.Input
            p8.SqlDbType = SqlDbType.DateTime
            p8.Value = Format(CDate(dateUnloaded), getTimeFormat())

            Dim p9 As New SqlClient.SqlParameter
            p9.ParameterName = "@days"
            p9.Direction = ParameterDirection.Input
            p9.SqlDbType = SqlDbType.Int
            p9.Value = CInt(days)

            Dim p10 As New SqlClient.SqlParameter
            p10.ParameterName = "@dueDate"
            p10.Direction = ParameterDirection.Input
            p10.SqlDbType = SqlDbType.DateTime
            p10.Value = Format(CDate(dueDate), getTimeFormat())

            Dim p11 As New SqlClient.SqlParameter
            p11.ParameterName = "@header"
            p11.Direction = ParameterDirection.Input
            p11.SqlDbType = SqlDbType.VarChar
            p11.Value = header

            Dim p12 As New SqlClient.SqlParameter
            p12.ParameterName = "@sublot"
            p12.Direction = ParameterDirection.Input
            p12.SqlDbType = SqlDbType.VarChar
            p12.Value = sublot

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)
            cmd.Parameters.Add(p7)
            cmd.Parameters.Add(p8)
            cmd.Parameters.Add(p9)
            cmd.Parameters.Add(p10)
            cmd.Parameters.Add(p11)
            cmd.Parameters.Add(p12)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            daBuyer.Dispose()
            dsBuyer.Dispose()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub

    Public Sub deleteTmpPrintRoundFishInventory()
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_delete_tmp_PrintRoundFishInventory"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Function getCurrentLotPerVessel(ByVal vessel As String) As String
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getCurrentLotPerVessel"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@fv"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = vessel

            cmd.Parameters.Add(p1)

            Dim dr As SqlClient.SqlDataReader
            dr = cmd.ExecuteReader

            Dim returnValue As String
            If dr.Read Then
                If Not dr(0) Is DBNull.Value Then
                    returnValue = dr.GetString(1)
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            dr.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getTotalTonnagePerSublot(ByVal lot As String, ByVal sublot As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getTotalTonnagePerSublot"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@lot"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = lot

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@sublot"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = sublot

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)

            Dim dr As SqlClient.SqlDataReader
            dr = cmd.ExecuteReader

            Dim returnValue As Double
            If dr.Read Then
                If Not dr(0) Is DBNull.Value Then
                    returnValue = dr.GetDouble(2)
                Else
                    returnValue = 0
                End If
            Else
                returnValue = 0
            End If

            dr.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getRoundFishAcceptance(ByVal dateFrom As String, ByVal dateTo As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_displayRoundFishAcceptance_byDate"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@dateFrom"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            If dateFrom = "" Then
                p1.Value = Format(getServerDateTime(), getTimeFormat())
            Else
                p1.Value = Format(CDate(dateFrom), getTimeFormat())
            End If

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@dateTo"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.DateTime
            If dateTo = "" Then
                p2.Value = Format(getServerDateTime(), getTimeFormat())
            Else
                p2.Value = Format(CDate(dateTo), getTimeFormat())
            End If

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getAmount_LotSpecieSize(ByVal specie As String, ByVal size As String, ByVal lot As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getAmount_SpecieAndSizePerLot"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@lot"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = lot

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@specie"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = specie

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@size"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = size

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)

            Dim returnValue As Double

            Dim dr As SqlClient.SqlDataReader
            dr = cmd.ExecuteReader
            If dr.Read Then
                If Not dr(0) Is DBNull.Value Then
                    returnValue = dr.GetDouble(0)
                Else
                    returnValue = 0
                End If
            Else
                returnValue = 0
            End If

            dr.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    ' Function GetExcelColumn - returns the column reference
    ' from an integer representing a column in a datagrid or dataset
    Function GetExcelColumn(ByVal col As Integer) As String
        Dim result As String
        Select Case col
            Case 0 ' first column
                result = "A"
            Case 1
                result = "B"
            Case 2
                result = "C"
            Case 3
                result = "D"
            Case 4
                result = "E"
            Case 5
                result = "F"
            Case 6
                result = "G"
            Case 7
                result = "H"
            Case 8
                result = "I"
            Case 9
                result = "J"
            Case 10
                result = "K"
            Case 11
                result = "L"
            Case 12
                result = "M"
            Case 13
                result = "N"
            Case 14
                result = "O"
            Case 15
                result = "P"
            Case 16
                result = "Q"
            Case 17
                result = "R"
            Case 18
                result = "S"
            Case 19
                result = "T"
            Case 20
                result = "U"
            Case 21
                result = "V"
            Case 22
                result = "W"
            Case 23
                result = "X"
            Case 24
                result = "Y"
            Case 25
                result = "Z"
        End Select
        Return result
    End Function

    Public Function validateLock_Lot(ByVal lot As String) As String
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_validateLockLot"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@lot"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = lot

            cmd.Parameters.Add(p1)

            Dim returnValue As String

            Dim dr As SqlClient.SqlDataReader
            dr = cmd.ExecuteReader
            If dr.Read Then
                If Not dr(0) Is DBNull.Value Then
                    returnValue = dr.GetString(0)
                Else
                    returnValue = "N"
                End If
            Else
                returnValue = "N"
            End If

            dr.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub updateFishLotLockStatus(ByVal lot As String, ByVal status As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_update_FishLotLockStatus"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@lot"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = lot

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@lock"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = status

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Function getSummaryCanneryAccepted(ByVal prodnDate As String, _
    ByVal shift As String, ByVal purpose As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_displayCanneryAcceptedSummary_byDate"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            If prodnDate = "" Then
                p1.Value = Format(getServerDateTime, getTimeFormat())
            Else
                p1.Value = Format(CDate(prodnDate), getTimeFormat())
            End If

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@shift"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = shift

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@purpose"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = purpose

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getAllOverHead() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_displayAll_OverHead"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub saveNewOH(ByVal prodnDate As String, ByVal category As String, ByVal cost As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_addNew_OverHead"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@ohDesc"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = category

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@ohCost"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.Float
            p2.Value = CDbl(cost)

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@coverageDate"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.DateTime
            If prodnDate = "" Then
                p3.Value = Format(getServerDateTime, getTimeFormat())
            Else
                p3.Value = Format(CDate(prodnDate), getTimeFormat())
            End If

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            daBuyer.Dispose()
            dsBuyer.Dispose()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub

    Public Sub updateOH(ByVal prodndate As String, ByVal category As String, ByVal cost As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_update_OverHead"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@ohDesc"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = category

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@ohCost"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.Float
            p2.Value = CDbl(cost)

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@coverageDate"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.DateTime
            If prodndate = "" Then
                p3.Value = Format(getServerDateTime, getTimeFormat())
            Else
                p3.Value = Format(CDate(prodndate), getTimeFormat())
            End If

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Function getOHCosts(ByVal prodndate As String, ByVal category As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getOverHeadCosts"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@ohDesc"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = category

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@coverageDate"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.DateTime
            If prodndate = "" Then
                p2.Value = Format(getServerDateTime, getTimeFormat())
            Else
                p2.Value = Format(CDate(prodndate), getTimeFormat())
            End If

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)

            Dim returnValue As Double

            Dim dr As SqlClient.SqlDataReader
            dr = cmd.ExecuteReader
            If dr.Read Then
                If Not dr(0) Is DBNull.Value Then
                    returnValue = dr.GetDouble(0)
                Else
                    returnValue = 0
                End If
            Else
                returnValue = 0
            End If

            dr.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getProductBOM(ByVal pCode As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getProduct_BOM"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@pCode"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = pCode

            cmd.Parameters.Add(p1)

            Dim returnValue As Double

            Dim dr As SqlClient.SqlDataReader
            dr = cmd.ExecuteReader
            If dr.Read Then
                If Not dr(0) Is DBNull.Value Then
                    returnValue = dr.GetDouble(0)
                Else
                    returnValue = 0
                End If
            Else
                returnValue = 0
            End If

            dr.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getProductionDetails(ByVal dateFrom As String, ByVal dateTo As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_display_ProductionDetailsSummary"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@dateFrom"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            If dateFrom = "" Then
                p1.Value = Format(getServerDateTime, getTimeFormat())
            Else
                p1.Value = Format(CDate(dateFrom), getTimeFormat())
            End If

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@dateTo"
            p2.SqlDbType = SqlDbType.DateTime
            p2.Direction = ParameterDirection.Input
            If dateTo = "" Then
                p2.Value = Format(getServerDateTime, getTimeFormat())
            Else
                p2.Value = Format(CDate(dateTo), getTimeFormat())
            End If

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getTotalRoundFishProcessed(ByVal dateFrom As String, ByVal dateTo As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getTotalRoundFishProcessed"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@dateFrom"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            If dateFrom = "" Then
                p1.Value = Format(getServerDateTime, getTimeFormat())
            Else
                p1.Value = Format(CDate(dateFrom), getTimeFormat())
            End If

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@dateTo"
            p2.SqlDbType = SqlDbType.DateTime
            p2.Direction = ParameterDirection.Input
            If dateTo = "" Then
                p2.Value = Format(getServerDateTime, getTimeFormat())
            Else
                p2.Value = Format(CDate(dateTo), getTimeFormat())
            End If

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)

            Dim dr As SqlClient.SqlDataReader
            dr = cmd.ExecuteReader

            Dim total As Double
            If dr.Read Then
                If Not dr(0) Is DBNull.Value Then
                    total = dr.GetDouble(0)
                Else
                    total = 0
                End If
            Else
                total = 0
            End If

            dr.Close()
            c.Close()

            Return total
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getMaterialsUsed(ByVal prodnDate As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getMaterialsUsed_ProdnDate"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            p1.Value = Format(CDate(prodnDate), getTimeFormat())

            cmd.Parameters.Add(p1)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function displayMaterialsUsed(ByVal prodnDate As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_displayMaterialsUsed_ProdnDate"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            p1.Value = Format(CDate(prodnDate), getTimeFormat())

            cmd.Parameters.Add(p1)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getProductCosting_MonthEnd(ByVal dateFrom As String, ByVal dateTo As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_displayAll_ProductCosting_MonthEnd"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@cs"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.Float
            p1.Value = 0

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@fw"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.Float
            p2.Value = 0

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@totalFWQty"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.Float
            p3.Value = 0

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@lot"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = ""

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@cosAmount"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.Float
            p5.Value = 0

            Dim p6 As New SqlClient.SqlParameter
            p6.ParameterName = "@julian"
            p6.Direction = ParameterDirection.Input
            p6.SqlDbType = SqlDbType.VarChar
            p6.Value = ""

            Dim p7 As New SqlClient.SqlParameter
            p7.ParameterName = "@oilBom"
            p7.Direction = ParameterDirection.Input
            p7.SqlDbType = SqlDbType.Float
            p7.Value = 0

            Dim p8 As New SqlClient.SqlParameter
            p8.ParameterName = "@oilUsage"
            p8.Direction = ParameterDirection.Input
            p8.SqlDbType = SqlDbType.Float
            p8.Value = 0

            Dim p9 As New SqlClient.SqlParameter
            p9.ParameterName = "@oilAmount"
            p9.Direction = ParameterDirection.Input
            p9.SqlDbType = SqlDbType.Float
            p9.Value = 0

            Dim p10 As New SqlClient.SqlParameter
            p10.ParameterName = "@aoBom"
            p10.Direction = ParameterDirection.Input
            p10.SqlDbType = SqlDbType.Float
            p10.Value = 0

            Dim p11 As New SqlClient.SqlParameter
            p11.ParameterName = "@aoUsage"
            p11.Direction = ParameterDirection.Input
            p11.SqlDbType = SqlDbType.Float
            p11.Value = 0

            Dim p12 As New SqlClient.SqlParameter
            p12.ParameterName = "@aoAmount"
            p12.Direction = ParameterDirection.Input
            p12.SqlDbType = SqlDbType.Float
            p12.Value = 0

            Dim p13 As New SqlClient.SqlParameter
            p13.ParameterName = "@brothBom"
            p13.Direction = ParameterDirection.Input
            p13.SqlDbType = SqlDbType.Float
            p13.Value = 0

            Dim p14 As New SqlClient.SqlParameter
            p14.ParameterName = "@brothUsage"
            p14.Direction = ParameterDirection.Input
            p14.SqlDbType = SqlDbType.Float
            p14.Value = 0

            Dim p15 As New SqlClient.SqlParameter
            p15.ParameterName = "@brothAmount"
            p15.Direction = ParameterDirection.Input
            p15.SqlDbType = SqlDbType.Float
            p15.Value = 0

            Dim p16 As New SqlClient.SqlParameter
            p16.ParameterName = "@cfBom"
            p16.Direction = ParameterDirection.Input
            p16.SqlDbType = SqlDbType.Float
            p16.Value = 0

            Dim p17 As New SqlClient.SqlParameter
            p17.ParameterName = "@cfUsage"
            p17.Direction = ParameterDirection.Input
            p17.SqlDbType = SqlDbType.Float
            p17.Value = 0

            Dim p18 As New SqlClient.SqlParameter
            p18.ParameterName = "@cfAmount"
            p18.Direction = ParameterDirection.Input
            p18.SqlDbType = SqlDbType.Float
            p18.Value = 0

            Dim p19 As New SqlClient.SqlParameter
            p19.ParameterName = "@cpBom"
            p19.Direction = ParameterDirection.Input
            p19.SqlDbType = SqlDbType.Float
            p19.Value = 0

            Dim p20 As New SqlClient.SqlParameter
            p20.ParameterName = "@cpUsage"
            p20.Direction = ParameterDirection.Input
            p20.SqlDbType = SqlDbType.Float
            p20.Value = 0

            Dim p21 As New SqlClient.SqlParameter
            p21.ParameterName = "@cpAmount"
            p21.Direction = ParameterDirection.Input
            p21.SqlDbType = SqlDbType.Float
            p21.Value = 0

            Dim p22 As New SqlClient.SqlParameter
            p22.ParameterName = "@curryBom"
            p22.Direction = ParameterDirection.Input
            p22.SqlDbType = SqlDbType.Float
            p22.Value = 0

            Dim p23 As New SqlClient.SqlParameter
            p23.ParameterName = "@curryUsage"
            p23.Direction = ParameterDirection.Input
            p23.SqlDbType = SqlDbType.Float
            p23.Value = 0

            Dim p24 As New SqlClient.SqlParameter
            p24.ParameterName = "@curryAmount"
            p24.Direction = ParameterDirection.Input
            p24.SqlDbType = SqlDbType.Float
            p24.Value = 0

            Dim p25 As New SqlClient.SqlParameter
            p25.ParameterName = "@msgBom"
            p25.Direction = ParameterDirection.Input
            p25.SqlDbType = SqlDbType.Float
            p25.Value = 0

            Dim p26 As New SqlClient.SqlParameter
            p26.ParameterName = "@msgUsage"
            p26.Direction = ParameterDirection.Input
            p26.SqlDbType = SqlDbType.Float
            p26.Value = 0

            Dim p27 As New SqlClient.SqlParameter
            p27.ParameterName = "@msgAmount"
            p27.Direction = ParameterDirection.Input
            p27.SqlDbType = SqlDbType.Float
            p27.Value = 0

            Dim p28 As New SqlClient.SqlParameter
            p28.ParameterName = "@saltBom"
            p28.Direction = ParameterDirection.Input
            p28.SqlDbType = SqlDbType.Float
            p28.Value = 0

            Dim p29 As New SqlClient.SqlParameter
            p29.ParameterName = "@saltUsage"
            p29.Direction = ParameterDirection.Input
            p29.SqlDbType = SqlDbType.Float
            p29.Value = 0

            Dim p30 As New SqlClient.SqlParameter
            p30.ParameterName = "@saltAmount"
            p30.Direction = ParameterDirection.Input
            p30.SqlDbType = SqlDbType.Float
            p30.Value = 0

            Dim p31 As New SqlClient.SqlParameter
            p31.ParameterName = "@totalIng"
            p31.Direction = ParameterDirection.Input
            p31.SqlDbType = SqlDbType.Float
            p31.Value = 0

            Dim p32 As New SqlClient.SqlParameter
            p32.ParameterName = "@totalIngUPC"
            p32.Direction = ParameterDirection.Input
            p32.SqlDbType = SqlDbType.Float
            p32.Value = 0

            Dim p33 As New SqlClient.SqlParameter
            p33.ParameterName = "@canBom"
            p33.Direction = ParameterDirection.Input
            p33.SqlDbType = SqlDbType.Float
            p33.Value = 0

            Dim p34 As New SqlClient.SqlParameter
            p34.ParameterName = "@canUsage"
            p34.Direction = ParameterDirection.Input
            p34.SqlDbType = SqlDbType.Float
            p34.Value = 0

            Dim p35 As New SqlClient.SqlParameter
            p35.ParameterName = "@canAmount"
            p35.Direction = ParameterDirection.Input
            p35.SqlDbType = SqlDbType.Float
            p35.Value = 0

            Dim p36 As New SqlClient.SqlParameter
            p36.ParameterName = "@oilVariance"
            p36.Direction = ParameterDirection.Input
            p36.SqlDbType = SqlDbType.Float
            p36.Value = 0

            Dim p37 As New SqlClient.SqlParameter
            p37.ParameterName = "@oilTotal"
            p37.Direction = ParameterDirection.Input
            p37.SqlDbType = SqlDbType.Float
            p37.Value = 0

            Dim p38 As New SqlClient.SqlParameter
            p38.ParameterName = "@aoVariance"
            p38.Direction = ParameterDirection.Input
            p38.SqlDbType = SqlDbType.Float
            p38.Value = 0

            Dim p39 As New SqlClient.SqlParameter
            p39.ParameterName = "@aoTotal"
            p39.Direction = ParameterDirection.Input
            p39.SqlDbType = SqlDbType.Float
            p39.Value = 0

            Dim p40 As New SqlClient.SqlParameter
            p40.ParameterName = "@brothVariance"
            p40.Direction = ParameterDirection.Input
            p40.SqlDbType = SqlDbType.Float
            p40.Value = 0

            Dim p41 As New SqlClient.SqlParameter
            p41.ParameterName = "@brothTotal"
            p41.Direction = ParameterDirection.Input
            p41.SqlDbType = SqlDbType.Float
            p41.Value = 0

            Dim p42 As New SqlClient.SqlParameter
            p42.ParameterName = "@cfVariance"
            p42.Direction = ParameterDirection.Input
            p42.SqlDbType = SqlDbType.Float
            p42.Value = 0

            Dim p43 As New SqlClient.SqlParameter
            p43.ParameterName = "@cfTotal"
            p43.Direction = ParameterDirection.Input
            p43.SqlDbType = SqlDbType.Float
            p43.Value = 0

            Dim p44 As New SqlClient.SqlParameter
            p44.ParameterName = "@cpVariance"
            p44.Direction = ParameterDirection.Input
            p44.SqlDbType = SqlDbType.Float
            p44.Value = 0

            Dim p45 As New SqlClient.SqlParameter
            p45.ParameterName = "@cpTotal"
            p45.Direction = ParameterDirection.Input
            p45.SqlDbType = SqlDbType.Float
            p45.Value = 0

            Dim p46 As New SqlClient.SqlParameter
            p46.ParameterName = "@curryVariance"
            p46.Direction = ParameterDirection.Input
            p46.SqlDbType = SqlDbType.Float
            p46.Value = 0

            Dim p47 As New SqlClient.SqlParameter
            p47.ParameterName = "@curryTotal"
            p47.Direction = ParameterDirection.Input
            p47.SqlDbType = SqlDbType.Float
            p47.Value = 0

            Dim p48 As New SqlClient.SqlParameter
            p48.ParameterName = "@msgVariance"
            p48.Direction = ParameterDirection.Input
            p48.SqlDbType = SqlDbType.Float
            p48.Value = 0

            Dim p49 As New SqlClient.SqlParameter
            p49.ParameterName = "@msgTotal"
            p49.Direction = ParameterDirection.Input
            p49.SqlDbType = SqlDbType.Float
            p49.Value = 0

            Dim p50 As New SqlClient.SqlParameter
            p50.ParameterName = "@saltVariance"
            p50.Direction = ParameterDirection.Input
            p50.SqlDbType = SqlDbType.Float
            p50.Value = 0

            Dim p51 As New SqlClient.SqlParameter
            p51.ParameterName = "@saltTotal"
            p51.Direction = ParameterDirection.Input
            p51.SqlDbType = SqlDbType.Float
            p51.Value = 0

            Dim p52 As New SqlClient.SqlParameter
            p52.ParameterName = "@canVariance"
            p52.Direction = ParameterDirection.Input
            p52.SqlDbType = SqlDbType.Float
            p52.Value = 0

            Dim p53 As New SqlClient.SqlParameter
            p53.ParameterName = "@canTotal"
            p53.Direction = ParameterDirection.Input
            p53.SqlDbType = SqlDbType.Float
            p53.Value = 0

            Dim p54 As New SqlClient.SqlParameter
            p54.ParameterName = "@endBom"
            p54.Direction = ParameterDirection.Input
            p54.SqlDbType = SqlDbType.Float
            p54.Value = 0

            Dim p55 As New SqlClient.SqlParameter
            p55.ParameterName = "@endUsage"
            p55.Direction = ParameterDirection.Input
            p55.SqlDbType = SqlDbType.Float
            p55.Value = 0

            Dim p56 As New SqlClient.SqlParameter
            p56.ParameterName = "@endAmount"
            p56.Direction = ParameterDirection.Input
            p56.SqlDbType = SqlDbType.Float
            p56.Value = 0

            Dim p57 As New SqlClient.SqlParameter
            p57.ParameterName = "@endVariance"
            p57.Direction = ParameterDirection.Input
            p57.SqlDbType = SqlDbType.Float
            p57.Value = 0

            Dim p58 As New SqlClient.SqlParameter
            p58.ParameterName = "@endTotal"
            p58.Direction = ParameterDirection.Input
            p58.SqlDbType = SqlDbType.Float
            p58.Value = 0

            Dim p59 As New SqlClient.SqlParameter
            p59.ParameterName = "@cartonBom"
            p59.Direction = ParameterDirection.Input
            p59.SqlDbType = SqlDbType.Float
            p59.Value = 0

            Dim p60 As New SqlClient.SqlParameter
            p60.ParameterName = "@cartonUsage"
            p60.Direction = ParameterDirection.Input
            p60.SqlDbType = SqlDbType.Float
            p60.Value = 0

            Dim p61 As New SqlClient.SqlParameter
            p61.ParameterName = "@cartonAmount"
            p61.Direction = ParameterDirection.Input
            p61.SqlDbType = SqlDbType.Float
            p61.Value = 0

            Dim p62 As New SqlClient.SqlParameter
            p62.ParameterName = "@cartonVariance"
            p62.Direction = ParameterDirection.Input
            p62.SqlDbType = SqlDbType.Float
            p62.Value = 0

            Dim p63 As New SqlClient.SqlParameter
            p63.ParameterName = "@cartonTotal"
            p63.Direction = ParameterDirection.Input
            p63.SqlDbType = SqlDbType.Float
            p63.Value = 0

            Dim p64 As New SqlClient.SqlParameter
            p64.ParameterName = "@labelBom"
            p64.Direction = ParameterDirection.Input
            p64.SqlDbType = SqlDbType.Float
            p64.Value = 0

            Dim p65 As New SqlClient.SqlParameter
            p65.ParameterName = "@labelUsage"
            p65.Direction = ParameterDirection.Input
            p65.SqlDbType = SqlDbType.Float
            p65.Value = 0

            Dim p66 As New SqlClient.SqlParameter
            p66.ParameterName = "@labelAmount"
            p66.Direction = ParameterDirection.Input
            p66.SqlDbType = SqlDbType.Float
            p66.Value = 0

            Dim p67 As New SqlClient.SqlParameter
            p67.ParameterName = "@labelVariance"
            p67.Direction = ParameterDirection.Input
            p67.SqlDbType = SqlDbType.Float
            p67.Value = 0

            Dim p68 As New SqlClient.SqlParameter
            p68.ParameterName = "@labelTotal"
            p68.Direction = ParameterDirection.Input
            p68.SqlDbType = SqlDbType.Float
            p68.Value = 0

            Dim p69 As New SqlClient.SqlParameter
            p69.ParameterName = "@totalPackaging"
            p69.Direction = ParameterDirection.Input
            p69.SqlDbType = SqlDbType.Float
            p69.Value = 0

            Dim p70 As New SqlClient.SqlParameter
            p70.ParameterName = "@prodnDate"
            p70.Direction = ParameterDirection.Input
            p70.SqlDbType = SqlDbType.DateTime
            p70.Value = Format(CDate(dateFrom), getTimeFormat())

            Dim p71 As New SqlClient.SqlParameter
            p71.ParameterName = "@shift"
            p71.Direction = ParameterDirection.Input
            p71.SqlDbType = SqlDbType.VarChar
            p71.Value = ""

            Dim p72 As New SqlClient.SqlParameter
            p72.ParameterName = "@laborUC"
            p72.Direction = ParameterDirection.Input
            p72.SqlDbType = SqlDbType.Float
            p72.Value = 0

            Dim p73 As New SqlClient.SqlParameter
            p73.ParameterName = "@laborAmount"
            p73.Direction = ParameterDirection.Input
            p73.SqlDbType = SqlDbType.Float
            p73.Value = 0

            Dim p74 As New SqlClient.SqlParameter
            p74.ParameterName = "@utilityUC"
            p74.Direction = ParameterDirection.Input
            p74.SqlDbType = SqlDbType.Float
            p74.Value = 0

            Dim p75 As New SqlClient.SqlParameter
            p75.ParameterName = "@utilityAmount"
            p75.Direction = ParameterDirection.Input
            p75.SqlDbType = SqlDbType.Float
            p75.Value = 0

            Dim p76 As New SqlClient.SqlParameter
            p76.ParameterName = "@ohUC"
            p76.Direction = ParameterDirection.Input
            p76.SqlDbType = SqlDbType.Float
            p76.Value = 0

            Dim p77 As New SqlClient.SqlParameter
            p77.ParameterName = "@ohAmount"
            p77.Direction = ParameterDirection.Input
            p77.SqlDbType = SqlDbType.Float
            p77.Value = 0

            Dim p78 As New SqlClient.SqlParameter
            p78.ParameterName = "@totalUC"
            p78.Direction = ParameterDirection.Input
            p78.SqlDbType = SqlDbType.Float
            p78.Value = 0

            Dim p79 As New SqlClient.SqlParameter
            p79.ParameterName = "@totalProductCost"
            p79.Direction = ParameterDirection.Input
            p79.SqlDbType = SqlDbType.Float
            p79.Value = 0

            Dim p80 As New SqlClient.SqlParameter
            p80.ParameterName = "@fishVariance"
            p80.Direction = ParameterDirection.Input
            p80.SqlDbType = SqlDbType.Float
            p80.Value = 0

            Dim p81 As New SqlClient.SqlParameter
            p81.ParameterName = "@fishTotal"
            p81.Direction = ParameterDirection.Input
            p81.SqlDbType = SqlDbType.Float
            p81.Value = 0

            Dim p82 As New SqlClient.SqlParameter
            p82.ParameterName = "@desc"
            p82.Direction = ParameterDirection.Input
            p82.SqlDbType = SqlDbType.VarChar
            p82.Value = ""

            Dim p83 As New SqlClient.SqlParameter
            p83.ParameterName = "@dateFrom"
            p83.Direction = ParameterDirection.Input
            p83.SqlDbType = SqlDbType.DateTime
            p83.Value = Format(CDate(dateFrom), getTimeFormat())

            Dim p84 As New SqlClient.SqlParameter
            p84.ParameterName = "@dateTo"
            p84.Direction = ParameterDirection.Input
            p84.SqlDbType = SqlDbType.DateTime
            p84.Value = Format(CDate(dateTo), getTimeFormat())

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)
            cmd.Parameters.Add(p7)
            cmd.Parameters.Add(p8)
            cmd.Parameters.Add(p9)
            cmd.Parameters.Add(p10)
            cmd.Parameters.Add(p11)
            cmd.Parameters.Add(p12)
            cmd.Parameters.Add(p13)
            cmd.Parameters.Add(p14)
            cmd.Parameters.Add(p15)
            cmd.Parameters.Add(p16)
            cmd.Parameters.Add(p17)
            cmd.Parameters.Add(p18)
            cmd.Parameters.Add(p19)
            cmd.Parameters.Add(p20)
            cmd.Parameters.Add(p21)
            cmd.Parameters.Add(p22)
            cmd.Parameters.Add(p23)
            cmd.Parameters.Add(p24)
            cmd.Parameters.Add(p25)
            cmd.Parameters.Add(p26)
            cmd.Parameters.Add(p27)
            cmd.Parameters.Add(p28)
            cmd.Parameters.Add(p29)
            cmd.Parameters.Add(p30)
            cmd.Parameters.Add(p31)
            cmd.Parameters.Add(p32)
            cmd.Parameters.Add(p33)
            cmd.Parameters.Add(p34)
            cmd.Parameters.Add(p35)
            cmd.Parameters.Add(p36)
            cmd.Parameters.Add(p37)
            cmd.Parameters.Add(p38)
            cmd.Parameters.Add(p39)
            cmd.Parameters.Add(p40)
            cmd.Parameters.Add(p41)
            cmd.Parameters.Add(p42)
            cmd.Parameters.Add(p43)
            cmd.Parameters.Add(p44)
            cmd.Parameters.Add(p45)
            cmd.Parameters.Add(p46)
            cmd.Parameters.Add(p47)
            cmd.Parameters.Add(p48)
            cmd.Parameters.Add(p49)
            cmd.Parameters.Add(p50)
            cmd.Parameters.Add(p51)
            cmd.Parameters.Add(p52)
            cmd.Parameters.Add(p53)
            cmd.Parameters.Add(p54)
            cmd.Parameters.Add(p55)
            cmd.Parameters.Add(p56)
            cmd.Parameters.Add(p57)
            cmd.Parameters.Add(p58)
            cmd.Parameters.Add(p59)
            cmd.Parameters.Add(p60)
            cmd.Parameters.Add(p61)
            cmd.Parameters.Add(p62)
            cmd.Parameters.Add(p63)
            cmd.Parameters.Add(p64)
            cmd.Parameters.Add(p65)
            cmd.Parameters.Add(p66)
            cmd.Parameters.Add(p67)
            cmd.Parameters.Add(p68)
            cmd.Parameters.Add(p69)
            cmd.Parameters.Add(p70)
            cmd.Parameters.Add(p71)
            cmd.Parameters.Add(p72)
            cmd.Parameters.Add(p73)
            cmd.Parameters.Add(p74)
            cmd.Parameters.Add(p75)
            cmd.Parameters.Add(p76)
            cmd.Parameters.Add(p77)
            cmd.Parameters.Add(p78)
            cmd.Parameters.Add(p79)
            cmd.Parameters.Add(p80)
            cmd.Parameters.Add(p81)
            cmd.Parameters.Add(p82)
            cmd.Parameters.Add(p83)
            cmd.Parameters.Add(p84)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getTotalTonnageWithdraw(ByVal dateFrom As String, ByVal dateTo As String, ByVal shift As String, _
    ByVal specie As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getTotalTonnageWithdraw_bySpecie_MonthEnd"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@dateFrom"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            p1.Value = Format(CDate(dateFrom), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@dateTo"
            p2.SqlDbType = SqlDbType.DateTime
            p2.Direction = ParameterDirection.Input
            p2.Value = Format(CDate(dateTo), getTimeFormat())

            'Dim p2 As New SqlClient.SqlParameter
            'p2.ParameterName = "@shift"
            'p2.SqlDbType = SqlDbType.VarChar
            'p2.Direction = ParameterDirection.Input
            'p2.Value = shift

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@specie"
            p3.SqlDbType = SqlDbType.VarChar
            p3.Direction = ParameterDirection.Input
            p3.Value = specie

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As Double
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetDouble(0)
                Else
                    returnValue = 0
                End If
            Else
                returnValue = 0
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getFishCost(ByVal dateFrom As String, ByVal dateTo As String, ByVal shift As String, _
    ByVal specie As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_computeFishCost_MonthEnd"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@dateFrom"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            p1.Value = Format(CDate(dateFrom), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@dateTo"
            p2.SqlDbType = SqlDbType.DateTime
            p2.Direction = ParameterDirection.Input
            p2.Value = Format(CDate(dateTo), getTimeFormat())

            'Dim p2 As New SqlClient.SqlParameter
            'p2.ParameterName = "@shift"
            'p2.SqlDbType = SqlDbType.VarChar
            'p2.Direction = ParameterDirection.Input
            'p2.Value = shift

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@specie"
            p3.SqlDbType = SqlDbType.VarChar
            p3.Direction = ParameterDirection.Input
            p3.Value = specie

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As Double

            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetDouble(2)
                Else
                    returnValue = 0
                End If
            Else
                returnValue = 0
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getAveConversion_byProdnDate(ByVal dateFrom As String, ByVal dateTo As String, ByVal shift As String, _
    ByVal specie As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_computeAverageConversion_byMonthEnd"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@dateFrom"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            p1.Value = Format(CDate(dateFrom), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@dateTo"
            p2.SqlDbType = SqlDbType.DateTime
            p2.Direction = ParameterDirection.Input
            p2.Value = Format(CDate(dateTo), getTimeFormat())

            'Dim p2 As New SqlClient.SqlParameter
            'p2.ParameterName = "@shift"
            'p2.SqlDbType = SqlDbType.VarChar
            'p2.Direction = ParameterDirection.Input
            'p2.Value = shift

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@specie"
            p3.SqlDbType = SqlDbType.VarChar
            p3.Direction = ParameterDirection.Input
            p3.Value = specie

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As Double

            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetDouble(0)
                Else
                    returnValue = 0
                End If
            Else
                returnValue = 0
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getSBDConversion(ByVal datefrom As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getSBDConversion"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@month"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = Format(CDate(datefrom), "MMMM")

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@year"
            p2.SqlDbType = SqlDbType.Float
            p2.Direction = ParameterDirection.Input
            p2.Value = Format(CDate(datefrom), "yyyy")

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As Double

            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetDouble(0)
                Else
                    returnValue = 0
                End If
            Else
                returnValue = 0
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getTotalMaterialUsagesDetail(ByVal dateFrom As String, ByVal dateTo As String, _
    ByVal materials As String, ByVal category As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getTotalMaterialUsages"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@dateFrom"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            p1.Value = Format(CDate(dateFrom), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@dateTo"
            p2.SqlDbType = SqlDbType.DateTime
            p2.Direction = ParameterDirection.Input
            p2.Value = Format(CDate(dateTo), getTimeFormat())

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@materials"
            p3.SqlDbType = SqlDbType.VarChar
            p3.Direction = ParameterDirection.Input
            p3.Value = materials

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@category"
            p4.SqlDbType = SqlDbType.VarChar
            p4.Direction = ParameterDirection.Input
            p4.Value = category

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As Double
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetDouble(0)
                Else
                    returnValue = "0"
                End If
            Else
                returnValue = "0"
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getAverageMaterialCosts(ByVal dateFrom As String, ByVal dateTo As String, ByVal materials As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getAverageMaterialCosts"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@dateFrom"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            p1.Value = Format(CDate(dateFrom), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@dateTo"
            p2.SqlDbType = SqlDbType.DateTime
            p2.Direction = ParameterDirection.Input
            p2.Value = Format(CDate(dateTo), getTimeFormat())

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@materials"
            p3.SqlDbType = SqlDbType.VarChar
            p3.Direction = ParameterDirection.Input
            p3.Value = materials

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As Double
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetDouble(0)
                Else
                    returnValue = 0
                End If
            Else
                returnValue = 0
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getAverageMaterialCosts(ByVal dateFrom As String, ByVal dateTo As String, ByVal materials As String, _
    ByVal category As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getAverageMaterialCosts_byCategory"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@dateFrom"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            p1.Value = Format(CDate(dateFrom), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@dateTo"
            p2.SqlDbType = SqlDbType.DateTime
            p2.Direction = ParameterDirection.Input
            p2.Value = Format(CDate(dateTo), getTimeFormat())

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@materials"
            p3.SqlDbType = SqlDbType.VarChar
            p3.Direction = ParameterDirection.Input
            p3.Value = materials

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@category"
            p4.SqlDbType = SqlDbType.VarChar
            p4.Direction = ParameterDirection.Input
            p4.Value = category

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As Double
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetDouble(0)
                Else
                    returnValue = 0
                End If
            Else
                returnValue = 0
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getTotalPackagingMaterialsUsage_Cartons_Labels(ByVal dateFrom As String, _
    ByVal dateTo As String, ByVal pCode As String, ByVal lot As String, ByVal materials As String) As Double
        'LOT NUMBER WAS IGNORED CONSIDERING THAT WE GET THE TOTAL CARTONS PER PRODUCTION DATE AND CODE
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getTotalPackagingMaterialsTotalUsage_Cartons_Labels"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@dateFrom"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            p1.Value = Format(CDate(dateFrom), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@dateTo"
            p2.SqlDbType = SqlDbType.DateTime
            p2.Direction = ParameterDirection.Input
            p2.Value = Format(CDate(dateTo), getTimeFormat())

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@pCode"
            p3.SqlDbType = SqlDbType.VarChar
            p3.Direction = ParameterDirection.Input
            p3.Value = pCode

            'Dim p4 As New SqlClient.SqlParameter
            'p4.ParameterName = "@lot"
            'p4.SqlDbType = SqlDbType.VarChar
            'p4.Direction = ParameterDirection.Input
            'p4.Value = lot

            'Dim p5 As New SqlClient.SqlParameter
            'p5.ParameterName = "@materials"
            'p5.SqlDbType = SqlDbType.VarChar
            'p5.Direction = ParameterDirection.Input
            'p5.Value = materials

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            'cmd.Parameters.Add(p4)
            'cmd.Parameters.Add(p5)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As Double
            'While drCode.Read
            '    If Not drCode(0) Is DBNull.Value Then
            '        returnValue += drCode.GetDouble(7)
            '    End If
            'End While
            'If materials = "Cartons" Then
            '    Dim tinsUsage, casesUsage, perCase As Double
            '    While drCode.Read
            '        tinsUsage += drCode.GetDouble(0)
            '        perCase = drCode.GetDouble(1)
            '        casesUsage += drCode.GetDouble(2)
            '    End While

            '    If perCase = 0 Then
            '        returnValue = 0
            '    Else
            '        returnValue = (tinsUsage / perCase) + casesUsage
            '    End If
            'Else
            '    If drCode.Read Then
            '        If Not drCode(0) Is DBNull.Value Then
            '            returnValue = drCode.GetDouble(0)
            '        Else
            '            returnValue = 0
            '        End If
            '    Else
            '        returnValue = 0
            '    End If
            'End If

            Dim tinsUsage, casesUsage, perCase As Double
            Dim totalTins As Double
            While drCode.Read
                totalTins += (drCode.GetDouble(0) * drCode.GetDouble(1) + drCode.GetDouble(2))

                casesUsage += drCode.GetDouble(0)
                perCase = drCode.GetDouble(1)
                'tinsUsage += drCode.GetDouble(2)
            End While

            If perCase = 0 Then
                returnValue = 0
            Else
                If materials = "Cartons" Then
                    'returnValue = casesUsage '+ (tinsUsage / perCase)
                    returnValue = totalTins / perCase
                Else
                    'returnValue = casesUsage * perCase '+ tinsUsage
                    returnValue = totalTins
                End If
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getTotalPackagingMaterialsUsage_Cartons_Labels(ByVal dateFrom As String, _
    ByVal dateTo As String, ByVal pCode As String, ByVal lot As String, ByVal materials As String, ByVal category As String) As Double
        'LOT NUMBER WAS IGNORED CONSIDERING THAT WE GET THE TOTAL CARTONS PER PRODUCTION DATE AND CODE
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getTotalPackagingMaterialsTotalUsage_Cartons_Labels_perProduct"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@dateFrom"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            p1.Value = Format(CDate(dateFrom), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@dateTo"
            p2.SqlDbType = SqlDbType.DateTime
            p2.Direction = ParameterDirection.Input
            p2.Value = Format(CDate(dateTo), getTimeFormat())

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@pCode"
            p3.SqlDbType = SqlDbType.VarChar
            p3.Direction = ParameterDirection.Input
            p3.Value = pCode

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@lot"
            p4.SqlDbType = SqlDbType.VarChar
            p4.Direction = ParameterDirection.Input
            p4.Value = lot

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@materials"
            p5.SqlDbType = SqlDbType.VarChar
            p5.Direction = ParameterDirection.Input
            p5.Value = materials

            Dim p6 As New SqlClient.SqlParameter
            p6.ParameterName = "@category"
            p6.SqlDbType = SqlDbType.VarChar
            p6.Direction = ParameterDirection.Input
            p6.Value = category

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As Double
            'While drCode.Read
            '    If Not drCode(0) Is DBNull.Value Then
            '        returnValue += drCode.GetDouble(7)
            '    End If
            'End While
            'If materials = "Cartons" Then
            '    Dim tinsUsage, casesUsage, perCase As Double
            '    While drCode.Read
            '        tinsUsage += drCode.GetDouble(0)
            '        perCase = drCode.GetDouble(1)
            '        casesUsage += drCode.GetDouble(2)
            '    End While

            '    If perCase = 0 Then
            '        returnValue = 0
            '    Else
            '        returnValue = (tinsUsage / perCase) + casesUsage
            '    End If
            'Else
            '    If drCode.Read Then
            '        If Not drCode(0) Is DBNull.Value Then
            '            returnValue = drCode.GetDouble(0)
            '        Else
            '            returnValue = 0
            '        End If
            '    Else
            '        returnValue = 0
            '    End If
            'End If

            'While drCode.Read
            '    If Not drCode(0) Is DBNull.Value Then
            '        returnValue += drCode.GetDouble(7)
            '    End If
            'End While
            If category = "Cartons" Or category = "Labels" Then
                Dim tinsUsage, casesUsage, perCase As Double
                While drCode.Read
                    casesUsage += drCode.GetDouble(0)
                    perCase = drCode.GetDouble(1)
                    tinsUsage += drCode.GetDouble(2)
                End While

                If perCase = 0 Then
                    returnValue = 0
                Else
                    If category = "Cartons" Then
                        returnValue = casesUsage + (tinsUsage / perCase)
                    Else
                        returnValue = casesUsage * perCase + tinsUsage
                    End If
                End If
            Else
                If drCode.Read Then
                    If Not drCode(0) Is DBNull.Value Then
                        returnValue = drCode.GetDouble(0)
                    Else
                        returnValue = 0
                    End If
                Else
                    returnValue = 0
                End If
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getPackagingMaterials_byMonthEnd(ByVal dateFrom As String, _
    ByVal dateTo As String, ByVal pCode As String, ByVal category As String) As String
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_extractPackagingMaterials_byMonthEnd"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@dateFrom"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            p1.Value = Format(CDate(dateFrom), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@dateTo"
            p2.SqlDbType = SqlDbType.DateTime
            p2.Direction = ParameterDirection.Input
            p2.Value = Format(CDate(dateTo), getTimeFormat())

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@pCode"
            p3.SqlDbType = SqlDbType.VarChar
            p3.Direction = ParameterDirection.Input
            p3.Value = pCode

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@category"
            p4.SqlDbType = SqlDbType.VarChar
            p4.Direction = ParameterDirection.Input
            p4.Value = category

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As String
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetString(0)
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getFishBinDepositedByLot(ByVal lot As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_display_FishBinDepositedByFishlot"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@lot"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = lot

            cmd.Parameters.Add(p1)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getManufacturingAbsorptionCost(ByVal dateFrom As String, ByVal dateTo As String, _
    ByVal category As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getManufacturingAbsorptionCost"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@dateFrom"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            p1.Value = Format(CDate(dateFrom), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@dateTo"
            p2.SqlDbType = SqlDbType.DateTime
            p2.Direction = ParameterDirection.Input
            p2.Value = Format(CDate(dateTo), getTimeFormat())

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@category"
            p3.SqlDbType = SqlDbType.VarChar
            p3.Direction = ParameterDirection.Input
            p3.Value = category

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As Double
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetDouble(0)
                Else
                    returnValue = 0
                End If
            Else
                returnValue = 0
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getCostData_FG_FL_monthEnd(ByVal dateFrom As String, ByVal dateTo As String, ByVal category As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim qry As String
            Select Case category
                Case "FG"
                    qry = "proc_extractProductCost_FG_monthEnd"
                Case "FL"
                    qry = "proc_extractProductCost_FL_monthEnd"
            End Select

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = qry
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@dateFrom"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            p1.Value = Format(CDate(dateFrom), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@dateTo"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.DateTime
            p2.Value = Format(CDate(dateTo), getTimeFormat())

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@desc"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = ""

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@accountCode"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            If category = "FG" Then
                p4.Value = "5043"
            Else
                p4.Value = "5042"
            End If

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@unitCost"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.Float
            p5.Value = 0

            Dim p6 As New SqlClient.SqlParameter
            p6.ParameterName = "@credit"
            p6.Direction = ParameterDirection.Input
            p6.SqlDbType = SqlDbType.Float
            p6.Value = 0

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getCostData_Materials_monthEnd(ByVal dateFrom As String, ByVal dateTo As String, ByVal category As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim qry As String
            Select Case category
                Case "packaging"
                    qry = "proc_extractProductCost_RM_Packaging_monthEnd"
                Case "ingredients"
                    qry = "proc_extractProductCost_RM_Ingredients_monthEnd"
            End Select

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = qry
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@dateFrom"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            p1.Value = Format(CDate(dateFrom), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@dateTo"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.DateTime
            p2.Value = Format(CDate(dateTo), getTimeFormat())

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@accountCode"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            If category = "packaging" Then
                p3.Value = "5060"
            Else
                p3.Value = "5051"
            End If

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@unitCost"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.Float
            p4.Value = 0

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@debit"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.Float
            p5.Value = 0

            Dim p6 As New SqlClient.SqlParameter
            p6.ParameterName = "@lot"
            p6.Direction = ParameterDirection.Input
            p6.SqlDbType = SqlDbType.VarChar
            p6.Value = ""

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getCostData_Specie_monthEnd(ByVal dateFrom As String, ByVal dateTo As String, ByVal category As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim qry As String
            Select Case category
                Case "SJ"
                    qry = "proc_extractProductCost_RM_SJ_monthEnd"
                Case "YF"
                    qry = "proc_extractProductCost_RM_YF_monthEnd"
                Case "BE"
                    qry = "proc_extractProductCost_RM_BE_monthEnd"
            End Select

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = qry
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@dateFrom"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            p1.Value = Format(CDate(dateFrom), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@dateTo"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.DateTime
            p2.Value = Format(CDate(dateTo), getTimeFormat())

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@accountCode"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = "5050"

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@unitCost"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.Float
            p4.Value = 0

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@debit"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.Float
            p5.Value = 0

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getProductFGOutput(ByVal dateFrom As String, ByVal dateTo As String, _
    ByVal pCode As String, ByVal materials As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getProductOutput_byMaterials"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@dateFrom"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            p1.Value = Format(CDate(dateFrom), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@dateTo"
            p2.SqlDbType = SqlDbType.DateTime
            p2.Direction = ParameterDirection.Input
            p2.Value = Format(CDate(dateTo), getTimeFormat())

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@pCode"
            p3.SqlDbType = SqlDbType.VarChar
            p3.Direction = ParameterDirection.Input
            p3.Value = pCode

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@materials"
            p4.SqlDbType = SqlDbType.VarChar
            p4.Direction = ParameterDirection.Input
            p4.Value = materials

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As Double
            While drCode.Read
                If Not drCode(0) Is DBNull.Value Then
                    returnValue += drCode.GetDouble(0)
                End If
            End While

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getFVSpoilages(ByVal lotNo As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_report_fishLotDefects"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@lotNo"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = lotNo

            cmd.Parameters.Add(p1)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getCOSPrice(ByVal cos As String, ByVal lot As String, _
    ByVal sublot As String, ByVal specie As String, ByVal size As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = getConnectionString()
            c.Open()

            'MsgBox(cos & " " & lot & " " & sublot & " " & specie & " " & size)

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getCOS_DetailsByPrice"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@cos"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = cos

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@lot"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = lot

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@sublot"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = sublot

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@specie"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = specie

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@size"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.VarChar
            p5.Value = size

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)

            Dim dr As SqlClient.SqlDataReader
            dr = cmd.ExecuteReader

            Dim price As Double
            If dr.Read Then
                If Not dr(0) Is DBNull.Value Then
                    price = dr.GetDouble(0)
                Else
                    price = 0
                End If
            Else
                price = 0
            End If

            dr.Close()
            c.Close()

            Return price
        Catch ex As Exception
            MsgBox(ex.Message)
        End Try
    End Function

    Public Function getFishLotThroughput(ByVal dateFrom As String, ByVal dateTo As String, _
    ByVal specie As String, ByVal size As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_display_fishLotThroughput"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@dateFrom"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            If dateFrom = "" Then
                p1.Value = Format(getServerDateTime, getTimeFormat())
            Else
                p1.Value = Format(CDate(dateFrom), getTimeFormat())
            End If

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@dateTo"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.DateTime
            If dateFrom = "" Then
                p2.Value = Format(getServerDateTime, getTimeFormat())
            Else
                p2.Value = Format(CDate(dateTo), getTimeFormat())
            End If

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@specie"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = specie

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@size"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = size

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getProductCode_Pallet(ByVal pallet As String) As String
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getPallet_ProductCode"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@pallet"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = pallet

            cmd.Parameters.Add(p1)

            Dim returnValue As String

            Dim dr As SqlClient.SqlDataReader
            dr = cmd.ExecuteReader
            If dr.Read Then
                If Not dr(0) Is DBNull.Value Then
                    returnValue = dr.GetString(0)
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            dr.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getPackingListsPreparation(ByVal dateFrom As String, ByVal dateTo As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_preparePackingLists"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@dateFrom"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            If dateFrom = "" Then
                p1.Value = Format(getServerDateTime, getTimeFormat())
            Else
                p1.Value = Format(CDate(dateFrom), getTimeFormat())
            End If

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@dateTo"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.DateTime
            If dateFrom = "" Then
                p2.Value = Format(getServerDateTime, getTimeFormat())
            Else
                p2.Value = Format(CDate(dateTo), getTimeFormat())
            End If

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getCOS_byLot(ByVal lot As String) As String
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getCOS_Lot"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@lot"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = lot

            cmd.Parameters.Add(p1)

            Dim returnValue As String

            Dim dr As SqlClient.SqlDataReader
            dr = cmd.ExecuteReader
            If dr.Read Then
                If Not dr(0) Is DBNull.Value Then
                    returnValue = dr.GetString(0)
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            dr.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getCOP(ByVal cos As String) As String
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getCOP_byCOS"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@cos"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = cos

            cmd.Parameters.Add(p1)

            Dim returnValue As String

            Dim dr As SqlClient.SqlDataReader
            dr = cmd.ExecuteReader
            If dr.Read Then
                If Not dr(0) Is DBNull.Value Then
                    returnValue = dr.GetString(0)
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            dr.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getCOP_Price(ByVal cop As String, ByVal specie As String, ByVal size As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getCOP_Price"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@cop"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = cop

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@specie"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = specie

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@size"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = size

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)

            Dim returnValue As Double

            Dim dr As SqlClient.SqlDataReader
            dr = cmd.ExecuteReader
            If dr.Read Then
                If Not dr(0) Is DBNull.Value Then
                    returnValue = dr.GetDouble(0)
                Else
                    returnValue = 0
                End If
            Else
                returnValue = 0
            End If

            dr.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getTotalLoinsProcessed_byLot(ByVal lot As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getTotalLoinsProcessed_byLot"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@lot"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = lot

            cmd.Parameters.Add(p1)

            Dim returnValue As Double

            Dim dr As SqlClient.SqlDataReader
            dr = cmd.ExecuteReader
            If dr.Read Then
                If Not dr(0) Is DBNull.Value Then
                    returnValue = dr.GetDouble(0)
                Else
                    returnValue = 0
                End If
            Else
                returnValue = 0
            End If

            dr.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getCOP_byMaxMT(ByVal cop As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getCOP_byMaxMT"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@cop"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = cop

            cmd.Parameters.Add(p1)

            Dim returnValue As Double

            Dim dr As SqlClient.SqlDataReader
            dr = cmd.ExecuteReader
            If dr.Read Then
                If Not dr(0) Is DBNull.Value Then
                    returnValue = dr.GetDouble(0)
                Else
                    returnValue = 0
                End If
            Else
                returnValue = 0
            End If

            dr.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getContainerVanStatus(ByVal status As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_displayAll_ContainerVanStatus"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@status"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = status

            cmd.Parameters.Add(p1)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function validateShipments(ByVal vessel As String, ByVal vesselNo As String, _
    ByVal departureDate As String, ByVal bol As String, ByVal destination As String) As Boolean
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getExistence_Shipment"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@vessel"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = vessel

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@vesselNo"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = vesselNo

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@departureDate"
            p3.SqlDbType = SqlDbType.DateTime
            p3.Direction = ParameterDirection.Input
            If departureDate = "" Then
                p3.Value = Format(getServerDateTime, getTimeFormat())
            Else
                p3.Value = Format(CDate(departureDate), getTimeFormat())
            End If

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@bol"
            p4.SqlDbType = SqlDbType.VarChar
            p4.Direction = ParameterDirection.Input
            p4.Value = bol

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@destination"
            p5.SqlDbType = SqlDbType.VarChar
            p5.Direction = ParameterDirection.Input
            p5.Value = destination

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(paramRecCount)

            Dim da As New SqlClient.SqlDataAdapter
            Dim ds As New DataSet("dbPPICIS")

            da.SelectCommand = cmd
            da.Fill(ds)

            If Val(cmd.Parameters("@recCount").Value) > 0 Then
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return True
            Else
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return False
            End If
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub saveNewFG_ShipmentDetails(ByVal shipmentCode As String, ByVal containerNo As String, ByVal sealNo As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_addnew_FGShipment_Details"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@shipmentCode"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = shipmentCode

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@loadingCode"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = getLoadingCode(containerNo, sealNo)

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            daBuyer.Dispose()
            dsBuyer.Dispose()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub

    Public Function getLoadingCode(ByVal containerNo As String, ByVal sealNo As String) As String
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getLoadingCode"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@cont#"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = containerNo

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@seal#"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = sealNo

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)

            Dim returnValue As String

            Dim dr As SqlClient.SqlDataReader
            dr = cmd.ExecuteReader
            If dr.Read Then
                If Not dr(0) Is DBNull.Value Then
                    returnValue = dr.GetString(0)
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            dr.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub updateContainerStatus(ByVal containerNo As String, ByVal sealNo As String, ByVal status As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_updateContainerStatus"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@loadingCode"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = getLoadingCode(containerNo, sealNo)

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@status"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = status

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Sub updateContainerShipmentStatus(ByVal containerNo As String, ByVal sealNo As String, ByVal status As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_updateContainerShipmentStatus"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@loadingCode"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = getLoadingCode(containerNo, sealNo)

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@status"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = status

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Function getAllFGShipments() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_displayAll_FG_Shipments"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getShipmentContainers(ByVal deptDate As String, ByVal vesselNo As String, ByVal destination As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_display_FG_ShipmentContainers"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            'Dim p1 As New SqlClient.SqlParameter
            'p1.ParameterName = "@shipmentCode"
            'p1.Direction = ParameterDirection.Input
            'p1.SqlDbType = SqlDbType.VarChar
            'p1.Value = shipmentCode

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@deptDate"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            If deptDate = "" Then
                p1.Value = Format(getServerDateTime, getTimeFormat())
            Else
                p1.Value = Format(CDate(deptDate), getTimeFormat())
            End If

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@vesselNo"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = vesselNo

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@destination"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = destination

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getShipmentContainers(ByVal deptDate As String, ByVal vesselNo As String, _
    ByVal bol As String, ByVal destination As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_display_FG_ShipmentContainers_byBOL"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            'Dim p1 As New SqlClient.SqlParameter
            'p1.ParameterName = "@shipmentCode"
            'p1.Direction = ParameterDirection.Input
            'p1.SqlDbType = SqlDbType.VarChar
            'p1.Value = shipmentCode

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@deptDate"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            If deptDate = "" Then
                p1.Value = Format(getServerDateTime, getTimeFormat())
            Else
                p1.Value = Format(CDate(deptDate), getTimeFormat())
            End If

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@vesselNo"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = vesselNo

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@bol"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = bol

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@destination"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = destination

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub updateFGShipment(ByVal shipmentCode As String, ByVal bol As String, ByVal destination As String, _
    ByVal vesselName As String, ByVal vesselNo As String, ByVal departDate As String, ByVal id As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_update_FG_Shipment"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@shipmentCode"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = shipmentCode

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@BOL"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = bol

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@destination"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = destination

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@vesselName"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = vesselName

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@vesselNo"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.VarChar
            p5.Value = vesselNo

            Dim p6 As New SqlClient.SqlParameter
            p6.ParameterName = "@departDate"
            p6.Direction = ParameterDirection.Input
            p6.SqlDbType = SqlDbType.DateTime
            If departDate = "" Then
                p6.value = Format(getServerDateTime(), getTimeFormat())
            Else
                p6.value = Format(CDate(departDate), getTimeFormat())
            End If

            Dim p7 As New SqlClient.SqlParameter
            p7.ParameterName = "@id"
            p7.Direction = ParameterDirection.Input
            p7.SqlDbType = SqlDbType.BigInt
            If id = "" Then
                p7.Value = 0
            Else
                p7.Value = CLng(id)
            End If

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)
            cmd.Parameters.Add(p7)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Sub deleteFGShipmentContainers(ByVal shipmentCode As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_delete_FG_ShipmentContainers"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@shipmentCode"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = shipmentCode

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Function getShipmentDetails_Vessel(ByVal departureDate As String, _
    ByVal category As String, Optional ByVal vessel As String = "") As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_displayVessel_byDate"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@departureDate"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            If departureDate = "" Then
                p1.Value = Format(getServerDateTime, getTimeFormat())
            Else
                p1.Value = Format(CDate(departureDate), getTimeFormat())
            End If

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@vessel"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = vessel

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@category"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = category

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getAllBuyer() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_dislayAll_Buyer"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getFGShipmentProduct(ByVal containerNo As String, ByVal sealNo As String) As String
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getShipmentProduct"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@cont#"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = containerNo

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@seal#"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = sealNo

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)

            Dim returnValue As String

            Dim dr As SqlClient.SqlDataReader
            dr = cmd.ExecuteReader
            If dr.Read Then
                If Not dr(0) Is DBNull.Value Then
                    returnValue = dr.GetString(0)
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            dr.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getFGShipmentDestination(ByVal deptDate As String, ByVal vessel As String) As String
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getShipmentDestination"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            'Dim p1 As New SqlClient.SqlParameter
            'p1.ParameterName = "@shipmentCode"
            'p1.Direction = ParameterDirection.Input
            'p1.SqlDbType = SqlDbType.VarChar
            'If deptDate = "" Then
            '    p1.Value = Format(getServerDateTime, "ddMMyy-") & vesselNo
            'Else
            '    p1.Value = Format(CDate(deptDate), "ddMMyy-") & vesselNo
            'End If

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@departureDate"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            If deptDate = "" Then
                p1.Value = Format(getServerDateTime, getTimeFormat())
            Else
                p1.Value = Format(CDate(deptDate), getTimeFormat())
            End If

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@vessel"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = vessel

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)

            Dim returnValue As String

            Dim dr As SqlClient.SqlDataReader
            dr = cmd.ExecuteReader
            If dr.Read Then
                If Not dr(0) Is DBNull.Value Then
                    returnValue = dr.GetString(0)
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            dr.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function validateInvoice(ByVal invoiceNo As String) As Boolean
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getExistence_InvoiceNo"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@invoiceNo"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = invoiceNo

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(paramRecCount)

            Dim da As New SqlClient.SqlDataAdapter
            Dim ds As New DataSet("dbPPICIS")

            da.SelectCommand = cmd
            da.Fill(ds)

            If Val(cmd.Parameters("@recCount").Value) > 0 Then
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return True
            Else
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return False
            End If
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub saveNewFGInvoice(ByVal invoiceNo As String, ByVal buyer As String, ByVal deptDate As String, ByVal vesselNo As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_addNew_FGInvoice"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@invoiceNo"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = invoiceNo

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@invoiceDate"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.DateTime
            p2.Value = Format(CDate(deptDate), getTimeFormat())

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@buyerCode"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = getBuyerCode(buyer)

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@shipmentCode"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = "" 'Format(CDate(deptDate), "ddMMyy-") & vesselNo

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            daBuyer.Dispose()
            dsBuyer.Dispose()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub

    Public Sub saveNewFGInvoiceDetails(ByVal invoiceNo As String, ByVal shipmentCode As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_addNew_FGInvoiceDetails"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@invoiceNo"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = invoiceNo

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@shipmentCode"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = shipmentCode

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            daBuyer.Dispose()
            dsBuyer.Dispose()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub

    Public Function getBuyerCode(ByVal buyer As String) As String
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getBuyerCode"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@buyer"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = buyer

            cmd.Parameters.Add(p1)

            Dim returnValue As String

            Dim dr As SqlClient.SqlDataReader
            dr = cmd.ExecuteReader
            If dr.Read Then
                If Not dr(0) Is DBNull.Value Then
                    returnValue = dr.GetString(0)
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            dr.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub updateFGInvoice(ByVal invoiceNo As String, ByVal buyer As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_update_FGInvoice"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@invoiceNo"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = invoiceNo

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@buyerCode"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = getBuyerCode(buyer)

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Function getAllFGInvoice() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_displayAll_FGInvoice"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getProductionOutput(ByVal dateFrom As String, ByVal dateTo As String, ByVal shift As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_display_ProductionOutput_forRecovery"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@dateFrom"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            If dateFrom = "" Then
                p1.Value = Format(getServerDateTime, getTimeFormat())
            Else
                p1.Value = Format(CDate(dateFrom), getTimeFormat())
            End If

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@dateTo"
            p2.SqlDbType = SqlDbType.DateTime
            p2.Direction = ParameterDirection.Input
            If dateTo = "" Then
                p2.Value = Format(getServerDateTime, getTimeFormat())
            Else
                p2.Value = Format(CDate(dateTo), getTimeFormat())
            End If

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@shift"
            p3.SqlDbType = SqlDbType.VarChar
            p3.Direction = ParameterDirection.Input
            p3.Value = shift

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getTotalRejects(ByVal dateFrom As String, ByVal dateTo As String, ByVal shift As String, ByVal specie As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getTotalFishRejects"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@dateFrom"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            If dateFrom = "" Then
                p1.Value = Format(getServerDateTime, getTimeFormat())
            Else
                p1.Value = Format(CDate(dateFrom), getTimeFormat())
            End If

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@dateTo"
            p2.SqlDbType = SqlDbType.DateTime
            p2.Direction = ParameterDirection.Input
            If dateTo = "" Then
                p2.Value = Format(getServerDateTime, getTimeFormat())
            Else
                p2.Value = Format(CDate(dateTo), getTimeFormat())
            End If

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@shift"
            p3.SqlDbType = SqlDbType.VarChar
            p3.Direction = ParameterDirection.Input
            p3.Value = shift

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@specie"
            p4.SqlDbType = SqlDbType.VarChar
            p4.Direction = ParameterDirection.Input
            p4.Value = specie

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)

            Dim dr As SqlClient.SqlDataReader
            dr = cmd.ExecuteReader

            Dim total As Double
            If dr.Read Then
                If Not dr(0) Is DBNull.Value Then
                    total = dr.GetDouble(0)
                Else
                    total = 0
                End If
            Else
                total = 0
            End If

            dr.Close()
            c.Close()

            Return total
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getTotalRoundFishProcessed(ByVal dateFrom As String, ByVal dateTo As String, _
    ByVal shift As String, ByVal specie As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getTotalRoundFishProcessed_bySpecie"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@dateFrom"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            If dateFrom = "" Then
                p1.Value = Format(getServerDateTime, getTimeFormat())
            Else
                p1.Value = Format(CDate(dateFrom), getTimeFormat())
            End If

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@dateTo"
            p2.SqlDbType = SqlDbType.DateTime
            p2.Direction = ParameterDirection.Input
            If dateTo = "" Then
                p2.Value = Format(getServerDateTime, getTimeFormat())
            Else
                p2.Value = Format(CDate(dateTo), getTimeFormat())
            End If

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@shift"
            p3.SqlDbType = SqlDbType.VarChar
            p3.Direction = ParameterDirection.Input
            p3.Value = shift

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@specie"
            p4.SqlDbType = SqlDbType.VarChar
            p4.Direction = ParameterDirection.Input
            p4.Value = specie

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)

            Dim dr As SqlClient.SqlDataReader
            dr = cmd.ExecuteReader

            Dim total As Double
            If dr.Read Then
                If Not dr(0) Is DBNull.Value Then
                    total = dr.GetDouble(0)
                Else
                    total = 0
                End If
            Else
                total = 0
            End If

            dr.Close()
            c.Close()

            Return total
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getFishRejects_byDefects(ByVal lotNo As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_report_fishLotDefects_byDefects"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@lotNo"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = lotNo

            cmd.Parameters.Add(p1)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getLotFishRejectDetails(ByVal lotNo As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_report_lotRejectDetails"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@lot"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = lotNo

            cmd.Parameters.Add(p1)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getFishRackQuantity(ByVal prodnDate As String, ByVal shift As String, ByVal specie As String, ByVal size As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getFishRackQuantity"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            If prodnDate = "" Then
                p1.Value = Format(getServerDateTime, getTimeFormat())
            Else
                p1.Value = Format(CDate(prodnDate), getTimeFormat())
            End If

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@shift"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = shift

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@specie"
            p3.SqlDbType = SqlDbType.VarChar
            p3.Direction = ParameterDirection.Input
            p3.Value = specie

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@size"
            p4.SqlDbType = SqlDbType.VarChar
            p4.Direction = ParameterDirection.Input
            p4.Value = size

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)

            Dim dr As SqlClient.SqlDataReader
            dr = cmd.ExecuteReader

            Dim total As Double
            If dr.Read Then
                If Not dr(0) Is DBNull.Value Then
                    total = dr.GetDouble(0)
                Else
                    total = 0
                End If
            Else
                total = 0
            End If

            dr.Close()
            c.Close()

            Return total
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getFishRackDetails(ByVal prodnDate As String, ByVal shift As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_display_FishRackQuantity"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            If prodnDate = "" Then
                p1.Value = Format(getServerDateTime, getTimeFormat())
            Else
                p1.Value = Format(CDate(prodnDate), getTimeFormat())
            End If

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@shift"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = shift

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub saveNewFishRack(ByVal prodnDate As String, ByVal shift As String, _
    ByVal specie As String, ByVal size As String, ByVal qty As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_addNew_FishRackQuantity"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            p1.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@shift"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = shift

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@specieCode"
            p3.SqlDbType = SqlDbType.VarChar
            p3.Direction = ParameterDirection.Input
            p3.Value = getSpecieCode(specie)

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@sizeCode"
            p4.SqlDbType = SqlDbType.VarChar
            p4.Direction = ParameterDirection.Input
            p4.Value = getFishSizeCodeByRange(size)

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@qty"
            p5.SqlDbType = SqlDbType.Float
            p5.Direction = ParameterDirection.Input
            p5.Value = CDbl(qty)

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            daBuyer.Dispose()
            dsBuyer.Dispose()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub

    Public Sub updateFishRack(ByVal prodnDate As String, ByVal shift As String, _
    ByVal specie As String, ByVal size As String, ByVal qty As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_update_FishRackQuantity"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            p1.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@shift"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = shift

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@specieCode"
            p3.SqlDbType = SqlDbType.VarChar
            p3.Direction = ParameterDirection.Input
            p3.Value = getSpecieCode(specie)

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@sizeCode"
            p4.SqlDbType = SqlDbType.VarChar
            p4.Direction = ParameterDirection.Input
            p4.Value = getFishSizeCodeByRange(size)

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@qty"
            p5.SqlDbType = SqlDbType.Float
            p5.Direction = ParameterDirection.Input
            p5.Value = CDbl(qty)

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Function getFishDetails_byWithdrawn(ByVal prodnDate As String, ByVal shift As String, Optional ByVal specie As String = "", _
      Optional ByVal bySpecie As String = "") As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_display_FishDetails_byWithdrawn"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            If prodnDate = "" Then
                p1.Value = Format(getServerDateTime, getTimeFormat())
            Else
                p1.Value = Format(CDate(prodnDate), getTimeFormat())
            End If

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@bySpecie"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = bySpecie

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@specie"
            p3.SqlDbType = SqlDbType.VarChar
            p3.Direction = ParameterDirection.Input
            p3.Value = specie

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@shift"
            p4.SqlDbType = SqlDbType.VarChar
            p4.Direction = ParameterDirection.Input
            p4.Value = shift

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getFishRackQuantity(ByVal dateFrom As String, ByVal dateTo As String, ByVal specie As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getFishRackQuantity_byDate"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@dateFrom"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            If dateFrom = "" Then
                p1.Value = Format(getServerDateTime, getTimeFormat())
            Else
                p1.Value = Format(CDate(dateFrom), getTimeFormat())
            End If

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@dateTo"
            p2.SqlDbType = SqlDbType.DateTime
            p2.Direction = ParameterDirection.Input
            If dateTo = "" Then
                p2.Value = Format(getServerDateTime, getTimeFormat())
            Else
                p2.Value = Format(CDate(dateTo), getTimeFormat())
            End If

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@specie"
            p3.SqlDbType = SqlDbType.VarChar
            p3.Direction = ParameterDirection.Input
            p3.Value = specie

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)

            Dim dr As SqlClient.SqlDataReader
            dr = cmd.ExecuteReader

            Dim total As Double
            If dr.Read Then
                If Not dr(0) Is DBNull.Value Then
                    total = dr.GetDouble(0)
                Else
                    total = 0
                End If
            Else
                total = 0
            End If

            dr.Close()
            c.Close()

            Return total
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getMatrixCurve(ByVal exp As Boolean, ByVal specie As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getMatrixCurve"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@specie"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = specie

            cmd.Parameters.Add(p1)

            Dim dr As SqlClient.SqlDataReader
            dr = cmd.ExecuteReader

            Dim returnValue As Double
            If dr.Read Then
                If Not dr(0) Is DBNull.Value Then
                    If exp Then
                        returnValue = dr.GetDouble(1)
                    Else
                        returnValue = dr.GetDouble(0)
                    End If
                Else
                    returnValue = 0
                End If
            Else
                returnValue = 0
            End If

            dr.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub saveNewPrintProductionReport(ByVal totalRound As String, ByVal totalRoundS As String, ByVal totalRoundY As String, _
    ByVal totalRoundB As String, ByVal aveFS As String, ByVal aveFSS As String, ByVal aveFSY As String, ByVal aveFSB As String, _
    ByVal totalReject As String, ByVal totalRejectS As String, ByVal totalRejectY As String, ByVal totalRejectB As String, _
    ByVal rejP As String, ByVal rejPS As String, ByVal rejPY As String, ByVal rejPB As String, ByVal totalCurve As String, _
    ByVal totalCurveS As String, ByVal totalCurveY As String, ByVal totalCurveB As String, ByVal loinMeat As String, _
    ByVal loinMeatS As String, ByVal loinMeatY As String, ByVal loinMeatB As String, ByVal loinP As String, _
    ByVal loinPS As String, ByVal loinPY As String, ByVal loinPB As String, ByVal wm As String, ByVal wmS As String, _
    ByVal wmY As String, ByVal wmB As String, ByVal wmP As String, ByVal wmPS As String, ByVal wmPY As String, ByVal wmPB As String, _
    ByVal dm As String, ByVal dmS As String, ByVal dmY As String, ByVal dmB As String, ByVal dmP As String, _
    ByVal dmPS As String, ByVal dmPY As String, ByVal dmPB As String, ByVal totalWMRec As String, ByVal totalDMRec As String, _
    ByVal dateFrom As String, ByVal dateTo As String, ByVal weekend As String, ByVal aveFSQty As String, _
    ByVal aveFSSQty As String, ByVal aveFSYQty As String, ByVal aveFSBQty As String, ByVal totalRoundA As String, _
    ByVal aveFSA As String, ByVal totalRejectA As String, ByVal rejPA As String, ByVal totalCurveA As String, ByVal loinMeatA As String, _
    ByVal loinPA As String, ByVal wmA As String, ByVal wmPA As String, ByVal dmA As String, ByVal dmPA As String, ByVal aveFSAQty As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_addNew_PrintProductionReport2"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@totalRound"
            p1.SqlDbType = SqlDbType.Float
            p1.Direction = ParameterDirection.Input
            p1.Value = totalRound

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@totalRoundS"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.Float
            p2.Value = totalRoundS

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@totalRoundY"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.Float
            p3.Value = totalRoundY

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@totalRoundB"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.Float
            p4.Value = totalRoundB

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@aveFS"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.Float
            p5.Value = aveFS

            Dim p6 As New SqlClient.SqlParameter
            p6.ParameterName = "@aveFSS"
            p6.Direction = ParameterDirection.Input
            p6.SqlDbType = SqlDbType.Float
            p6.Value = aveFSS

            Dim p7 As New SqlClient.SqlParameter
            p7.ParameterName = "@aveFSY"
            p7.Direction = ParameterDirection.Input
            p7.SqlDbType = SqlDbType.Float
            p7.Value = aveFSY

            Dim p8 As New SqlClient.SqlParameter
            p8.ParameterName = "@aveFSB"
            p8.Direction = ParameterDirection.Input
            p8.SqlDbType = SqlDbType.Float
            p8.Value = aveFSB

            Dim p9 As New SqlClient.SqlParameter
            p9.ParameterName = "@totalReject"
            p9.Direction = ParameterDirection.Input
            p9.SqlDbType = SqlDbType.Float
            p9.Value = totalReject

            Dim p10 As New SqlClient.SqlParameter
            p10.ParameterName = "@totalRejectS"
            p10.Direction = ParameterDirection.Input
            p10.SqlDbType = SqlDbType.Float
            p10.Value = totalRejectS

            Dim p11 As New SqlClient.SqlParameter
            p11.ParameterName = "@totalRejectY"
            p11.Direction = ParameterDirection.Input
            p11.SqlDbType = SqlDbType.Float
            p11.Value = totalRejectY

            Dim p12 As New SqlClient.SqlParameter
            p12.ParameterName = "@totalRejectB"
            p12.Direction = ParameterDirection.Input
            p12.SqlDbType = SqlDbType.Float
            p12.Value = totalRejectB

            Dim p13 As New SqlClient.SqlParameter
            p13.ParameterName = "@rejP"
            p13.Direction = ParameterDirection.Input
            p13.SqlDbType = SqlDbType.Float
            p13.Value = rejP

            Dim p14 As New SqlClient.SqlParameter
            p14.ParameterName = "@rejPS"
            p14.Direction = ParameterDirection.Input
            p14.SqlDbType = SqlDbType.Float
            p14.Value = rejPS

            Dim p15 As New SqlClient.SqlParameter
            p15.ParameterName = "@rejPY"
            p15.Direction = ParameterDirection.Input
            p15.SqlDbType = SqlDbType.Float
            p15.Value = rejPY

            Dim p16 As New SqlClient.SqlParameter
            p16.ParameterName = "@rejPB"
            p16.Direction = ParameterDirection.Input
            p16.SqlDbType = SqlDbType.Float
            p16.Value = rejPB

            Dim p17 As New SqlClient.SqlParameter
            p17.ParameterName = "@totalCurve"
            p17.Direction = ParameterDirection.Input
            p17.SqlDbType = SqlDbType.Float
            p17.Value = totalCurve

            Dim p18 As New SqlClient.SqlParameter
            p18.ParameterName = "@totalCurveS"
            p18.Direction = ParameterDirection.Input
            p18.SqlDbType = SqlDbType.Float
            p18.Value = totalCurveS

            Dim p19 As New SqlClient.SqlParameter
            p19.ParameterName = "@totalCurveY"
            p19.Direction = ParameterDirection.Input
            p19.SqlDbType = SqlDbType.Float
            p19.Value = totalCurveY

            Dim p20 As New SqlClient.SqlParameter
            p20.ParameterName = "@totalCurveB"
            p20.Direction = ParameterDirection.Input
            p20.SqlDbType = SqlDbType.Float
            p20.Value = totalCurveB

            Dim p21 As New SqlClient.SqlParameter
            p21.ParameterName = "@loinMeat"
            p21.Direction = ParameterDirection.Input
            p21.SqlDbType = SqlDbType.Float
            p21.Value = loinMeat

            Dim p22 As New SqlClient.SqlParameter
            p22.ParameterName = "@loinMeatS"
            p22.Direction = ParameterDirection.Input
            p22.SqlDbType = SqlDbType.Float
            p22.Value = loinMeatS

            Dim p23 As New SqlClient.SqlParameter
            p23.ParameterName = "@loinMeatY"
            p23.Direction = ParameterDirection.Input
            p23.SqlDbType = SqlDbType.Float
            p23.Value = loinMeatY

            Dim p24 As New SqlClient.SqlParameter
            p24.ParameterName = "@loinMeatB"
            p24.Direction = ParameterDirection.Input
            p24.SqlDbType = SqlDbType.Float
            p24.Value = loinMeatB

            Dim p25 As New SqlClient.SqlParameter
            p25.ParameterName = "@loinP"
            p25.Direction = ParameterDirection.Input
            p25.SqlDbType = SqlDbType.Float
            p25.Value = loinP

            Dim p26 As New SqlClient.SqlParameter
            p26.ParameterName = "@loinPS"
            p26.Direction = ParameterDirection.Input
            p26.SqlDbType = SqlDbType.Float
            p26.Value = loinPS

            Dim p27 As New SqlClient.SqlParameter
            p27.ParameterName = "@loinPY"
            p27.Direction = ParameterDirection.Input
            p27.SqlDbType = SqlDbType.Float
            p27.Value = loinPY

            Dim p28 As New SqlClient.SqlParameter
            p28.ParameterName = "@loinPB"
            p28.Direction = ParameterDirection.Input
            p28.SqlDbType = SqlDbType.Float
            p28.Value = loinPB

            Dim p29 As New SqlClient.SqlParameter
            p29.ParameterName = "@wm"
            p29.Direction = ParameterDirection.Input
            p29.SqlDbType = SqlDbType.Float
            p29.Value = wm

            Dim p30 As New SqlClient.SqlParameter
            p30.ParameterName = "@wmS"
            p30.Direction = ParameterDirection.Input
            p30.SqlDbType = SqlDbType.Float
            p30.Value = wmS

            Dim p31 As New SqlClient.SqlParameter
            p31.ParameterName = "@wmY"
            p31.Direction = ParameterDirection.Input
            p31.SqlDbType = SqlDbType.Float
            p31.Value = wmY

            Dim p32 As New SqlClient.SqlParameter
            p32.ParameterName = "@wmB"
            p32.Direction = ParameterDirection.Input
            p32.SqlDbType = SqlDbType.Float
            p32.Value = wmB

            Dim p33 As New SqlClient.SqlParameter
            p33.ParameterName = "@wmP"
            p33.Direction = ParameterDirection.Input
            p33.SqlDbType = SqlDbType.Float
            p33.Value = wmP

            Dim p34 As New SqlClient.SqlParameter
            p34.ParameterName = "@wmPS"
            p34.Direction = ParameterDirection.Input
            p34.SqlDbType = SqlDbType.Float
            p34.Value = wmPS

            Dim p35 As New SqlClient.SqlParameter
            p35.ParameterName = "@wmPY"
            p35.Direction = ParameterDirection.Input
            p35.SqlDbType = SqlDbType.Float
            p35.Value = wmPY

            Dim p36 As New SqlClient.SqlParameter
            p36.ParameterName = "@wmPB"
            p36.Direction = ParameterDirection.Input
            p36.SqlDbType = SqlDbType.Float
            p36.Value = wmPB

            Dim p37 As New SqlClient.SqlParameter
            p37.ParameterName = "@dm"
            p37.Direction = ParameterDirection.Input
            p37.SqlDbType = SqlDbType.Float
            p37.Value = dm

            Dim p38 As New SqlClient.SqlParameter
            p38.ParameterName = "@dmS"
            p38.Direction = ParameterDirection.Input
            p38.SqlDbType = SqlDbType.Float
            p38.Value = dmS

            Dim p39 As New SqlClient.SqlParameter
            p39.ParameterName = "@dmY"
            p39.Direction = ParameterDirection.Input
            p39.SqlDbType = SqlDbType.Float
            p39.Value = dmY

            Dim p40 As New SqlClient.SqlParameter
            p40.ParameterName = "@dmB"
            p40.Direction = ParameterDirection.Input
            p40.SqlDbType = SqlDbType.Float
            p40.Value = dmB

            Dim p41 As New SqlClient.SqlParameter
            p41.ParameterName = "@dmP"
            p41.Direction = ParameterDirection.Input
            p41.SqlDbType = SqlDbType.Float
            p41.Value = dmP

            Dim p42 As New SqlClient.SqlParameter
            p42.ParameterName = "@dmPS"
            p42.Direction = ParameterDirection.Input
            p42.SqlDbType = SqlDbType.Float
            p42.Value = dmPS

            Dim p43 As New SqlClient.SqlParameter
            p43.ParameterName = "@dmPY"
            p43.Direction = ParameterDirection.Input
            p43.SqlDbType = SqlDbType.Float
            p43.Value = dmPY

            Dim p44 As New SqlClient.SqlParameter
            p44.ParameterName = "@dmPB"
            p44.Direction = ParameterDirection.Input
            p44.SqlDbType = SqlDbType.Float
            p44.Value = dmPB

            Dim p45 As New SqlClient.SqlParameter
            p45.ParameterName = "@totalWMRec"
            p45.Direction = ParameterDirection.Input
            p45.SqlDbType = SqlDbType.Float
            p45.Value = totalWMRec

            Dim p46 As New SqlClient.SqlParameter
            p46.ParameterName = "@totalDMRec"
            p46.Direction = ParameterDirection.Input
            p46.SqlDbType = SqlDbType.Float
            p46.Value = totalDMRec

            Dim p47 As New SqlClient.SqlParameter
            p47.ParameterName = "@prodnDate"
            p47.Direction = ParameterDirection.Input
            p47.SqlDbType = SqlDbType.DateTime
            p47.Value = Format(CDate(dateFrom), getTimeFormat())

            Dim p48 As New SqlClient.SqlParameter
            p48.ParameterName = "@dateTo"
            p48.Direction = ParameterDirection.Input
            p48.SqlDbType = SqlDbType.DateTime
            p48.Value = Format(CDate(dateTo), getTimeFormat())

            Dim p49 As New SqlClient.SqlParameter
            p49.ParameterName = "@weekend"
            p49.Direction = ParameterDirection.Input
            p49.SqlDbType = SqlDbType.VarChar
            p49.Value = weekend

            Dim p50 As New SqlClient.SqlParameter
            p50.ParameterName = "@aveFSQty"
            p50.Direction = ParameterDirection.Input
            p50.SqlDbType = SqlDbType.Float
            p50.Value = aveFSQty

            Dim p51 As New SqlClient.SqlParameter
            p51.ParameterName = "@aveFSSQty"
            p51.Direction = ParameterDirection.Input
            p51.SqlDbType = SqlDbType.Float
            p51.Value = aveFSSQty

            Dim p52 As New SqlClient.SqlParameter
            p52.ParameterName = "@aveFSYQty"
            p52.Direction = ParameterDirection.Input
            p52.SqlDbType = SqlDbType.Float
            p52.Value = aveFSYQty

            Dim p53 As New SqlClient.SqlParameter
            p53.ParameterName = "@aveFSBQty"
            p53.Direction = ParameterDirection.Input
            p53.SqlDbType = SqlDbType.Float
            p53.Value = aveFSBQty

            Dim p54 As New SqlClient.SqlParameter
            p54.ParameterName = "@totalRoundA"
            p54.Direction = ParameterDirection.Input
            p54.SqlDbType = SqlDbType.Float
            p54.Value = totalRoundA

            Dim p55 As New SqlClient.SqlParameter
            p55.ParameterName = "@aveFSA"
            p55.Direction = ParameterDirection.Input
            p55.SqlDbType = SqlDbType.Float
            p55.Value = aveFSA

            Dim p56 As New SqlClient.SqlParameter
            p56.ParameterName = "@totalRejectA"
            p56.Direction = ParameterDirection.Input
            p56.SqlDbType = SqlDbType.Float
            p56.Value = totalRejectA

            Dim p57 As New SqlClient.SqlParameter
            p57.ParameterName = "@rejPA"
            p57.Direction = ParameterDirection.Input
            p57.SqlDbType = SqlDbType.Float
            p57.Value = rejPA

            Dim p58 As New SqlClient.SqlParameter
            p58.ParameterName = "@totalCurveA"
            p58.Direction = ParameterDirection.Input
            p58.SqlDbType = SqlDbType.Float
            p58.Value = totalCurveA

            Dim p59 As New SqlClient.SqlParameter
            p59.ParameterName = "@loinMeatA"
            p59.Direction = ParameterDirection.Input
            p59.SqlDbType = SqlDbType.Float
            p59.Value = loinMeatA

            Dim p60 As New SqlClient.SqlParameter
            p60.ParameterName = "@loinPA"
            p60.Direction = ParameterDirection.Input
            p60.SqlDbType = SqlDbType.Float
            p60.Value = loinPA

            Dim p61 As New SqlClient.SqlParameter
            p61.ParameterName = "@wmA"
            p61.Direction = ParameterDirection.Input
            p61.SqlDbType = SqlDbType.Float
            p61.Value = wmA

            Dim p62 As New SqlClient.SqlParameter
            p62.ParameterName = "@wmPA"
            p62.Direction = ParameterDirection.Input
            p62.SqlDbType = SqlDbType.Float
            p62.Value = wmPA

            Dim p63 As New SqlClient.SqlParameter
            p63.ParameterName = "@dmA"
            p63.Direction = ParameterDirection.Input
            p63.SqlDbType = SqlDbType.Float
            p63.Value = dmA

            Dim p64 As New SqlClient.SqlParameter
            p64.ParameterName = "@dmPA"
            p64.Direction = ParameterDirection.Input
            p64.SqlDbType = SqlDbType.Float
            p64.Value = dmPA

            Dim p65 As New SqlClient.SqlParameter
            p65.ParameterName = "@aveFSAQty"
            p65.Direction = ParameterDirection.Input
            p65.SqlDbType = SqlDbType.Float
            p65.Value = aveFSAQty

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)
            cmd.Parameters.Add(p7)
            cmd.Parameters.Add(p8)
            cmd.Parameters.Add(p9)
            cmd.Parameters.Add(p10)
            cmd.Parameters.Add(p11)
            cmd.Parameters.Add(p12)
            cmd.Parameters.Add(p13)
            cmd.Parameters.Add(p14)
            cmd.Parameters.Add(p15)
            cmd.Parameters.Add(p16)
            cmd.Parameters.Add(p17)
            cmd.Parameters.Add(p18)
            cmd.Parameters.Add(p19)
            cmd.Parameters.Add(p20)
            cmd.Parameters.Add(p21)
            cmd.Parameters.Add(p22)
            cmd.Parameters.Add(p23)
            cmd.Parameters.Add(p24)
            cmd.Parameters.Add(p25)
            cmd.Parameters.Add(p26)
            cmd.Parameters.Add(p27)
            cmd.Parameters.Add(p28)
            cmd.Parameters.Add(p29)
            cmd.Parameters.Add(p30)
            cmd.Parameters.Add(p31)
            cmd.Parameters.Add(p32)
            cmd.Parameters.Add(p33)
            cmd.Parameters.Add(p34)
            cmd.Parameters.Add(p35)
            cmd.Parameters.Add(p36)
            cmd.Parameters.Add(p37)
            cmd.Parameters.Add(p38)
            cmd.Parameters.Add(p39)
            cmd.Parameters.Add(p40)
            cmd.Parameters.Add(p41)
            cmd.Parameters.Add(p42)
            cmd.Parameters.Add(p43)
            cmd.Parameters.Add(p44)
            cmd.Parameters.Add(p45)
            cmd.Parameters.Add(p46)
            cmd.Parameters.Add(p47)
            cmd.Parameters.Add(p48)
            cmd.Parameters.Add(p49)
            cmd.Parameters.Add(p50)
            cmd.Parameters.Add(p51)
            cmd.Parameters.Add(p52)
            cmd.Parameters.Add(p53)
            cmd.Parameters.Add(p54)
            cmd.Parameters.Add(p55)
            cmd.Parameters.Add(p56)
            cmd.Parameters.Add(p57)
            cmd.Parameters.Add(p58)
            cmd.Parameters.Add(p59)
            cmd.Parameters.Add(p60)
            cmd.Parameters.Add(p61)
            cmd.Parameters.Add(p62)
            cmd.Parameters.Add(p63)
            cmd.Parameters.Add(p64)
            cmd.Parameters.Add(p65)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            daBuyer.Dispose()
            dsBuyer.Dispose()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub

    Public Sub deletePrintProductionReport(ByVal dateFrom As String, ByVal weekend As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_delete_PrintProductionReport"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p47 As New SqlClient.SqlParameter
            p47.ParameterName = "@prodnDate"
            p47.Direction = ParameterDirection.Input
            p47.SqlDbType = SqlDbType.DateTime
            p47.Value = Format(CDate(dateFrom), getTimeFormat())

            Dim p48 As New SqlClient.SqlParameter
            p48.ParameterName = "@weekend"
            p48.Direction = ParameterDirection.Input
            p48.SqlDbType = SqlDbType.VarChar
            p48.Value = weekend

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p47)
            cmd.Parameters.Add(p48)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Function getAllLotStatus() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_displayAll_LotStatus"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@dateTo"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            p1.Value = DBNull.Value 'Format(getServerDateTime, getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@dateUnloaded"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.DateTime
            p2.Value = DBNull.Value ' Format(getServerDateTime, getTimeFormat())

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@dateExpire"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.DateTime
            p3.Value = DBNull.Value ' Format(getServerDateTime, getTimeFormat())

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getMRNNo_ByMaterials(ByVal materials As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getMRNNo_byMaterialsDesc"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@materials"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = materials

            cmd.Parameters.Add(p1)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getMeatPercentage(ByVal dateFrom As String, ByVal dateTo As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getMeatPercentage"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@dateFrom"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            If dateFrom = "" Then
                p1.Value = Format(getServerDateTime, getTimeFormat())
            Else
                p1.Value = Format(CDate(dateFrom), getTimeFormat())
            End If

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@dateTo"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.DateTime
            If dateTo = "" Then
                p2.Value = Format(getServerDateTime, getTimeFormat())
            Else
                p2.Value = Format(CDate(dateTo), getTimeFormat())
            End If

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)

            Dim returnValue As Double

            Dim dr As SqlClient.SqlDataReader
            dr = cmd.ExecuteReader
            If dr.Read Then
                If Not dr(0) Is DBNull.Value Then
                    returnValue = dr.GetDouble(0)
                Else
                    returnValue = 0
                End If
            Else
                returnValue = 0
            End If

            dr.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getFZTotalInventory(ByVal isAlbacore As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_report_FZInventory"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@cutOff"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            p1.Value = Format(CDate("01/04/2012"), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@albacore"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = isAlbacore

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub updateLotSettlement(ByVal lot As String, ByVal status As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_update_LotSettlement"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@lot"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = lot

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@status"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = status

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Function getLot_byUnloadingDate(ByVal unloadingDate As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_dislay_LotByUnloadingDate"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@unloadDate"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            If unloadingDate = "" Then
                p1.Value = Format(getServerDateTime, getTimeFormat())
            Else
                p1.Value = Format(CDate(unloadingDate), getTimeFormat())
            End If

            cmd.Parameters.Add(p1)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getLotDetails_byUnloadingDate(ByVal lot As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_display_LotDetailsByUnloadingDate"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@lot"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = lot

            cmd.Parameters.Add(p1)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getAllPalletTags() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_displayAll_PalletTags"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function validateRFA(ByVal lot As String, ByVal specie As String) As Boolean
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getExistence_AnalysisRF"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@lot"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = lot

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@specieCode"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = getSpecieCode(specie)

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(paramRecCount)

            Dim da As New SqlClient.SqlDataAdapter
            Dim ds As New DataSet("dbPPICIS")

            da.SelectCommand = cmd
            da.Fill(ds)

            If Val(cmd.Parameters("@recCount").Value) > 0 Then
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return True
            Else
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return False
            End If
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub saveNewRFADetails(ByVal rfaCode As String, ByVal tests As String, _
    ByVal results As String, ByVal labTest As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_addNew_AnalysisRFDetails"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@rfaCode"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = rfaCode

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@typeOfTests"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = tests

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@results"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.Float
            p3.Value = CDbl(results)

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@labTest"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = labTest

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            daBuyer.Dispose()
            dsBuyer.Dispose()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub

    Public Sub updateRFA(ByVal rfaCode As String, ByVal analysisDate As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_update_AnalysisRF"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@rfaCode"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = rfaCode

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@analysisDate"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.DateTime
            p2.Value = Format(CDate(analysisDate), getTimeFormat())

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Sub deleteRFADetails(ByVal rfaCode As String, ByVal typeOfTest As String, ByVal category As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_delete_AnalysisRFDetails"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@rfaCode"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = rfaCode

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@typeOfTests"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = typeOfTest

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@labTest"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = category

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Function getRFAResults(ByVal unloadingDate As String, ByVal lot As String, ByVal result As String, _
    ByVal specie As String, Optional ByVal salt As Boolean = False) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_get_AnalysisRFResults"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@unloadingDate"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            If unloadingDate = "" Then
                p1.Value = Format(getServerDateTime, getTimeFormat())
            Else
                p1.Value = Format(CDate(unloadingDate), getTimeFormat())
            End If

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@lot"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = lot

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@result"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = result

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@specie"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = specie

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)

            Dim returnValue As Double

            Dim dr As SqlClient.SqlDataReader
            dr = cmd.ExecuteReader
            If dr.Read Then
                If Not dr(0) Is DBNull.Value Then
                    If salt Then
                        returnValue = dr.GetDouble(0)
                    Else
                        returnValue = dr.GetDouble(1)
                    End If
                Else
                    returnValue = 0
                End If
            Else
                returnValue = 0
            End If

            dr.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getAnalysis_RF_LaboratoryDetails(ByVal lot As String, ByVal specie As String, _
    ByVal test As String, ByVal category As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_display_Analysis_RF_LaboratoryDetails"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@lot"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = lot

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@specie"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = specie

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@test"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = test

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@category"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = category

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getAnalysis_LaboratoryTest(ByVal category As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_get_Analysis_LaboratoryTest"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@category"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = category

            cmd.Parameters.Add(p1)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getAllAnalysis_RF() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_displayAll_Analysis_RF"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getAllFGOutput_Daily(ByVal prodnDate As String, ByVal lot As String, Optional ByVal pCode As String = "") As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_display_Product_daily"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            If prodnDate = "" Then
                p1.Value = Format(getServerDateTime, getTimeFormat())
            Else
                p1.Value = Format(CDate(prodnDate), getTimeFormat())
            End If

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@lot"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = lot

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@pCode"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = pCode

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getAnalysis_FG_LaboratoryDetails(ByVal prodnDate As String, ByVal lot As String, _
    ByVal pCode As String, ByVal pCode2 As String, ByVal labTest As String, ByVal typeOfTests As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_display_Analysis_FG_LaboratoryDetails"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            If prodnDate = "" Then
                p1.Value = Format(getServerDateTime, getTimeFormat())
            Else
                p1.Value = Format(CDate(prodnDate), getTimeFormat())
            End If

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@lot"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = lot

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@pCode"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = pCode

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@pCode2"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = pCode2

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@labTest"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.VarChar
            p5.Value = labTest

            Dim p6 As New SqlClient.SqlParameter
            p6.ParameterName = "@typeOfTests"
            p6.Direction = ParameterDirection.Input
            p6.SqlDbType = SqlDbType.VarChar
            p6.Value = typeOfTests

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getProductSeamerQty(ByVal prodnDate As String, ByVal pCode As String, ByVal pCode2 As String, _
    ByVal lot As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getProductSeamerQty"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            If prodnDate = "" Then
                p1.Value = Format(getServerDateTime, getTimeFormat())
            Else
                p1.Value = Format(CDate(prodnDate), getTimeFormat())
            End If

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@lot"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = lot

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@pCode"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = pCode

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@pCode2"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = pCode2

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As Double
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetDouble(0)
                Else
                    returnValue = 0
                End If
            Else
                returnValue = 0
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function validateFGA(ByVal prodnDate As String, ByVal lot As String, _
    ByVal product As String, ByVal subCode As String) As Boolean
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getExistence_AnalysisFG"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            p1.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@lot"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = lot

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@pCode"
            p3.SqlDbType = SqlDbType.VarChar
            p3.Direction = ParameterDirection.Input
            p3.Value = product

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@pCode2"
            p4.SqlDbType = SqlDbType.VarChar
            p4.Direction = ParameterDirection.Input
            p4.Value = subCode

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(paramRecCount)

            Dim da As New SqlClient.SqlDataAdapter
            Dim ds As New DataSet("dbPPICIS")

            da.SelectCommand = cmd
            da.Fill(ds)

            If Val(cmd.Parameters("@recCount").Value) > 0 Then
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return True
            Else
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return False
            End If
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub saveNewFGADetails(ByVal fgaCode As String, ByVal tests As String, _
    ByVal results As String, ByVal labTest As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_addNew_AnalysisFGDetails"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@fgaCode"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = fgaCode

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@typeOfTests"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = tests

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@results"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.Float
            p3.Value = CDbl(results)

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@labTest"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = labTest

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            daBuyer.Dispose()
            dsBuyer.Dispose()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub

    Public Sub updateFGA(ByVal fgaCode As String, ByVal analysisDate As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_update_AnalysisFG"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@fgaCode"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = fgaCode

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@analysisDate"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.DateTime
            p2.Value = Format(CDate(analysisDate), getTimeFormat())

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Sub deleteFGADetails(ByVal fgaCode As String, ByVal typeOfTest As String, ByVal category As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_delete_AnalysisFGDetails"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@fgaCode"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = fgaCode

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@typeOfTests"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = typeOfTest

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@labTest"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = category

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Function getAllAnalysis_FG() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_displayAll_Analysis_FG"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getActualAverageFW(ByVal dateFrom As String, ByVal dateTo As String, ByVal pCode As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getActualAverageFW"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@dateFrom"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            p1.Value = Format(CDate(dateFrom), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@dateTo"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.DateTime
            p2.Value = Format(CDate(dateTo), getTimeFormat())

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@pCode"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = pCode

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)

            Dim dr As SqlClient.SqlDataReader
            dr = cmd.ExecuteReader

            Dim value As Double
            If dr.Read Then
                If Not dr(0) Is DBNull.Value Then
                    value = dr.GetDouble(0)
                Else
                    value = 0
                End If
            Else
                value = 0
            End If

            dr.Close()
            c.Close()

            Return value
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub saveNewPrintProductCostDist(ByVal pCode As String, ByVal pDesc As String, _
    ByVal pCost As String, ByVal pOutput As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_addNew_PrintProductCostingDist"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@pCode"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = pCode

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@pDesc"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = pDesc

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@pCost"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.Float
            p3.Value = CDbl(pCost)

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@pOutput"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.Float
            p4.Value = CDbl(pOutput)

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            daBuyer.Dispose()
            dsBuyer.Dispose()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub

    Public Sub saveNewPrintProductCostDist_Details(ByVal pCode As String, ByVal material As String, _
    ByVal materialUsages As String, ByVal materialCost As String, ByVal materialAmount As String, ByVal pCodeCost As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_addNew_PrintProductCostingDist_Details"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@pCode"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = pCode

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@material"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = material

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@materialUsages"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.Float
            If materialUsages = "" Then
                p3.Value = 0
            Else
                p3.Value = CDbl(materialUsages)
            End If

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@materialCost"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.Float
            If materialCost = "" Then
                p4.Value = 0
            Else
                p4.Value = CDbl(materialCost)
            End If

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@materialAmount"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.Float
            If materialAmount = "" Then
                p5.Value = 0
            Else
                p5.Value = CDbl(p3.Value) * CDbl(p4.Value)  'CDbl(materialAmount)
            End If

            Dim p6 As New SqlClient.SqlParameter
            p6.ParameterName = "@pCodeCost"
            p6.Direction = ParameterDirection.Input
            p6.SqlDbType = SqlDbType.Float
            If materialAmount = "" Then
                p6.Value = 0
            Else
                p6.Value = CDbl(pCodeCost)
            End If

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            daBuyer.Dispose()
            dsBuyer.Dispose()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub

    Public Sub deletePrintProductCostDist()
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_delete_PrintProductCostingDist"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Sub updateProductCost(ByVal pCode As String, ByVal cost As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_update_PrintProductCosting_ProductCost"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@pCode"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = pCode

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@pCost"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.Float
            p3.Value = getProductUnitCost(pCode) 'CDbl(cost)

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Function getDentedQty(ByVal dateFrom As String, ByVal dateTo As String, ByVal pCode As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getDentedTotalQuantity"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@dateFrom"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            If dateFrom = "" Then
                p1.Value = Format(getServerDateTime(), getTimeFormat())
            Else
                p1.Value = Format(CDate(dateFrom), getTimeFormat())
            End If

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@dateTo"
            p2.SqlDbType = SqlDbType.DateTime
            p2.Direction = ParameterDirection.Input
            If dateTo = "" Then
                p2.Value = Format(getServerDateTime(), getTimeFormat())
            Else
                p2.Value = Format(CDate(dateTo), getTimeFormat())
            End If

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@pCode"
            p3.SqlDbType = SqlDbType.VarChar
            p3.Direction = ParameterDirection.Input
            p3.Value = pCode

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As Double
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetDouble(0)
                Else
                    returnValue = 0
                End If
            Else
                returnValue = 0
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getProductSpecie(ByVal pCode As String) As String
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getProductSpecie"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@pCode"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = pCode

            cmd.Parameters.Add(p1)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As String
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetString(0)
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    'Public Function getActualAverageFW(ByVal dateFrom As String, ByVal dateTo As String, _
    'ByVal flakes As String, ByVal canSize As String) As Double
    '    Try
    '        Dim c As New SqlClient.SqlConnection
    '        c.ConnectionString = modModule.getConnectionString
    '        c.Open()

    '        Dim cmd As New SqlClient.SqlCommand
    '        cmd.CommandText = "proc_getActualAverageFW_Flakes"
    '        cmd.CommandType = CommandType.StoredProcedure
    '        cmd.Connection = c

    '        Dim p1 As New SqlClient.SqlParameter
    '        p1.ParameterName = "@dateFrom"
    '        p1.Direction = ParameterDirection.Input
    '        p1.SqlDbType = SqlDbType.DateTime
    '        p1.Value = Format(CDate(dateFrom), getTimeFormat())

    '        Dim p2 As New SqlClient.SqlParameter
    '        p2.ParameterName = "@dateTo"
    '        p2.Direction = ParameterDirection.Input
    '        p2.SqlDbType = SqlDbType.DateTime
    '        p2.Value = Format(CDate(dateTo), getTimeFormat())

    '        Dim p3 As New SqlClient.SqlParameter
    '        p3.ParameterName = "@flakes"
    '        p3.Direction = ParameterDirection.Input
    '        p3.SqlDbType = SqlDbType.VarChar
    '        p3.Value = flakes

    '        Dim p4 As New SqlClient.SqlParameter
    '        p4.ParameterName = "@canSize"
    '        p4.Direction = ParameterDirection.Input
    '        p4.SqlDbType = SqlDbType.VarChar
    '        p4.Value = canSize

    '        cmd.Parameters.Add(p1)
    '        cmd.Parameters.Add(p2)
    '        cmd.Parameters.Add(p3)
    '        cmd.Parameters.Add(p4)

    '        Dim dr As SqlClient.SqlDataReader
    '        dr = cmd.ExecuteReader

    '        Dim value As Double
    '        If dr.Read Then
    '            If Not dr(0) Is DBNull.Value Then
    '                value = dr.GetDouble(0)
    '            Else
    '                value = 0
    '            End If
    '        Else
    '            value = 0
    '        End If

    '        dr.Close()
    '        c.Close()

    '        Return value
    '    Catch e As Exception
    '        MsgBox(e.Message)
    '    Finally
    '    End Try
    'End Function

    Public Function validateProductCostDist(ByVal pCode As String) As Boolean
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getExistenceProductCostingDist"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@pCode"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = pCode

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(paramRecCount)

            Dim da As New SqlClient.SqlDataAdapter
            Dim ds As New DataSet("dbPPICIS")

            da.SelectCommand = cmd
            da.Fill(ds)

            If Val(cmd.Parameters("@recCount").Value) > 0 Then
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return True
            Else
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return False
            End If
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub updateProductCostDist_Output(ByVal pCode As String, ByVal output As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_updateProductCostingDist_Output"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@pCode"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = pCode

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@pOutput"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.Float
            p2.Value = CDbl(output)

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Function getProductCostDist_Output(ByVal pCode As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getProductCostingDist_Output"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@pCode"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = pCode

            cmd.Parameters.Add(p1)

            Dim dr As SqlClient.SqlDataReader
            dr = cmd.ExecuteReader

            Dim returnValue As Double
            If dr.Read Then
                If Not dr(0) Is DBNull.Value Then
                    returnValue = dr.GetDouble(0)
                Else
                    returnValue = 0
                End If
            Else
                returnValue = 0
            End If

            dr.Close()
            c.Close()

            Return returnValue
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Function

    Public Function getFGContainer_Specie(ByVal container As String, ByVal seal As String) As String
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getFGWithdrawal_Specie"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@container"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = container

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@seal"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = seal

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)

            Dim dr As SqlClient.SqlDataReader
            dr = cmd.ExecuteReader

            Dim returnValue As String
            While dr.Read
                If Not dr(0) Is DBNull.Value Then
                    If returnValue = "" Then
                        returnValue = dr.GetString(0)
                    Else
                        returnValue = returnValue & " & " & dr.GetString(0)
                    End If
                End If
            End While

            dr.Close()
            c.Close()

            Return returnValue
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Function

    Public Function getProductUnitCost(ByVal product As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getProductCost_ProductUnitCost"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@product"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = product

            cmd.Parameters.Add(p1)

            Dim returnValue As Double

            Dim dr As SqlClient.SqlDataReader
            dr = cmd.ExecuteReader
            If dr.Read Then
                If Not dr(0) Is DBNull.Value Then
                    returnValue = dr.GetDouble(3)
                Else
                    returnValue = 0
                End If
            Else
                returnValue = 0
            End If

            dr.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getReport_totalReceipts(ByVal dateFrom As String, ByVal dateTo As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_report_fishReceipts"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@dateFrom"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            If dateFrom = "" Then
                p1.Value = Format(getServerDateTime(), getTimeFormat())
            Else
                p1.Value = Format(CDate(dateFrom), getTimeFormat()) 'Format(CDate(dateTo), getTimeFormat())
            End If

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@dateTo"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.DateTime
            If dateTo = "" Then
                p2.Value = Format(getServerDateTime(), getTimeFormat())
            Else
                p2.Value = Format(CDate(dateTo), getTimeFormat())
            End If

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@dateUnloaded"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.DateTime
            p3.Value = getServerDateTime()  'Format(getServerDateTime(), getTimeFormat())

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getReport_totalFZOutput(ByVal dateFrom As String, ByVal dateTo As String, ByVal isAlbacore As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_report_totalFZOutput"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@dateFrom"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            If dateFrom = "" Then
                p1.Value = Format(getServerDateTime(), getTimeFormat())
            Else
                p1.Value = Format(CDate(dateFrom), getTimeFormat()) 'Format(CDate(dateTo), getTimeFormat())
            End If

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@dateTo"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.DateTime
            If dateTo = "" Then
                p2.Value = Format(getServerDateTime(), getTimeFormat())
            Else
                p2.Value = Format(CDate(dateTo), getTimeFormat())
            End If

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@isAlbacore"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = isAlbacore

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@title"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            If isAlbacore = "YES" Then
                p4.Value = "TOTAL ALBACORE FROZEN LOINS OUTPUT REPORT"
            Else
                p4.Value = "TOTAL YELLOWFIN AND SKIPJACK FROZEN LOINS OUTPUT REPORT"
            End If

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getBatchlotsDeposited_FB() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_display_FishLotsDeposited_FrozenBags"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getPalletTags_FB(ByVal lot As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_display_PalletTags_FrozenBags"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@lot"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = lot

            cmd.Parameters.Add(p1)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getPalletTags_FB(ByVal lot As String, ByVal pallet As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_display_PalletTagsDetails_FrozenBags"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@lot"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = lot

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@pallet"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = pallet

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getFZBagsWithdrawal(ByVal prodnDate As String, ByVal shift As String, ByVal purpose As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_display_FZBagsWithdrawal"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            If prodnDate = "" Then
                p1.Value = Format(getServerDateTime(), getTimeFormat())
            Else
                p1.Value = Format(CDate(prodnDate), getTimeFormat())
            End If

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@shift"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = shift

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@purpose"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = purpose

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getPalletFZBagsWithdrawan(ByVal pallet As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getFZBagsWithdrawan_Pallet"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@pallet"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = pallet

            cmd.Parameters.Add(p1)

            Dim returnValue As Double

            Dim dr As SqlClient.SqlDataReader
            dr = cmd.ExecuteReader
            If dr.Read Then
                If Not dr(0) Is DBNull.Value Then
                    returnValue = dr.GetDouble(0)
                Else
                    returnValue = 0
                End If
            Else
                returnValue = 0
            End If

            dr.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getReport_FGOutputSeamer(ByVal dateFrom As String, ByVal dateTo As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_displayFGOutput_seamerReport"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@dateFrom"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            If dateFrom = "" Then
                p1.Value = Format(getServerDateTime(), getTimeFormat())
            Else
                p1.Value = Format(CDate(dateFrom), getTimeFormat()) 'Format(CDate(dateTo), getTimeFormat())
            End If

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@dateTo"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.DateTime
            If dateTo = "" Then
                p2.Value = Format(getServerDateTime(), getTimeFormat())
            Else
                p2.Value = Format(CDate(dateTo), getTimeFormat())
            End If

            'Dim p3 As New SqlClient.SqlParameter
            'p3.ParameterName = "@isAlbacore"
            'p3.Direction = ParameterDirection.Input
            'p3.SqlDbType = SqlDbType.VarChar
            'p3.Value = isAlbacore

            'Dim p4 As New SqlClient.SqlParameter
            'p4.ParameterName = "@title"
            'p4.Direction = ParameterDirection.Input
            'p4.SqlDbType = SqlDbType.VarChar
            'If isAlbacore = "YES" Then
            '    p4.Value = "TOTAL ALBACORE FROZEN LOINS OUTPUT REPORT"
            'Else
            '    p4.Value = "TOTAL YELLOWFIN AND SKIPJACK FROZEN LOINS OUTPUT REPORT"
            'End If

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            'cmd.Parameters.Add(p3)
            'cmd.Parameters.Add(p4)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getFZBagsWithdrawalQty(ByVal dateFrom As String, ByVal dateTo As String, _
    ByVal pCode As String, ByVal specie As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getFZBagsWithdrawalQty"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@dateFrom"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            If dateFrom = "" Then
                p1.Value = Format(getServerDateTime(), getTimeFormat())
            Else
                p1.Value = Format(CDate(dateFrom), getTimeFormat()) 'Format(CDate(dateTo), getTimeFormat())
            End If

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@dateTo"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.DateTime
            If dateTo = "" Then
                p2.Value = Format(getServerDateTime(), getTimeFormat())
            Else
                p2.Value = Format(CDate(dateTo), getTimeFormat())
            End If

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@pCode"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = pCode

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@specie"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = specie

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)

            Dim returnValue As Double

            Dim dr As SqlClient.SqlDataReader
            dr = cmd.ExecuteReader
            If dr.Read Then
                If Not dr(0) Is DBNull.Value Then
                    returnValue = dr.GetDouble(0)   '2
                Else
                    returnValue = 0
                End If
            Else
                returnValue = 0
            End If

            dr.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getManufacturingAbsorptionCost(ByVal dateFrom As String, ByVal dateTo As String, _
    ByVal pCode As String, ByVal absorptionType As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getManufacturingAbsorption_Product"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@dateFrom"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            p1.Value = Format(CDate(dateFrom), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@dateTo"
            p2.SqlDbType = SqlDbType.DateTime
            p2.Direction = ParameterDirection.Input
            p2.Value = Format(CDate(dateTo), getTimeFormat())

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@pCode"
            p3.SqlDbType = SqlDbType.VarChar
            p3.Direction = ParameterDirection.Input
            p3.Value = pCode

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@absorption"
            p4.SqlDbType = SqlDbType.VarChar
            p4.Direction = ParameterDirection.Input
            p4.Value = absorptionType

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As Double
            While drCode.Read
                If Not drCode(0) Is DBNull.Value Then
                    returnValue += drCode.GetDouble(2)
                End If
            End While

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    'Public Function getTotalMeat_ProdnDate(ByVal dateFrom As String, ByVal dateTo As String, _
    'ByVal pCode As String) As Double
    '    Try
    '        Dim c As New SqlClient.SqlConnection
    '        c.ConnectionString = modModule.getConnectionString
    '        c.Open()

    '        Dim cmd As New SqlClient.SqlCommand
    '        cmd.CommandText = "proc_getTotalMeatPacked_ProdnDate"
    '        cmd.CommandType = CommandType.StoredProcedure
    '        cmd.Connection = c

    '        Dim p1 As New SqlClient.SqlParameter
    '        p1.ParameterName = "@dateFrom"
    '        p1.SqlDbType = SqlDbType.DateTime
    '        p1.Direction = ParameterDirection.Input
    '        p1.Value = Format(CDate(dateFrom), getTimeFormat())

    '        Dim p2 As New SqlClient.SqlParameter
    '        p2.ParameterName = "@dateTo"
    '        p2.SqlDbType = SqlDbType.DateTime
    '        p2.Direction = ParameterDirection.Input
    '        p2.Value = Format(CDate(dateTo), getTimeFormat())

    '        Dim p3 As New SqlClient.SqlParameter
    '        p3.ParameterName = "@pCode"
    '        p3.SqlDbType = SqlDbType.VarChar
    '        p3.Direction = ParameterDirection.Input
    '        p3.Value = pCode

    '        cmd.Parameters.Add(p1)
    '        cmd.Parameters.Add(p2)
    '        cmd.Parameters.Add(p3)

    '        Dim drCode As SqlClient.SqlDataReader
    '        drCode = cmd.ExecuteReader

    '        Dim returnValue As Double
    '        If drCode.Read Then
    '            If Not drCode(0) Is DBNull.Value Then
    '                returnValue = drCode.GetDouble(2)
    '            Else
    '                returnValue = 0
    '            End If
    '        Else
    '            returnValue = 0
    '        End If

    '        drCode.Close()
    '        c.Close()

    '        Return returnValue
    '    Catch e As Exception
    '        MsgBox(e.Message)
    '    Finally
    '    End Try
    'End Function

    Public Function getTotalMeat_ProdnDate(ByVal dateFrom As String, ByVal dateTo As String, ByVal pCode As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getTotalMeatPacked_ProdnDateSummary"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@dateFrom"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            p1.Value = Format(CDate(dateFrom), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@dateTo"
            p2.SqlDbType = SqlDbType.DateTime
            p2.Direction = ParameterDirection.Input
            p2.Value = Format(CDate(dateTo), getTimeFormat())

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@pCode"
            p3.SqlDbType = SqlDbType.VarChar
            p3.Direction = ParameterDirection.Input
            p3.Value = pCode

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As Double
            While drCode.Read
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetDouble(3)   '4
                End If
            End While

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub saveNewProductCost(ByVal prodnDate As String, ByVal pCode As String, ByVal pDesc As String, _
    ByVal pCost As String, ByVal pOutput As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_addNew_ProductCost"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim pC As New SqlClient.SqlParameter
            pC.ParameterName = "@costCode"
            pC.SqlDbType = SqlDbType.VarChar
            pC.Direction = ParameterDirection.Input
            pC.Value = Format(CDate(prodnDate), "ddMMyyyy") & pCode

            Dim p0 As New SqlClient.SqlParameter
            p0.ParameterName = "@prodnDate"
            p0.SqlDbType = SqlDbType.DateTime
            p0.Direction = ParameterDirection.Input
            p0.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@pCode"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = pCode

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@pDesc"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = pDesc

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@pCost"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.Float
            p3.Value = CDbl(pCost)

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@pOutput"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.Float
            p4.Value = CDbl(pOutput)

            cmd.Parameters.Add(pC)
            cmd.Parameters.Add(p0)
            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            daBuyer.Dispose()
            dsBuyer.Dispose()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub

    Public Sub saveNewProductCost_Details(ByVal prodnDate As String, ByVal pCode As String, ByVal material As String, _
    ByVal materialUsages As String, ByVal materialCost As String, ByVal materialAmount As String, ByVal pCodeCost As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_addNew_ProductCost_Details"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@costCode"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = Format(CDate(prodnDate), "ddMMyyyy") & pCode

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@material"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = material

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@materialUsages"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.Float
            If materialUsages = "" Then
                p3.Value = 0
            Else
                p3.Value = CDbl(materialUsages)
            End If

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@materialCost"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.Float
            If materialCost = "" Then
                p4.Value = 0
            Else
                p4.Value = CDbl(materialCost)
            End If

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@materialAmount"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.Float
            If materialAmount = "" Then
                p5.Value = 0
            Else
                p5.Value = CDbl(p3.Value) * p4.Value 'CDbl(materialAmount)
            End If

            Dim p6 As New SqlClient.SqlParameter
            p6.ParameterName = "@pCodeCost"
            p6.Direction = ParameterDirection.Input
            p6.SqlDbType = SqlDbType.Float
            If materialAmount = "" Then
                p6.Value = 0
            Else
                p6.Value = CDbl(pCodeCost)
            End If

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            daBuyer.Dispose()
            dsBuyer.Dispose()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub

    Public Sub deleteProductCost(ByVal prodnDate As String, ByVal pCode As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_delete_ProductCost"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@costCode"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = Format(CDate(prodnDate), "ddMMyyyy") & pCode

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Sub updateProductCost_Output(ByVal prodnDate As String, ByVal pCode As String, ByVal output As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_updateProductCost_Output"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@costCode"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = Format(CDate(prodnDate), "ddMMyyyy") & pCode

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@pOutput"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.Float
            p2.Value = CDbl(output)

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Sub updateProductCost_Cost(ByVal prodnDate As String, ByVal pCode As String, ByVal cost As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_update_ProductCost_Cost"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@costCode"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = Format(CDate(prodnDate), "ddMMyyyy") & pCode

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@pCost"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.Float
            p3.Value = getProductUnitCost(pCode) 'CDbl(cost)

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Sub saveNewMeatPercentage(ByVal prodnDate As String, ByVal wm As String, ByVal fw As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_addNew_MeatPercentage"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            p1.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@wm"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.Float
            p2.Value = CDbl(wm) / 100

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@afw"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.Float
            p3.Value = CDbl(fw)

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            daBuyer.Dispose()
            dsBuyer.Dispose()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub

    Public Function validateMeatPercentage(ByVal prodnDate As String) As Boolean
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getExistence_MeatPercentage"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            p1.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(paramRecCount)

            Dim da As New SqlClient.SqlDataAdapter
            Dim ds As New DataSet("dbPPICIS")

            da.SelectCommand = cmd
            da.Fill(ds)

            If Val(cmd.Parameters("@recCount").Value) > 0 Then
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return True
            Else
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return False
            End If
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function updateMeatPercentage(ByVal prodnDate As String, ByVal wm As String, ByVal fw As String) As Boolean
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_update_MeatPercentage"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            p1.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@wm"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.Float
            p2.Value = CDbl(wm) / 100

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@afw"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.Float
            p3.Value = CDbl(fw)

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(paramRecCount)

            Dim da As New SqlClient.SqlDataAdapter
            Dim ds As New DataSet("dbPPICIS")

            da.SelectCommand = cmd
            da.Fill(ds)

            If Val(cmd.Parameters("@recCount").Value) > 0 Then
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return True
            Else
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return False
            End If
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getAllMeatPercentages() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_displayAll_MeatPercentage"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function validateSpecieByLotWithdrawn(ByVal prodnDate As String, ByVal shift As String, _
    ByVal lot As String, ByVal specie As String) As Boolean
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_validate_FishSpecieWithdrawByLot"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            If prodnDate = "" Then
                p1.Value = Format(getServerDateTime, getTimeFormat())
            Else
                p1.Value = Format(CDate(prodnDate), getTimeFormat())
            End If

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@shift"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = shift

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@lot"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = lot

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@specie"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = specie

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)

            Dim returnValue As Boolean

            Dim dr As SqlClient.SqlDataReader
            dr = cmd.ExecuteReader
            If dr.Read Then
                If Not dr(0) Is DBNull.Value Then
                    returnValue = True
                Else
                    returnValue = False
                End If
            Else
                returnValue = False
            End If

            dr.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function


    Public Function getProductCostToDate(ByVal dateFrom As String, ByVal dateTo As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_report_productCostToDate"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@dateFrom"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            p1.Value = Format(CDate(dateFrom), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@dateTo"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.DateTime
            p2.Value = Format(CDate(dateTo), getTimeFormat())

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getProductCostToDate_Data(ByVal dateFrom As String, ByVal dateTo As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_displayProductCostingData"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@dateFrom"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            p1.Value = Format(CDate(dateFrom), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@dateTo"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.DateTime
            p2.Value = Format(CDate(dateTo), getTimeFormat())

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getProductAllocation(ByVal dateFrom As String, ByVal dateTo As String, _
    ByVal pCode As String, ByVal material As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getProductCosting_ProductAllocation"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@dateFrom"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            p1.Value = Format(CDate(dateFrom), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@dateTo"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.DateTime
            p2.Value = Format(CDate(dateTo), getTimeFormat())

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@pCode"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = pCode

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@material"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = material

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)

            Dim dr As SqlClient.SqlDataReader
            dr = cmd.ExecuteReader
            Dim returnValue As Double

            While dr.Read
                If Not dr(0) Is DBNull.Value Then
                    returnValue += dr.GetDouble(0)
                End If
            End While

            dr.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getProductOutput(ByVal dateFrom As String, ByVal dateTo As String, ByVal pCode As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getProductCosting_ProductOutput"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@dateFrom"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            p1.Value = Format(CDate(dateFrom), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@dateTo"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.DateTime
            p2.Value = Format(CDate(dateTo), getTimeFormat())

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@pCode"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = pCode

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)

            Dim dr As SqlClient.SqlDataReader
            dr = cmd.ExecuteReader
            Dim returnValue As Double

            If dr.Read Then
                If Not dr(0) Is DBNull.Value Then
                    returnValue = dr.GetDouble(0)
                Else
                    returnValue = 0
                End If
            Else
                returnValue = 0
            End If

            dr.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub saveNewPrintProductCosting2(ByVal material As String, ByVal materialUsage As String, _
    ByVal materialUC As String, ByVal materialAmount As String, ByVal pCode As String, _
    ByVal pCodeCost As String, ByVal totalProductCost As String, _
    ByVal totalProductOutput As String, ByVal productUC As String, _
    ByVal dateFrom As String, ByVal dateTo As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_addNew_PrintProductCosting2"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@material"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = material

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@materialUsage"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.Float
            p2.Value = materialUsage

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@materialUC"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.Float
            p3.Value = materialUC

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@materialAmount"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.Float
            p4.Value = materialAmount

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@pCode"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.VarChar
            p5.Value = pCode

            Dim p6 As New SqlClient.SqlParameter
            p6.ParameterName = "@pCodeCost"
            p6.Direction = ParameterDirection.Input
            p6.SqlDbType = SqlDbType.Float
            p6.Value = pCodeCost

            Dim p7 As New SqlClient.SqlParameter
            p7.ParameterName = "@totalProductCost"
            p7.Direction = ParameterDirection.Input
            p7.SqlDbType = SqlDbType.Float
            p7.Value = totalProductCost

            Dim p8 As New SqlClient.SqlParameter
            p8.ParameterName = "@totalProductOutput"
            p8.Direction = ParameterDirection.Input
            p8.SqlDbType = SqlDbType.Float
            p8.Value = totalProductOutput

            Dim p9 As New SqlClient.SqlParameter
            p9.ParameterName = "@productUC"
            p9.Direction = ParameterDirection.Input
            p9.SqlDbType = SqlDbType.Float
            p9.Value = productUC

            Dim p10 As New SqlClient.SqlParameter
            p10.ParameterName = "@dateFrom"
            p10.Direction = ParameterDirection.Input
            p10.SqlDbType = SqlDbType.DateTime
            p10.Value = Format(CDate(dateFrom), getTimeFormat())

            Dim p11 As New SqlClient.SqlParameter
            p11.ParameterName = "@dateTo"
            p11.Direction = ParameterDirection.Input
            p11.SqlDbType = SqlDbType.DateTime
            p11.Value = Format(CDate(dateTo), getTimeFormat())

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)
            cmd.Parameters.Add(p7)
            cmd.Parameters.Add(p8)
            cmd.Parameters.Add(p9)
            cmd.Parameters.Add(p10)
            cmd.Parameters.Add(p11)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            daBuyer.Dispose()
            dsBuyer.Dispose()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub

    Public Sub deletePrintProductCosting2()
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_delete_PrintProductCosting2"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Function getMaterialsTotalAmount(ByVal dateFrom As String, ByVal dateTo As String, ByVal material As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getProductCosting_ProductMaterialsAmount"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@dateFrom"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            p1.Value = Format(CDate(dateFrom), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@dateTo"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.DateTime
            p2.Value = Format(CDate(dateTo), getTimeFormat())

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@material"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = material

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)

            Dim dr As SqlClient.SqlDataReader
            dr = cmd.ExecuteReader
            Dim returnValue As Double

            While dr.Read
                If Not dr(0) Is DBNull.Value Then
                    returnValue += dr.GetDouble(0)
                End If
            End While

            dr.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getMaterialsTotalUsages(ByVal dateFrom As String, ByVal dateTo As String, ByVal material As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getProductCosting_ProductMaterialUsages"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@dateFrom"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            p1.Value = Format(CDate(dateFrom), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@dateTo"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.DateTime
            p2.Value = Format(CDate(dateTo), getTimeFormat())

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@material"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = material

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)

            Dim dr As SqlClient.SqlDataReader
            dr = cmd.ExecuteReader
            Dim returnValue As Double

            While dr.Read
                If Not dr(0) Is DBNull.Value Then
                    returnValue += dr.GetDouble(0)
                End If
            End While

            dr.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getFZInventoryInContainers() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_report_FZInventory_Container"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getFishSpoilagesWeeklyReport(ByVal dateFrom As String, ByVal dateTo As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_report_fishSpoilages_Weekly"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@dateFrom"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            If dateFrom = "" Then
                p1.Value = Format(getServerDateTime(), getTimeFormat())
            Else
                p1.Value = Format(CDate(dateFrom), getTimeFormat())
            End If

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@dateTo"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.DateTime
            If dateTo = "" Then
                p2.Value = Format(getServerDateTime(), getTimeFormat())
            Else
                p2.Value = Format(CDate(dateTo), getTimeFormat())
            End If

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getRoundFishInventory_ByCS() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_report_inventoryReport_Total_byCS2"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@dateFrom"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            p1.Value = Format(CDate("01/01/2013"), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@dateTo"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.DateTime
            p2.Value = Format(getServerDateTime(), getTimeFormat())

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@dateUnloaded"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.DateTime
            p3.Value = Format(getServerDateTime(), getTimeFormat())

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getFGContainer_FishingMethod(ByVal container As String, ByVal seal As String) As Boolean
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getFGWithdrawal_FishingMethod"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@container"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = container

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@seal"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = seal

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)

            Dim dr As SqlClient.SqlDataReader
            dr = cmd.ExecuteReader

            Dim returnValue As Boolean
            If dr.Read Then
                If Not dr(0) Is DBNull.Value Then
                    returnValue = True
                Else
                    returnValue = False
                End If
            Else
                returnValue = False
            End If

            dr.Close()
            c.Close()

            Return returnValue
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Function

    Public Function getFGShipmentCode(ByVal departDate As String, ByVal vessel As String, ByVal voyageNo As String, ByVal destination As String) As String
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getFGShipmentCode"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@departDate"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            If departDate = "" Then
                p1.Value = Format(getServerDateTime(), getTimeFormat())
            Else
                p1.Value = Format(CDate(departDate), getTimeFormat())
            End If

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@vessel"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = vessel

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@voyageNo"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = voyageNo

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@destination"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = destination

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)

            Dim dr As SqlClient.SqlDataReader
            dr = cmd.ExecuteReader

            Dim returnValue As String
            If dr.Read Then
                If Not dr(0) Is DBNull.Value Then
                    returnValue = dr.GetString(0)
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            dr.Close()
            c.Close()

            Return returnValue
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Function

    Public Sub deleteFGInvoiceDetails(ByVal invoiceNo As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_delete_FGInvoiceDetails"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@invoiceNo"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = invoiceNo

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Function getFGOutputQuantity_byProduct(ByVal prodnDate As String, ByVal shift As String, _
    ByVal lot As String, ByVal pCode As String, ByVal pCode2 As String, ByVal type As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = getConnectionString()
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandType = CommandType.StoredProcedure
            cmd.CommandText = "proc_getFGOutputQuantity_ByProduct"
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            If prodnDate = "" Then
                p1.Value = getServerDateTime()
            Else
                p1.Value = CDate(prodnDate)
            End If

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@shift"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = shift

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@lot"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = lot

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@pCode"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = pCode

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@pCode2"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.VarChar
            p5.Value = pCode2

            Dim p6 As New SqlClient.SqlParameter
            p6.ParameterName = "@type"
            p6.Direction = ParameterDirection.Input
            p6.SqlDbType = SqlDbType.VarChar
            p6.Value = type

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)

            Dim dr As SqlClient.SqlDataReader
            dr = cmd.ExecuteReader

            Dim qty As Double
            If dr.Read Then
                If Not dr(0) Is DBNull.Value Then
                    qty = dr.GetDouble(0)
                Else
                    qty = 0
                End If
            Else
                qty = 0
            End If

            dr.Close()
            c.Close()

            Return qty
        Catch ex As Exception
            MsgBox(ex.Message)
        End Try
    End Function

    Public Sub saveNewPrintProductionOutputDiscrepancy(ByVal prodnDate As String, ByVal shift As String, _
    ByVal lot As String, ByVal pCode As String, ByVal pCode2 As String, ByVal perCase As String, _
    ByVal prodnOutput As String, ByVal labelingOutput As String, ByVal sampleOutput As String, ByVal defOutput As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_addNew_PrintProductionOutputDiscrepancy"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            p1.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@shift"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = shift

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@lot#"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = lot

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@pCode"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = pCode

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@pCode2"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.VarChar
            p5.Value = pCode2

            Dim p6 As New SqlClient.SqlParameter
            p6.ParameterName = "@perCase"
            p6.Direction = ParameterDirection.Input
            p6.SqlDbType = SqlDbType.Float
            p6.Value = CDbl(perCase)

            Dim p7 As New SqlClient.SqlParameter
            p7.ParameterName = "@prodnOutput"
            p7.Direction = ParameterDirection.Input
            p7.SqlDbType = SqlDbType.Float
            p7.Value = CDbl(prodnOutput)

            Dim p8 As New SqlClient.SqlParameter
            p8.ParameterName = "@labelingOutput"
            p8.Direction = ParameterDirection.Input
            p8.SqlDbType = SqlDbType.Float
            p8.Value = CDbl(labelingOutput)

            Dim p9 As New SqlClient.SqlParameter
            p9.ParameterName = "@sampleOutput"
            p9.Direction = ParameterDirection.Input
            p9.SqlDbType = SqlDbType.Float
            p9.Value = CDbl(sampleOutput)

            Dim p10 As New SqlClient.SqlParameter
            p10.ParameterName = "@defOutput"
            p10.Direction = ParameterDirection.Input
            p10.SqlDbType = SqlDbType.Float
            p10.Value = CDbl(defOutput)

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)
            cmd.Parameters.Add(p7)
            cmd.Parameters.Add(p8)
            cmd.Parameters.Add(p9)
            cmd.Parameters.Add(p10)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            daBuyer.Dispose()
            dsBuyer.Dispose()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub

    Public Sub delete_tmp_PrintProductionOutputDiscrepancy()
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_delete_PrintProductionOutputDiscrepancy"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Function getFGInvoiceNoSeries(ByVal countInvoice As String) As Integer
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getInvoiceNoSeries"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@countInvoice"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = countInvoice

            cmd.Parameters.Add(p1)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim ctr As Integer
            If drCode.Read Then
                ctr = drCode.GetInt32(0) + 1
            Else
                ctr = 1
            End If

            drCode.Close()
            c.Close()
            Return ctr
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub deleteMaterialUsages(ByVal prodnDate As String, ByVal prodnShift As String, _
    ByVal materials As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_delete_MaterialUsages"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            p1.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@prodnShift"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = prodnShift

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@materials"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = getMRN_MaterialsCode(materials)

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Function getRoundFishExport(ByVal dateFrom As String, ByVal dateTo As String, _
    ByVal destination As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_report_RoundFishForExport"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@dateFrom"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            If dateFrom = "" Then
                p1.Value = Format(getServerDateTime, getTimeFormat())
            Else
                p1.Value = Format(CDate(dateFrom), getTimeFormat())
            End If

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@dateTo"
            p2.SqlDbType = SqlDbType.DateTime
            p2.Direction = ParameterDirection.Input
            If dateTo = "" Then
                p2.Value = Format(getServerDateTime, getTimeFormat())
            Else
                p2.Value = Format(CDate(dateTo), getTimeFormat())
            End If

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@destination"
            p3.SqlDbType = SqlDbType.VarChar
            p3.Direction = ParameterDirection.Input
            p3.Value = destination

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getRoundFishExportDestination(ByVal dateFrom As String, ByVal dateTo As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_display_fishExportDestination"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@dateFrom"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            If dateFrom = "" Then
                p1.Value = Format(getServerDateTime, getTimeFormat())
            Else
                p1.Value = Format(CDate(dateFrom), getTimeFormat())
            End If

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@dateTo"
            p2.SqlDbType = SqlDbType.DateTime
            p2.Direction = ParameterDirection.Input
            If dateTo = "" Then
                p2.Value = Format(getServerDateTime, getTimeFormat())
            Else
                p2.Value = Format(CDate(dateTo), getTimeFormat())
            End If

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getLotStatus_FZBag(ByVal prodnDate As String, ByVal shift As String, _
    ByVal lot As String) As Integer
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getLotStatus_FZBags"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            If prodnDate = "" Then
                p1.Value = Format(getServerDateTime, getTimeFormat())
            Else
                p1.Value = Format(CDate(prodnDate), getTimeFormat())
            End If

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@shift"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = shift

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@lot"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = lot

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim ctr As Integer
            If drCode.Read Then
                ctr = 1
            Else
                ctr = 0
            End If

            drCode.Close()
            c.Close()
            Return ctr
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getProductionOutput_FZBag(ByVal dateFrom As String, ByVal dateTo As String, ByVal shift As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_display_ProductionOutput_forRecovery_FZBags"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@dateFrom"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            If dateFrom = "" Then
                p1.Value = Format(getServerDateTime, getTimeFormat())
            Else
                p1.Value = Format(CDate(dateFrom), getTimeFormat())
            End If

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@dateTo"
            p2.SqlDbType = SqlDbType.DateTime
            p2.Direction = ParameterDirection.Input
            If dateTo = "" Then
                p2.Value = Format(getServerDateTime, getTimeFormat())
            Else
                p2.Value = Format(CDate(dateTo), getTimeFormat())
            End If

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@shift"
            p3.SqlDbType = SqlDbType.VarChar
            p3.Direction = ParameterDirection.Input
            p3.Value = shift

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function validateWithdrawnPallet(ByVal pallet As String) As Boolean
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getExistince_WithdrawnPallet"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@pallet"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = pallet

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(paramRecCount)

            Dim da As New SqlClient.SqlDataAdapter
            Dim ds As New DataSet("dbPPICIS")

            da.SelectCommand = cmd
            da.Fill(ds)

            If Val(cmd.Parameters("@recCount").Value) > 0 Then
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return True
            Else
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return False
            End If
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getRoundRejectDetails(ByVal lot As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_displayAll_RoundRejectDetails"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@lot"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = lot

            cmd.Parameters.Add(p1)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getRoundRejectReasons() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_displayAll_RoundRejectReasons"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getFishSupplier() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getFishSupplier"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getLotDetails(ByVal lot As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_display_LotDetails"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@lot"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = lot

            cmd.Parameters.Add(p1)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function validateFishLotDetails(ByVal lot As String, ByVal subLot As String, _
    ByVal specie As String, ByVal subLot2 As String, ByVal location As String) As Boolean
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getExistence_FishLotsDetails2"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@lot"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = lot

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@sublot"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = subLot

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@specie"
            p3.SqlDbType = SqlDbType.VarChar
            p3.Direction = ParameterDirection.Input
            p3.Value = specie

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@sub"
            p4.SqlDbType = SqlDbType.VarChar
            p4.Direction = ParameterDirection.Input
            p4.Value = subLot2

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@location"
            p5.SqlDbType = SqlDbType.VarChar
            p5.Direction = ParameterDirection.Input
            p5.Value = location

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(paramRecCount)

            Dim da As New SqlClient.SqlDataAdapter
            Dim ds As New DataSet("dbPPICIS")

            da.SelectCommand = cmd
            da.Fill(ds)

            If Val(cmd.Parameters("@recCount").Value) > 0 Then
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return True
            Else
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return False
            End If
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub saveNewFishLotDetails(ByVal lot As String, ByVal sublot As String, _
    ByVal method As String, ByVal wellID As String, ByVal typeSet As String, ByVal specie As String, _
    ByVal size As String, ByVal remarks As String, ByVal subLot2 As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_addNew_FishLotsDetails2"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@lot#"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = UCase(lot)

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@sublot"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = UCase(sublot)

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@pmId"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.BigInt
            p3.Value = getPMCode(method)

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@optr"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = modModule.getUsername

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@dateTimeEncoded"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.DateTime
            p5.Value = getServerDateTime()

            Dim p6 As New SqlClient.SqlParameter
            p6.ParameterName = "@wellID"
            p6.SqlDbType = SqlDbType.VarChar
            p6.Direction = ParameterDirection.Input
            p6.Value = wellID

            Dim p7 As New SqlClient.SqlParameter
            p7.ParameterName = "@typeSet"
            p7.SqlDbType = SqlDbType.VarChar
            p7.Direction = ParameterDirection.Input
            p7.Value = typeSet

            Dim p8 As New SqlClient.SqlParameter
            p8.ParameterName = "@specieCode"
            p8.SqlDbType = SqlDbType.VarChar
            p8.Direction = ParameterDirection.Input
            p8.Value = getSpecieCode(specie)

            Dim p9 As New SqlClient.SqlParameter
            p9.ParameterName = "@size"
            p9.SqlDbType = SqlDbType.VarChar
            p9.Direction = ParameterDirection.Input
            p9.Value = size

            Dim p10 As New SqlClient.SqlParameter
            p10.ParameterName = "@remarks"
            p10.SqlDbType = SqlDbType.VarChar
            p10.Direction = ParameterDirection.Input
            p10.Value = remarks

            Dim p11 As New SqlClient.SqlParameter
            p11.ParameterName = "@sub"
            p11.SqlDbType = SqlDbType.VarChar
            p11.Direction = ParameterDirection.Input
            p11.Value = UCase(subLot2)

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)
            cmd.Parameters.Add(p7)
            cmd.Parameters.Add(p8)
            cmd.Parameters.Add(p9)
            cmd.Parameters.Add(p10)
            cmd.Parameters.Add(p11)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            daBuyer.Dispose()
            dsBuyer.Dispose()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub

    Public Sub updateFishLotDetails(ByVal lot As String, ByVal sublot As String, _
    ByVal method As String, ByVal wellID As String, ByVal typeSet As String, ByVal specie As String, _
    ByVal size As String, ByVal remarks As String, ByVal subLot2 As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_update_FishLotDetails"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@lot#"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = lot

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@sublot"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = sublot

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@pmId"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.BigInt
            p3.Value = getPMCode(method)

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@optr"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = modModule.getUsername

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@dateTimeEncoded"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.DateTime
            p5.Value = getServerDateTime()

            Dim p6 As New SqlClient.SqlParameter
            p6.ParameterName = "@wellID"
            p6.SqlDbType = SqlDbType.VarChar
            p6.Direction = ParameterDirection.Input
            p6.Value = wellID

            Dim p7 As New SqlClient.SqlParameter
            p7.ParameterName = "@typeSet"
            p7.SqlDbType = SqlDbType.VarChar
            p7.Direction = ParameterDirection.Input
            p7.Value = typeSet

            Dim p8 As New SqlClient.SqlParameter
            p8.ParameterName = "@specieCode"
            p8.SqlDbType = SqlDbType.VarChar
            p8.Direction = ParameterDirection.Input
            p8.Value = getSpecieCode(specie)

            Dim p9 As New SqlClient.SqlParameter
            p9.ParameterName = "@size"
            p9.SqlDbType = SqlDbType.VarChar
            p9.Direction = ParameterDirection.Input
            p9.Value = size

            Dim p10 As New SqlClient.SqlParameter
            p10.ParameterName = "@remarks"
            p10.SqlDbType = SqlDbType.VarChar
            p10.Direction = ParameterDirection.Input
            p10.Value = remarks

            Dim p11 As New SqlClient.SqlParameter
            p11.ParameterName = "@sub"
            p11.SqlDbType = SqlDbType.VarChar
            p11.Direction = ParameterDirection.Input
            p11.Value = subLot2

            Dim p12 As New SqlClient.SqlParameter
            p12.ParameterName = "@recCount"
            p12.Direction = ParameterDirection.Output
            p12.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)
            cmd.Parameters.Add(p7)
            cmd.Parameters.Add(p8)
            cmd.Parameters.Add(p9)
            cmd.Parameters.Add(p10)
            cmd.Parameters.Add(p11)
            cmd.Parameters.Add(p12)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Sub deleteFishLotDetails(ByVal lot As String, ByVal sublot As String, _
    ByVal specie As String, ByVal subLot2 As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_delete_FishLotDetails2"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@lot#"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = lot

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@sublot"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = sublot

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@specieCode"
            p3.SqlDbType = SqlDbType.VarChar
            p3.Direction = ParameterDirection.Input
            p3.Value = getSpecieCode(specie)

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@sub"
            p4.SqlDbType = SqlDbType.VarChar
            p4.Direction = ParameterDirection.Input
            p4.Value = subLot2

            Dim p12 As New SqlClient.SqlParameter
            p12.ParameterName = "@recCount"
            p12.Direction = ParameterDirection.Output
            p12.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p12)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False()
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub


    Public Function getSubLotTotalTonnage(ByVal lot As String, ByVal sublot As String, _
    ByVal specie As String, ByVal subLot2 As String) As Double

        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getSublotTotalTonnage"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@lot"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = lot

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@sublot"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = sublot

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@specie"
            p3.SqlDbType = SqlDbType.VarChar
            p3.Direction = ParameterDirection.Input
            p3.Value = specie

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@sub"
            p4.SqlDbType = SqlDbType.VarChar
            p4.Direction = ParameterDirection.Input
            p4.Value = subLot2

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As Double

            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetDouble(0)
                Else
                    returnValue = 0
                End If
            Else
                returnValue = 0
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getFishReceiptsDetails() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_displayFRDetails_ByScaler"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@optr"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = modModule.getUsername

            cmd.Parameters.Add(p1)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function


    Public Function getFRNoCounter() As Long
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getCounter_RRNo"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim ctr As Long
            If drCode.Read Then
                ctr = drCode.GetInt64(0) + 1
            Else
                ctr = 1
            End If

            drCode.Close()
            c.Close()
            Return ctr
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub saveNewFishReceipts(ByVal rrNo As String, ByVal cc As String, ByVal dateStart As String, _
    ByVal dateEnd As String, ByVal status As String, ByVal shift As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_addNew_FishReceipts"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@rrNo"
            p1.SqlDbType = SqlDbType.BigInt
            p1.Direction = ParameterDirection.Input
            p1.Value = rrNo

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@cc#"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = cc

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@dateStart"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.DateTime
            p3.Value = CDate(dateStart)

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@dateEnd"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.DateTime
            If dateEnd = "" Then
                p4.Value = DBNull.Value
            Else
                p4.Value = CDate(dateEnd)
            End If

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@scaler"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.VarChar
            p5.Value = modModule.getUsername

            Dim p6 As New SqlClient.SqlParameter
            p6.ParameterName = "@status"
            p6.Direction = ParameterDirection.Input
            p6.SqlDbType = SqlDbType.VarChar
            p6.Value = status

            Dim p7 As New SqlClient.SqlParameter
            p7.ParameterName = "@optr"
            p7.Direction = ParameterDirection.Input
            p7.SqlDbType = SqlDbType.VarChar
            p7.Value = modModule.getUsername

            Dim p8 As New SqlClient.SqlParameter
            p8.ParameterName = "@dateTimeEncoded"
            p8.Direction = ParameterDirection.Input
            p8.SqlDbType = SqlDbType.DateTime
            p8.Value = getServerDateTime()

            Dim p9 As New SqlClient.SqlParameter
            p9.ParameterName = "@shift"
            p9.Direction = ParameterDirection.Input
            p9.SqlDbType = SqlDbType.VarChar
            p9.Value = shift

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)
            cmd.Parameters.Add(p7)
            cmd.Parameters.Add(p8)
            cmd.Parameters.Add(p9)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            daBuyer.Dispose()
            dsBuyer.Dispose()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub

    Public Sub updateFishReceipts(ByVal rrNo As String, ByVal cc As String, ByVal dateStart As String, _
    ByVal dateEnd As String, ByVal status As String, ByVal shift As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_update_FishReceipts"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@rrNo"
            p1.SqlDbType = SqlDbType.BigInt
            p1.Direction = ParameterDirection.Input
            p1.Value = rrNo

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@cc#"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = cc

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@dateStart"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.DateTime
            p3.Value = CDate(dateStart)

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@dateEnd"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.DateTime
            If dateEnd = "" Then
                p4.Value = DBNull.Value
            Else
                p4.Value = CDate(dateEnd)
            End If

            'Dim p5 As New SqlClient.SqlParameter
            'p5.ParameterName = "@scaler"
            'p5.Direction = ParameterDirection.Input
            'p5.SqlDbType = SqlDbType.VarChar
            'p5.Value = modModule.getUsername

            Dim p6 As New SqlClient.SqlParameter
            p6.ParameterName = "@status"
            p6.Direction = ParameterDirection.Input
            p6.SqlDbType = SqlDbType.VarChar
            p6.Value = status

            'Dim p7 As New SqlClient.SqlParameter
            'p7.ParameterName = "@optr"
            'p7.Direction = ParameterDirection.Input
            'p7.SqlDbType = SqlDbType.VarChar
            'p7.Value = modModule.getUsername

            Dim p8 As New SqlClient.SqlParameter
            p8.ParameterName = "@dateTimeEncoded"
            p8.Direction = ParameterDirection.Input
            p8.SqlDbType = SqlDbType.DateTime
            p8.Value = getServerDateTime()

            Dim p9 As New SqlClient.SqlParameter
            p9.ParameterName = "@shift"
            p9.Direction = ParameterDirection.Input
            p9.SqlDbType = SqlDbType.VarChar
            p9.Value = shift

            Dim p10 As New SqlClient.SqlParameter
            p10.ParameterName = "@recCount"
            p10.Direction = ParameterDirection.Output
            p10.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p6)
            cmd.Parameters.Add(p8)
            cmd.Parameters.Add(p9)
            cmd.Parameters.Add(p10)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Function validateFishReceipts(ByVal rrNo As String) As Boolean
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getExistence_FishReceipts"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@rrNo"
            p1.SqlDbType = SqlDbType.BigInt
            p1.Direction = ParameterDirection.Input
            p1.Value = rrNo

            Dim p9 As New SqlClient.SqlParameter
            p9.ParameterName = "@recCount"
            p9.Direction = ParameterDirection.Output
            p9.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p9)

            Dim da As New SqlClient.SqlDataAdapter
            Dim ds As New DataSet("dbPPICIS")

            da.SelectCommand = cmd
            da.Fill(ds)

            If Val(cmd.Parameters("@recCount").Value) > 0 Then
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return True
            Else
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Function

    Public Function getFishReceivingReceipts() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_displayAll_FishReceivingReceipts"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getFishReceivingReceiptsDetails(ByVal fr As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_display_FishReceivingReceiptsDetails"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@rrNo"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = fr

            cmd.Parameters.Add(p1)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getSublotDetails(ByVal lot As String, ByVal sublot As String, ByVal returnType As String, ByVal sub2 As String) As String
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getSublotDetails"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@lot"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = lot

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@sublot"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = sublot

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@sub2"
            p3.SqlDbType = SqlDbType.VarChar
            p3.Direction = ParameterDirection.Input
            p3.Value = sub2

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As String
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    Select Case returnType
                        Case 0  'SPECIE
                            returnValue = drCode.GetString(0)
                        Case 1  'SUB
                            returnValue = drCode.GetString(1)
                        Case 2  'SIZE
                            returnValue = drCode.GetString(2)
                    End Select
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getAllFishOwner() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_displayAll_FishOwner"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getOwner() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_display_FishOwner"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function validateFishOwner(ByVal owner As String) As Boolean
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getExistence_FishOwner"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@ownerName"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = owner

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(paramRecCount)

            Dim da As New SqlClient.SqlDataAdapter
            Dim ds As New DataSet("dbPPICIS")

            da.SelectCommand = cmd
            da.Fill(ds)

            If Val(cmd.Parameters("@recCount").Value) > 0 Then
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return True
            Else
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return False
            End If
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getFishOwnerCounter() As Long
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getCounter_FishOwner"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim ctr As Long
            If drCode.Read Then
                ctr = drCode.GetInt32(0) + 1
            Else
                ctr = 1
            End If

            drCode.Close()
            c.Close()
            Return ctr
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub updateFishOwner(ByVal code As String, ByVal owner As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_update_FishOwner"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@ownerCode"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = code

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@ownerName"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = owner

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Function getFishOwnerCode(ByVal owner As String) As String
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getFishOwnerCode"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@owner"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = owner

            cmd.Parameters.Add(p1)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As String
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetString(0)
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getNextAvailableBinHeight(ByVal room As String, ByVal lane As String, ByVal row As String) As String
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getNextAvailableBinHeight"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@room"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = room

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@lane"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = lane

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@row"
            p3.SqlDbType = SqlDbType.VarChar
            p3.Direction = ParameterDirection.Input
            p3.Value = row

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As Integer
            'If drCode.Read Then
            '    If Not drCode(0) Is DBNull.Value Then
            '        If drCode.GetInt32(0) = 5 Then
            '            returnValue = 0 '1
            '        Else
            '            returnValue = drCode.GetInt32(0) + 1
            '        End If
            '    Else
            '        returnValue = 1
            '    End If
            'Else
            '    returnValue = 1
            'End If

            If drCode.Read Then
                If Not drCode.GetString(0) = "" Then
                    If Not drCode.GetString(1) = "" Then
                        If Not drCode.GetString(2) = "" Then
                            If Not drCode.GetString(3) = "" Then
                                If Not drCode.GetString(4) = "" Then
                                    If Not drCode.GetString(5) = "" Then
                                        returnValue = 0
                                    Else
                                        If drCode.GetString(5) = "RESERVED" Or drCode.GetString(5) = "XXXXX" Then
                                            returnValue = 0
                                        Else
                                            returnValue = 6
                                        End If
                                    End If
                                Else
                                    If drCode.GetString(4) = "RESERVED" Or drCode.GetString(4) = "XXXXX" Then
                                        returnValue = 0
                                    Else
                                        returnValue = 5
                                    End If
                                End If
                            Else
                                If drCode.GetString(3) = "RESERVED" Or drCode.GetString(3) = "XXXXX" Then
                                    returnValue = 0
                                Else
                                    returnValue = 4
                                End If
                            End If
                        Else
                            If drCode.GetString(2) = "RESERVED" Or drCode.GetString(2) = "XXXXX" Then
                                returnValue = 0
                            Else
                                returnValue = 3
                            End If
                        End If
                    Else
                        If drCode.GetString(1) = "RESERVED" Or drCode.GetString(1) = "XXXXX" Then
                            returnValue = 0
                        Else
                            returnValue = 2
                        End If
                    End If
                Else
                    If drCode.GetString(0) = "RESERVED" Or drCode.GetString(0) = "XXXXX" Then
                        returnValue = 0
                    Else
                        returnValue = 1
                    End If
                End If
            Else
                returnValue = 0
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub updateFishBinDeposited(ByVal depositCode As String, ByVal lot As String, ByVal sublot As String, ByVal cs As String, _
    ByVal remarks As String, ByVal bin As String, ByVal specie As String, ByVal size As String, ByVal gw As String, _
    ByVal location As String, ByVal position As String, ByVal height As String, ByVal sample As String, ByVal owner As String, _
    ByVal sub2 As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_update_FishBinDeposited2"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@depositCode"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = depositCode

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@binCode"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = getFishBinCode(bin)

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@batchlot"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = lot

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@specieCode"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.VarChar
            p5.Value = getSpecieCode(specie)

            Dim p6 As New SqlClient.SqlParameter
            p6.ParameterName = "@csCode"
            p6.Direction = ParameterDirection.Input
            p6.SqlDbType = SqlDbType.VarChar
            p6.Value = getCSCode(cs)

            Dim p7 As New SqlClient.SqlParameter
            p7.ParameterName = "@grossWeight"
            p7.Direction = ParameterDirection.Input
            p7.SqlDbType = SqlDbType.Float
            p7.Value = CDbl(gw)

            Dim p8 As New SqlClient.SqlParameter
            p8.ParameterName = "@dateTimeTransfer"
            p8.Direction = ParameterDirection.Input
            p8.SqlDbType = SqlDbType.DateTime
            p8.Value = getServerDateTime()

            Dim p9 As New SqlClient.SqlParameter
            p9.ParameterName = "@remarks"
            p9.Direction = ParameterDirection.Input
            p9.SqlDbType = SqlDbType.VarChar
            p9.Value = remarks

            Dim p10 As New SqlClient.SqlParameter
            p10.ParameterName = "@withdraw"
            p10.Direction = ParameterDirection.Input
            p10.SqlDbType = SqlDbType.VarChar
            p10.Value = "NO"

            Dim p11 As New SqlClient.SqlParameter
            p11.ParameterName = "@depositStatus"
            p11.Direction = ParameterDirection.Input
            p11.SqlDbType = SqlDbType.VarChar
            p11.Value = "*"

            Dim pOptr As New SqlClient.SqlParameter
            pOptr.ParameterName = "@optr"
            pOptr.Direction = ParameterDirection.Input
            pOptr.SqlDbType = SqlDbType.VarChar
            pOptr.Value = modModule.getUsername

            Dim pEncoded As New SqlClient.SqlParameter
            pEncoded.ParameterName = "@dateTimeEncoded"
            pEncoded.Direction = ParameterDirection.Input
            pEncoded.SqlDbType = SqlDbType.DateTime
            pEncoded.Value = getServerDateTime()

            Dim p12 As New SqlClient.SqlParameter
            p12.ParameterName = "@sizeCode"
            p12.Direction = ParameterDirection.Input
            p12.SqlDbType = SqlDbType.VarChar
            p12.Value = getFishSizeCodeByRange(size)

            Dim p13 As New SqlClient.SqlParameter
            p13.ParameterName = "@sublot"
            p13.Direction = ParameterDirection.Input
            p13.SqlDbType = SqlDbType.VarChar
            p13.Value = sublot

            Dim p14 As New SqlClient.SqlParameter
            p14.ParameterName = "@hold"
            p14.Direction = ParameterDirection.Input
            p14.SqlDbType = SqlDbType.Int
            p14.Value = 0

            Dim p15 As New SqlClient.SqlParameter
            p15.ParameterName = "@location"
            p15.Direction = ParameterDirection.Input
            p15.SqlDbType = SqlDbType.VarChar
            p15.Value = location

            Dim p16 As New SqlClient.SqlParameter
            p16.ParameterName = "@position"
            p16.Direction = ParameterDirection.Input
            p16.SqlDbType = SqlDbType.VarChar
            p16.Value = position

            Dim p17 As New SqlClient.SqlParameter
            p17.ParameterName = "@height"
            p17.Direction = ParameterDirection.Input
            p17.SqlDbType = SqlDbType.VarChar
            p17.Value = height

            Dim p18 As New SqlClient.SqlParameter
            p18.ParameterName = "@sample"
            p18.Direction = ParameterDirection.Input
            p18.SqlDbType = SqlDbType.VarChar
            p18.Value = sample

            Dim p19 As New SqlClient.SqlParameter
            p19.ParameterName = "@ownerCode"
            p19.Direction = ParameterDirection.Input
            p19.SqlDbType = SqlDbType.VarChar
            p19.Value = getFishOwnerCode(owner)

            Dim p20 As New SqlClient.SqlParameter
            p20.ParameterName = "@sub"
            p20.Direction = ParameterDirection.Input
            p20.SqlDbType = SqlDbType.VarChar
            p20.Value = sub2

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)
            cmd.Parameters.Add(p7)
            cmd.Parameters.Add(p8)
            cmd.Parameters.Add(p9)
            cmd.Parameters.Add(p10)
            cmd.Parameters.Add(p11)
            cmd.Parameters.Add(pOptr)
            cmd.Parameters.Add(pEncoded)
            cmd.Parameters.Add(p12)
            cmd.Parameters.Add(p13)
            cmd.Parameters.Add(p14)
            cmd.Parameters.Add(p15)
            cmd.Parameters.Add(p16)
            cmd.Parameters.Add(p17)
            cmd.Parameters.Add(p18)
            cmd.Parameters.Add(p19)
            cmd.Parameters.Add(p20)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Function validateFishBinsInTheInventory(ByVal bin As String) As Boolean
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getExistence_FishBinsFromDepositInventory2"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@binNo"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = bin

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(paramRecCount)

            Dim dr As SqlClient.SqlDataReader
            dr = cmd.ExecuteReader

            Dim returnValue As Boolean
            If dr.Read Then
                If Not dr(0) Is DBNull.Value Then
                    returnValue = True
                Else
                    returnValue = False
                End If
            Else
                returnValue = False
            End If

            c.Close()
            dr.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getFishReceiptSummary(ByVal lot As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_display_FishReceiptsSummary"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@lot"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = lot

            cmd.Parameters.Add(p1)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getFishReceiptSummary(ByVal fr As String, ByVal isByBin As Boolean) As String
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_display_FishReceiptsSummary2"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@rrNo"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = fr

            cmd.Parameters.Add(p1)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As String
            If drCode.Read Then
                If isByBin Then
                    returnValue = CStr(drCode.GetInt32(0))
                Else
                    returnValue = CStr(drCode.GetDouble(1))
                End If
            Else
                returnValue = "0"
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub deleteFishReceipts(ByVal fr As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_delete_FishReceipt"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@rrNo"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = fr

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub


    Public Function getAllColdStorage() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_displayAll_ColdStorage"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function validateColdStorage(ByVal rm As String) As Boolean
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getExistence_ColdStorage"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@rm"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = rm

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(paramRecCount)

            Dim da As New SqlClient.SqlDataAdapter
            Dim ds As New DataSet("dbPPICIS")

            da.SelectCommand = cmd
            da.Fill(ds)

            If Val(cmd.Parameters("@recCount").Value) > 0 Then
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return True
            Else
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return False
            End If
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

   

    Public Function getColdStorageCounter() As Integer
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getCounter_ColdStorage"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim ctr As Integer
            If drCode.Read Then
                ctr = drCode.GetInt32(0) + 1
            Else
                ctr = 1
            End If

            drCode.Close()
            c.Close()
            Return ctr
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub updateColdStorage(ByVal code As String, ByVal rm As String, ByVal lane As String, _
    ByVal row As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_update_ColdStorage"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@csCode"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = code

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@csName"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = rm

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@lane"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.Int
            p4.Value = lane

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@row"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.Int
            p5.Value = row

            Dim pOptr As New SqlClient.SqlParameter
            pOptr.ParameterName = "@optr"
            pOptr.Direction = ParameterDirection.Input
            pOptr.SqlDbType = SqlDbType.VarChar
            pOptr.Value = modModule.getUsername

            Dim pEncoded As New SqlClient.SqlParameter
            pEncoded.ParameterName = "@dateTimeEncoded"
            pEncoded.Direction = ParameterDirection.Input
            pEncoded.SqlDbType = SqlDbType.DateTime
            pEncoded.Value = getServerDateTime()

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(pOptr)
            cmd.Parameters.Add(pEncoded)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Sub saveNewColdStorageLayout(ByVal code As String, ByVal lane As String, _
    ByVal row As String, ByVal stack As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_addNew_ColdStorageLayout"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@csCode"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = code

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@lane"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.Int
            p2.Value = CInt(lane)

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@row"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.Int
            p3.Value = CInt(row)

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@stack1"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = ""

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@stack2"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.VarChar
            p5.Value = ""

            Dim p6 As New SqlClient.SqlParameter
            p6.ParameterName = "@stack3"
            p6.Direction = ParameterDirection.Input
            p6.SqlDbType = SqlDbType.VarChar
            p6.Value = ""

            Dim p7 As New SqlClient.SqlParameter
            p7.ParameterName = "@stack4"
            p7.Direction = ParameterDirection.Input
            p7.SqlDbType = SqlDbType.VarChar
            p7.Value = ""

            Dim p8 As New SqlClient.SqlParameter
            p8.ParameterName = "@stack5"
            p8.Direction = ParameterDirection.Input
            p8.SqlDbType = SqlDbType.VarChar
            p8.Value = ""

            Dim p9 As New SqlClient.SqlParameter
            p9.ParameterName = "@stack6"
            p9.Direction = ParameterDirection.Input
            p9.SqlDbType = SqlDbType.VarChar
            p9.Value = ""

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)
            cmd.Parameters.Add(p7)
            cmd.Parameters.Add(p8)
            cmd.Parameters.Add(p9)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            daBuyer.Dispose()
            dsBuyer.Dispose()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub

    Public Sub deleteColdStorageLayout(ByVal code As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_delete_ColdStorageLayout"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@csCode"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = code

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Function getColdStorageLane(ByVal room As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_display_ColdStorageLane"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@rm"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = room

            cmd.Parameters.Add(p1)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getColdStorageRow(ByVal room As String, ByVal lane As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_display_ColdStorageRow"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@rm"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = room

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@lane"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = lane

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function updateColdStorageStack(ByVal rm As String, ByVal lane As String, ByVal row As String, ByVal stack As String, _
    ByVal depositCode As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_update_ColdStorageStack"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@csCode"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = modModule.getCSCode(rm)

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@lane"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = lane

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@row"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = row

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@stack"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = stack

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@stackRecord"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.VarChar
            p5.Value = depositCode

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Function

    Public Sub updateBinLocation(ByVal depositCode As String, ByVal cs As String, ByVal lane As String, _
    ByVal row As String, ByVal stack As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_update_FishBinDepositedLocation"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@depositCode"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = depositCode

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@csCode"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = getCSCode(cs)

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@lane"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = lane

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@row"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = row

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@stack"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.VarChar
            p5.Value = stack

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    '**********************************************************************************************************
    '**********************************************************************************************************
    '********* NEED TO VERIFY ***************
    '**********************************************************************************************************
    '**********************************************************************************************************
    Public Sub updateFishBinStack(ByVal rm As String, ByVal lane As String, ByVal row As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_updateBinStacks"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@rm"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = modModule.getCSCode(rm)

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@lane"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = lane

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@row"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = row

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub
    '**********************************************************************************************************
    '**********************************************************************************************************

    Public Function getFishBinByDepositCode(ByVal depositCode As String) As String
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getFishBin_byDepositCode"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@depositCode"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = depositCode

            cmd.Parameters.Add(p1)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As String
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetString(0)
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub checkForAutoStack(ByVal room As String, ByVal lane As String, ByVal row As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getNextAvailableBinHeight"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@room"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = room

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@lane"
            p2.SqlDbType = SqlDbType.Int
            p2.Direction = ParameterDirection.Input
            p2.Value = CInt(lane)

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@row"
            p3.SqlDbType = SqlDbType.Int
            p3.Direction = ParameterDirection.Input
            p3.Value = CInt(row)

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            If drCode.Read Then
                'MsgBox("Stack 1: " & getFishBinByDepositCode(drCode.GetString(0)) & Chr(13) & _
                '    "Stack 2: " & getFishBinByDepositCode(drCode.GetString(1)) & Chr(13) & _
                '    "Stack 3: " & getFishBinByDepositCode(drCode.GetString(2)) & Chr(13) & _
                '    "Stack 4: " & getFishBinByDepositCode(drCode.GetString(3)) & Chr(13) & _
                '    "Stack 5: " & getFishBinByDepositCode(drCode.GetString(4)) & Chr(13) & _
                '    "Stack 6: " & getFishBinByDepositCode(drCode.GetString(5)) & Chr(13))

                If drCode.GetString(0) = "" Then    'STACK 1
                    'MsgBox(drCode.GetString(0))
                    If Not drCode.GetString(1) = "RESERVED" And Not drCode.GetString(1) = "XXXXX" Then
                        updateColdStorageStack(room, lane, row, "1", drCode.GetString(1))
                        updateBinLocation(drCode.GetString(1), room, lane, row, "1")
                        updateColdStorageStack(room, lane, row, "2", "")
                        'checkForAutoStack(room, lane, row)
                    End If
                End If

                If drCode.GetString(1) = "" Then    'STACK 2
                    'MsgBox(drCode.GetString(1))
                    If Not drCode.GetString(2) = "RESERVED" And Not drCode.GetString(2) = "XXXXX" Then
                        updateColdStorageStack(room, lane, row, "2", drCode.GetString(2))
                        updateBinLocation(drCode.GetString(2), room, lane, row, "2")
                        updateColdStorageStack(room, lane, row, "3", "")
                        'checkForAutoStack(room, lane, row)
                    End If
                End If

                If drCode.GetString(2) = "" Then    'STACK 3
                    'MsgBox(drCode.GetString(2))
                    If Not drCode.GetString(3) = "RESERVED" And Not drCode.GetString(3) = "XXXXX" Then
                        updateColdStorageStack(room, lane, row, "3", drCode.GetString(3))
                        updateBinLocation(drCode.GetString(3), room, lane, row, "3")
                        updateColdStorageStack(room, lane, row, "4", "")
                        'checkForAutoStack(room, lane, row)
                    End If
                End If

                If drCode.GetString(3) = "" Then    'STACK 4
                    'MsgBox(drCode.GetString(3))
                    If Not drCode.GetString(4) = "RESERVED" And Not drCode.GetString(4) = "XXXXX" Then
                        updateColdStorageStack(room, lane, row, "4", drCode.GetString(4))
                        updateBinLocation(drCode.GetString(4), room, lane, row, "4")
                        updateColdStorageStack(room, lane, row, "5", "")
                        'checkForAutoStack(room, lane, row)
                    End If
                End If

                If drCode.GetString(4) = "" Then    'STACK 5
                    'MsgBox(drCode.GetString(4))
                    If Not drCode.GetString(5) = "RESERVED" And Not drCode.GetString(5) = "XXXXX" Then
                        updateColdStorageStack(room, lane, row, "5", drCode.GetString(5))
                        updateBinLocation(drCode.GetString(5), room, lane, row, "5")
                        updateColdStorageStack(room, lane, row, "6", "")
                        'checkForAutoStack(room, lane, row)
                    End If
                End If

                If drCode.GetString(5) = "" Then    'STACK 6
                    'MsgBox(drCode.GetString(5))
                    updateColdStorageStack(room, lane, row, "6", "")
                    'updateBinLocation(drCode.GetString(1), room, lane, row, "1")
                    'checkForAutoStack(room, lane, row)
                End If
            End If

            drCode.Close()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub

    Public Function getFishLotFishSizes(ByVal lot As String, ByVal sublot As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_display_LotFishSizes"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@lot"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = lot

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@sublot"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = sublot

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getSaltContent(ByVal lot As String, ByVal sublot As String, ByVal fishSize As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getSaltContent"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@lot"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = lot

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@sublot"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = sublot

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@fishSize"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = fishSize

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As Double
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetDouble(0)
                Else
                    returnValue = 0
                End If
            Else
                returnValue = 0
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub saveQCRawFishAnalysisResults(ByVal lot As String, ByVal sublot As String, ByVal histamine As String, _
    ByVal ps As String, ByVal salt As String, ByVal handle As String, ByVal hold As String, ByVal remarks As String, ByVal status As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_addNew_QCRawAnalysisResults"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@lot#"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = lot

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@sublot"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = sublot

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@histamine"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = histamine

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@ps"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = ps

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@salt"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.VarChar
            p5.Value = salt

            Dim p6 As New SqlClient.SqlParameter
            p6.ParameterName = "@espHandle"
            p6.Direction = ParameterDirection.Input
            p6.SqlDbType = SqlDbType.VarChar
            p6.Value = handle

            Dim p7 As New SqlClient.SqlParameter
            p7.ParameterName = "@hold"
            p7.Direction = ParameterDirection.Input
            p7.SqlDbType = SqlDbType.VarChar
            p7.Value = hold

            Dim p8 As New SqlClient.SqlParameter
            p8.ParameterName = "@remarks"
            p8.Direction = ParameterDirection.Input
            p8.SqlDbType = SqlDbType.VarChar
            p8.Value = remarks

            Dim p9 As New SqlClient.SqlParameter
            p9.ParameterName = "@status"
            p9.Direction = ParameterDirection.Input
            p9.SqlDbType = SqlDbType.VarChar
            p9.Value = status

            'Dim pOptr As New SqlClient.SqlParameter
            'pOptr.ParameterName = "@optr"
            'pOptr.Direction = ParameterDirection.Input
            'pOptr.SqlDbType = SqlDbType.VarChar
            'pOptr.Value = modModule.getUsername

            'Dim pEncoded As New SqlClient.SqlParameter
            'pEncoded.ParameterName = "@dateTimeEncoded"
            'pEncoded.Direction = ParameterDirection.Input
            'pEncoded.SqlDbType = SqlDbType.DateTime
            'pEncoded.Value = getServerDateTime()

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)
            cmd.Parameters.Add(p7)
            cmd.Parameters.Add(p8)
            cmd.Parameters.Add(p9)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            daBuyer.Dispose()
            dsBuyer.Dispose()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub

    Public Sub saveQCRawFishAnalysisResults_SaltContent(ByVal lot As String, ByVal sublot As String, _
    ByVal fishSize As String, ByVal saltValue As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_addNew_QCRawAnalysisResults_SaltContent"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@lot#"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = lot

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@sublot"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = sublot

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@sizeCode"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = getFishSizeCodeByRange(fishSize)

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@value"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.Float
            p4.Value = CDbl(saltValue)

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            daBuyer.Dispose()
            dsBuyer.Dispose()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub

    Public Function validateQCRawFishAnalysis_SaltContent(ByVal lot As String, ByVal sublot As String) As Boolean
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getExistence_QCRawAnalysisResults_SaltContent"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@lot#"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = lot

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@sublot"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = sublot

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(paramRecCount)

            Dim da As New SqlClient.SqlDataAdapter
            Dim ds As New DataSet("dbPPICIS")

            da.SelectCommand = cmd
            da.Fill(ds)

            If Val(cmd.Parameters("@recCount").Value) > 0 Then
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return True
            Else
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return False
            End If
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function validateQCRawFishAnalysis(ByVal lot As String, ByVal sublot As String) As Boolean
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getExistence_QCRawAnalysisResults"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@lot#"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = lot

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@sublot"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = sublot

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(paramRecCount)

            Dim da As New SqlClient.SqlDataAdapter
            Dim ds As New DataSet("dbPPICIS")

            da.SelectCommand = cmd
            da.Fill(ds)

            If Val(cmd.Parameters("@recCount").Value) > 0 Then
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return True
            Else
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return False
            End If
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub updateQCRawFishAnalysisResults(ByVal lot As String, ByVal sublot As String, ByVal histamine As String, _
    ByVal ps As String, ByVal salt As String, ByVal handle As String, ByVal hold As String, ByVal remarks As String, ByVal status As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_update_QCRawAnalysisResults"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@lot#"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = lot

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@sublot"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = sublot

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@histamine"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = histamine

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@ps"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = ps

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@salt"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.VarChar
            p5.Value = salt

            Dim p6 As New SqlClient.SqlParameter
            p6.ParameterName = "@espHandle"
            p6.Direction = ParameterDirection.Input
            p6.SqlDbType = SqlDbType.VarChar
            p6.Value = handle

            Dim p7 As New SqlClient.SqlParameter
            p7.ParameterName = "@hold"
            p7.Direction = ParameterDirection.Input
            p7.SqlDbType = SqlDbType.VarChar
            p7.Value = hold

            Dim p8 As New SqlClient.SqlParameter
            p8.ParameterName = "@remarks"
            p8.Direction = ParameterDirection.Input
            p8.SqlDbType = SqlDbType.VarChar
            p8.Value = remarks

            Dim p9 As New SqlClient.SqlParameter
            p9.ParameterName = "@status"
            p9.Direction = ParameterDirection.Input
            p9.SqlDbType = SqlDbType.VarChar
            p9.Value = status

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)
            cmd.Parameters.Add(p7)
            cmd.Parameters.Add(p8)
            cmd.Parameters.Add(p9)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Sub updateQCRawFishAnalysisResults_SaltContent(ByVal lot As String, ByVal sublot As String, ByVal fishSize As String, _
   ByVal saltValue As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_update_QCRawAnalysisResults_SaltContent"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@lot#"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = lot

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@sublot"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = sublot

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@sizeCode"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = modModule.getFishSizeCodeByRange(fishSize)

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@saltValue"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.Float
            p4.Value = CDbl(saltValue)

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Function getFishLotAnalysisResults(ByVal lot As String, ByVal sublot As String) As Boolean
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getFishLotAnalysisResults"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@lot#"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = lot

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@sublot"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = sublot

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As Boolean
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    If drCode.GetString(0) = "Pass" And drCode.GetString(1) = "Pass" Then
                        returnValue = True
                    Else
                        returnValue = False
                    End If
                Else
                    returnValue = False
                End If
            Else
                returnValue = False
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getAllQCRawFishAnalysisList() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_displayAll_QCRawFishAnalysisSummary"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@unloadingDate"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            p1.Value = getServerDateTime()

            cmd.Parameters.Add(p1)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getQALotResults(ByVal lot As String, ByVal sublot As String, ByVal category As String) As String
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_display_QALotResults"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@lot"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = lot

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@sublot"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = sublot

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As String
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    Select Case category
                        Case "histamine"
                            returnValue = drCode.GetString(0)
                        Case "ps"
                            returnValue = drCode.GetString(1)
                        Case "salt"
                            returnValue = drCode.GetString(2)
                        Case "remarks"
                            returnValue = drCode.GetString(3)
                        Case "status"
                            returnValue = drCode.GetString(4)
                    End Select
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub saveQCRawFishAnalysisResults_Logs(ByVal lot As String, ByVal sublot As String, ByVal remarks As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_addNew_QCRawAnalysisResults_Logs"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim pOptr As New SqlClient.SqlParameter
            pOptr.ParameterName = "@optr"
            pOptr.Direction = ParameterDirection.Input
            pOptr.SqlDbType = SqlDbType.VarChar
            pOptr.Value = modModule.getUsername

            Dim pEncoded As New SqlClient.SqlParameter
            pEncoded.ParameterName = "@dateTimeEncoded"
            pEncoded.Direction = ParameterDirection.Input
            pEncoded.SqlDbType = SqlDbType.DateTime
            pEncoded.Value = getServerDateTime()

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@lot"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = lot

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@sublot"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = sublot

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@remarks"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = remarks

            cmd.Parameters.Add(pOptr)
            cmd.Parameters.Add(pEncoded)
            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            daBuyer.Dispose()
            dsBuyer.Dispose()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub

    Public Function getAllQCRawFishAnalysisLogs(ByVal lot As String, ByVal sublot As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_displayAll_QCRawAnalysisResults_Logs"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@lot"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = lot

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@sublot"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = sublot

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getSublotDetails(ByVal lot As String, ByVal sublot As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_display_Sub_SublotByLot"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@lot"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = lot

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@sublot"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = sublot

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getCS_TotalSpaces(ByVal cs As String) As Integer
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getCS_TotalSpaces"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@cs"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = cs

            cmd.Parameters.Add(p1)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As Integer
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetInt32(0)
                Else
                    returnValue = 0
                End If
            Else
                returnValue = 0
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getCS_Blockage(ByVal cs As String, ByVal category As String) As Integer
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getCS_BlockedReserved"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@cs"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = cs

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@category"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = category

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As Integer
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    'Select Case category
                    '    Case "RESERVED"
                    returnValue = drCode.GetInt32(1)
                    '    Case "BLOCKED"
                    '        returnValue = drCode.GetInt32(2)
                    'End Select
                Else
                    returnValue = 0
                End If
            Else
                returnValue = 0
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getCS_Occupied(ByVal cs As String) As Integer
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getCS_OccupiedSpaces"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@csName"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = cs

            cmd.Parameters.Add(p1)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As Integer
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                            returnValue = drCode.GetInt32(1)
                Else
                    returnValue = 0
                End If
            Else
                returnValue = 0
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub saveNewPrintColdStorageMetrics(ByVal csName As String, ByVal totalSpace As String, ByVal occupied As String, _
        ByVal reserved As String, ByVal blocked As String)
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_addNew_PrintColdStorageMetrics"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@csName"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = csName

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@totalSpace"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.Float
            p2.Value = totalSpace

            Dim p3 As New SqlClient.SqlParameter()
            p3.ParameterName = "@occupied"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.Float
            p3.Value = occupied

            Dim p4 As New SqlClient.SqlParameter()
            p4.ParameterName = "@reserved"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.Float
            p4.Value = reserved

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@blocked"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.Float
            p5.Value = blocked

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)

            Dim daBuyer As New SqlClient.SqlDataAdapter()
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            daBuyer.Dispose()
            dsBuyer.Dispose()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub

    Public Sub delete_PrintColdStorageMetrics()
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_delete_PrintColdStorageMetrics"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Function printColdStorageMetrics() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_report_PrintColdStorageMetrics"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getTimeFormat() As String
        If TimeZoneInfo.Local.DisplayName.Contains("GMT+11") Or TimeZoneInfo.Local.DisplayName.Contains("UTC+11") Then
            Return "dd/MM/yyyy"
        Else
            Return "MM/dd/yyyy"
        End If
    End Function

    Public Function getTimeFormatForCode() As String
        If TimeZoneInfo.Local.DisplayName.Contains("GMT+11") Or TimeZoneInfo.Local.DisplayName.Contains("UTC+11") Then
            Return "ddMMyy"
        Else
            Return "MMddyy"
        End If
    End Function

    Public Function getAllFishDepositDetails(ByVal category As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            If category.Contains("All") Then
                cmd.CommandText = "proc_displayAll_FishDepositDetails"
            ElseIf category.Contains("Non") Then
                cmd.CommandText = "proc_displayAll_FishDepositDetails_NonSched"
            ElseIf category.Contains("Schedule") Then
                cmd.CommandText = "proc_displayAll_FishDepositDetails_Scheduled"
            End If

            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getFishDepositDetails(ByVal lot As String, ByVal sublot As String, _
    ByVal sub2 As String, ByVal specie As String, ByVal size As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_display_FishDepositDetails_Trans"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@schedule"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            p1.Value = DBNull.Value

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@lot"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = lot

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@sublot"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = sublot

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@sub"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = sub2

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@specie"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.VarChar
            p5.Value = specie

            Dim p6 As New SqlClient.SqlParameter
            p6.ParameterName = "@size"
            p6.Direction = ParameterDirection.Input
            p6.SqlDbType = SqlDbType.VarChar
            p6.Value = size

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub saveNewVesselFishReject(ByVal lot As String, ByVal unloadingDate As String, ByVal room As String, _
    ByVal lane As String, ByVal row As String, ByVal stack As String, ByVal remarks As String, ByVal bin As String, ByVal gw As String)
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_addNew_VesselFishRejects"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@rrCode"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = "VR" & Format(CDate(unloadingDate), getTimeFormat()) & lot & bin

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@lot#"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = lot

            Dim p3 As New SqlClient.SqlParameter()
            p3.ParameterName = "@unloadingDate"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.DateTime
            p3.Value = Format(CDate(unloadingDate), getTimeFormat())

            Dim p4 As New SqlClient.SqlParameter()
            p4.ParameterName = "@csCode"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = getCSCode(room)

            Dim p5 As New SqlClient.SqlParameter()
            p5.ParameterName = "@lane"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.VarChar
            p5.Value = lane

            Dim p6 As New SqlClient.SqlParameter()
            p6.ParameterName = "@row"
            p6.Direction = ParameterDirection.Input
            p6.SqlDbType = SqlDbType.VarChar
            p6.Value = row

            Dim p7 As New SqlClient.SqlParameter()
            p7.ParameterName = "@stack"
            p7.Direction = ParameterDirection.Input
            p7.SqlDbType = SqlDbType.VarChar
            p7.Value = stack

            Dim p8 As New SqlClient.SqlParameter()
            p8.ParameterName = "@binCode"
            p8.Direction = ParameterDirection.Input
            p8.SqlDbType = SqlDbType.VarChar
            p8.Value = getFishBinCode(bin)

            Dim p9 As New SqlClient.SqlParameter()
            p9.ParameterName = "@gw"
            p9.Direction = ParameterDirection.Input
            p9.SqlDbType = SqlDbType.Float
            p9.Value = CDbl(gw)

            Dim p10 As New SqlClient.SqlParameter()
            p10.ParameterName = "@remarks"
            p10.Direction = ParameterDirection.Input
            p10.SqlDbType = SqlDbType.VarChar
            p10.Value = remarks

            Dim pOptr As New SqlClient.SqlParameter()
            pOptr.ParameterName = "@optr"
            pOptr.Direction = ParameterDirection.Input
            pOptr.SqlDbType = SqlDbType.VarChar
            pOptr.Value = modModule.getUsername

            Dim pEncoded As New SqlClient.SqlParameter()
            pEncoded.ParameterName = "@dateTimeEncoded"
            pEncoded.Direction = ParameterDirection.Input
            pEncoded.SqlDbType = SqlDbType.DateTime
            pEncoded.Value = getServerDateTime()

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)
            cmd.Parameters.Add(p7)
            cmd.Parameters.Add(p8)
            cmd.Parameters.Add(p9)
            cmd.Parameters.Add(p10)
            cmd.Parameters.Add(pOptr)
            cmd.Parameters.Add(pEncoded)

            Dim daBuyer As New SqlClient.SqlDataAdapter()
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            daBuyer.Dispose()
            dsBuyer.Dispose()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub

    Public Function getLotVesselRejects(ByVal lot As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_display_LotVesselRejects"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@lot"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = lot

            cmd.Parameters.Add(p1)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub updateVesselRejectDetails(ByVal depositCode As String, ByVal gw As String, ByVal dateTimeTransfer As String, _
    ByVal owner As String, ByVal remarks As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_update_VesselRejectDeposited_Quantity"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@depositCode"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = depositCode

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@grossWeight"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.Float
            p2.Value = CDbl(gw)

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@dateTimeTransfer"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.DateTime
            p3.Value = Format(CDate(dateTimeTransfer), getTimeFormat())

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@ownerCode"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = getFishOwnerCode(owner)

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@remarks"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.VarChar
            p5.Value = remarks

            Dim pOptr As New SqlClient.SqlParameter
            pOptr.ParameterName = "@optr"
            pOptr.Direction = ParameterDirection.Input
            pOptr.SqlDbType = SqlDbType.VarChar
            pOptr.Value = modModule.getUsername

            Dim pEncoded As New SqlClient.SqlParameter
            pEncoded.ParameterName = "@dateTimeEncoded"
            pEncoded.Direction = ParameterDirection.Input
            pEncoded.SqlDbType = SqlDbType.DateTime
            pEncoded.Value = getServerDateTime()

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(pOptr)
            cmd.Parameters.Add(pEncoded)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Function getScaleID() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_display_ScaleID"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getScaleTestLocation() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_display_ScaleTest_Location"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub saveNewScaleTest(ByVal scale As String, ByVal testDate As String, ByVal status As String, ByVal typeOfTest As String, _
    ByVal testTime As String)
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_addNew_ScaleTest"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@scaleID"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = scale

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@testDate"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.DateTime
            p2.Value = Format(CDate(testDate), getTimeFormat())

            Dim p3 As New SqlClient.SqlParameter()
            p3.ParameterName = "@status"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = status

            Dim p4 As New SqlClient.SqlParameter()
            p4.ParameterName = "@typeOfTest"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = typeOfTest

            Dim p5 As New SqlClient.SqlParameter()
            p5.ParameterName = "@testTime"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.DateTime
            p5.Value = CDate(testTime)

            Dim pOptr As New SqlClient.SqlParameter()
            pOptr.ParameterName = "@optr"
            pOptr.Direction = ParameterDirection.Input
            pOptr.SqlDbType = SqlDbType.VarChar
            pOptr.Value = modModule.getUsername

            Dim pEncoded As New SqlClient.SqlParameter()
            pEncoded.ParameterName = "@dateTimeEncoded"
            pEncoded.Direction = ParameterDirection.Input
            pEncoded.SqlDbType = SqlDbType.DateTime
            pEncoded.Value = getServerDateTime()

            Dim p6 As New SqlClient.SqlParameter()
            p6.ParameterName = "@testCode"
            p6.Direction = ParameterDirection.Input
            p6.SqlDbType = SqlDbType.VarChar
            p6.Value = Format(CDate(testDate), "ddMMyyyy") & scale

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(pOptr)
            cmd.Parameters.Add(pEncoded)
            cmd.Parameters.Add(p6)

            Dim daBuyer As New SqlClient.SqlDataAdapter()
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            daBuyer.Dispose()
            dsBuyer.Dispose()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub

    Public Sub saveNewScaleTestDetails(ByVal scale As String, ByVal testDate As String, _
    ByVal ul As String, ByVal ur As String, ByVal center As String, ByVal ll As String, ByVal lr As String)
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_addNew_ScaleTest_Details"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@testCode"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = Format(CDate(testDate), "ddMMyyyy") & scale

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@ul"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.Float
            p2.Value = CDbl(ul)

            Dim p3 As New SqlClient.SqlParameter()
            p3.ParameterName = "@ur"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.Float
            p3.Value = CDbl(ur)

            Dim p4 As New SqlClient.SqlParameter()
            p4.ParameterName = "@c"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.Float
            p4.Value = CDbl(center)

            Dim p5 As New SqlClient.SqlParameter()
            p5.ParameterName = "@ll"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.Float
            p5.Value = CDbl(ll)

            Dim p6 As New SqlClient.SqlParameter()
            p6.ParameterName = "@lr"
            p6.Direction = ParameterDirection.Input
            p6.SqlDbType = SqlDbType.Float
            p6.Value = CDbl(lr)

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)

            Dim daBuyer As New SqlClient.SqlDataAdapter()
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            daBuyer.Dispose()
            dsBuyer.Dispose()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub


    Public Function getScaleIDTestHistory(ByVal scale As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_display_ScaleIDTest_Details"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@scaleID"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = scale

            cmd.Parameters.Add(p1)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function validateScaleTest(ByVal testCode As String) As Boolean
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getExistence_ScaleTest"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@testCode"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = testCode

            Dim paramRecCount As New SqlClient.SqlParameter()
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(paramRecCount)

            Dim da As New SqlClient.SqlDataAdapter()
            Dim ds As New DataSet("dbPPICIS")

            da.SelectCommand = cmd
            da.Fill(ds)

            If Val(cmd.Parameters("@recCount").Value) > 0 Then
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return True
            Else
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return False
            End If
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function validateFishSchedule(ByVal schedDate As String, ByVal lot As String) As Boolean
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getExistence_FishSchedule"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@schedDate"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            p1.Value = Format(CDate(schedDate), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@lot"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = lot

            Dim paramRecCount As New SqlClient.SqlParameter()
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(paramRecCount)

            Dim da As New SqlClient.SqlDataAdapter()
            Dim ds As New DataSet("dbPPICIS")

            da.SelectCommand = cmd
            da.Fill(ds)

            If Val(cmd.Parameters("@recCount").Value) > 0 Then
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return True
            Else
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return False
            End If
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getFishLotID(ByVal lot As String, ByVal sublot As String, ByVal sublot2 As String, ByVal specie As String) As String
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getFishLotID"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@lot"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = lot

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@sublot"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = sublot

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@sublot2"
            p3.SqlDbType = SqlDbType.VarChar
            p3.Direction = ParameterDirection.Input
            p3.Value = sublot2

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@specieCode"
            p4.SqlDbType = SqlDbType.VarChar
            p4.Direction = ParameterDirection.Input
            p4.Value = getSpecieCode(specie)

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As String

            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = CStr(drCode.GetInt64(0))
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub updateFishLotDetailsByID(ByVal id As String, ByVal lot As String, ByVal sublot As String, _
   ByVal method As String, ByVal wellID As String, ByVal typeSet As String, ByVal specie As String, _
   ByVal size As String, ByVal remarks As String, ByVal subLot2 As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_update_FishLotDetailsByID"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@lot#"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = lot

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@sublot"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = sublot

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@pmId"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.BigInt
            p3.Value = getPMCode(method)

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@optr"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = modModule.getUsername

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@dateTimeEncoded"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.DateTime
            p5.Value = getServerDateTime()

            Dim p6 As New SqlClient.SqlParameter
            p6.ParameterName = "@wellID"
            p6.SqlDbType = SqlDbType.VarChar
            p6.Direction = ParameterDirection.Input
            p6.Value = wellID

            Dim p7 As New SqlClient.SqlParameter
            p7.ParameterName = "@typeSet"
            p7.SqlDbType = SqlDbType.VarChar
            p7.Direction = ParameterDirection.Input
            p7.Value = typeSet

            Dim p8 As New SqlClient.SqlParameter
            p8.ParameterName = "@specieCode"
            p8.SqlDbType = SqlDbType.VarChar
            p8.Direction = ParameterDirection.Input
            p8.Value = getSpecieCode(specie)

            Dim p9 As New SqlClient.SqlParameter
            p9.ParameterName = "@size"
            p9.SqlDbType = SqlDbType.VarChar
            p9.Direction = ParameterDirection.Input
            p9.Value = size

            Dim p10 As New SqlClient.SqlParameter
            p10.ParameterName = "@remarks"
            p10.SqlDbType = SqlDbType.VarChar
            p10.Direction = ParameterDirection.Input
            p10.Value = remarks

            Dim p11 As New SqlClient.SqlParameter
            p11.ParameterName = "@sub"
            p11.SqlDbType = SqlDbType.VarChar
            p11.Direction = ParameterDirection.Input
            p11.Value = subLot2

            Dim p12 As New SqlClient.SqlParameter
            p12.ParameterName = "@id"
            p12.SqlDbType = SqlDbType.VarChar
            p12.Direction = ParameterDirection.Input
            p12.Value = id

            Dim p13 As New SqlClient.SqlParameter
            p13.ParameterName = "@recCount"
            p13.Direction = ParameterDirection.Output
            p13.SqlDbType = SqlDbType.SmallInt

            'cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)
            cmd.Parameters.Add(p7)
            cmd.Parameters.Add(p8)
            cmd.Parameters.Add(p9)
            cmd.Parameters.Add(p10)
            cmd.Parameters.Add(p11)
            cmd.Parameters.Add(p12)
            cmd.Parameters.Add(p13)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Sub updateFRStatus(ByVal fr As String, ByVal status As String)
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_update_FRStatus"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@rrNo"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = fr

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@status"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = status

            Dim paramRecCount As New SqlClient.SqlParameter()
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter()
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Sub deleteBinFromDeposit(ByVal bin As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_delete_FishBinFromDeposit"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@bin"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = getDepositCode(bin)

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Function getBinHistory(ByVal bin As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_displayAll_binHistory"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@bin"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = bin

            cmd.Parameters.Add(p1)

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getRawFishAnalysisResults(ByVal lot As String, ByVal sublot As String, ByVal typeOfTest As String) As String
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_display_QCRawAnalysisResults"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@lot"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = lot

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@sublot"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = sublot

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As String
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    Select Case typeOfTest
                        Case "histamine"
                            returnValue = drCode.GetString(0)
                        Case "ps"
                            returnValue = drCode.GetString(1)
                        Case "salt"
                            returnValue = drCode.GetString(2)
                        Case "handle"
                            returnValue = drCode.GetString(3)
                        Case "hold"
                            returnValue = drCode.GetString(4)
                    End Select
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getLotSpecieDetails(ByVal lot As String, ByVal sublot As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_display_LotSpecieDetails"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@lot"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = lot

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@sublot"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = sublot

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function validateFishLotSpecie(ByVal lot As String, ByVal subLot As String, _
    ByVal specie As String) As Boolean
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getExistence_FishLotSpecie"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@lot"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = lot

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@sublot"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = subLot

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@specieCode"
            p3.SqlDbType = SqlDbType.VarChar
            p3.Direction = ParameterDirection.Input
            p3.Value = getSpecieCode(specie)

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(paramRecCount)

            Dim da As New SqlClient.SqlDataAdapter
            Dim ds As New DataSet("dbPPICIS")

            da.SelectCommand = cmd
            da.Fill(ds)

            If Val(cmd.Parameters("@recCount").Value) > 0 Then
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return True
            Else
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return False
            End If
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    'Public Sub sendExcemptionError(ByVal errorMessage As String, ByVal sysModule As String)
    '    Try
    '        Dim site As String = "Facility"

    '        Dim smtpServer As New SmtpClient
    '        smtpServer.Credentials = New Net.NetworkCredential("ois@trimarinegroup.com", "tmiUSA123!")
    '        smtpServer.Port = "587"
    '        smtpServer.Host = "pod51018.outlook.com"
    '        smtpServer.EnableSsl = True

    '        Dim mail As New MailMessage
    '        mail.From = New MailAddress("ois@trimarinegroup.com")
    '        mail.To.Add("ois@trimarinegroup.com")
    '        mail.Subject = site & " Unhandled Excemptions"

    '        mail.Body = site & " Excemption" & Chr(13) & _
    '            "Date/ Time: " & getServerDateTime() & Chr(13) & _
    '            "User: " & getUserFullName() & Chr(13) & _
    '            "Error Message: " & errorMessage & _
    '            "Inner Exception: " & _
    '            "Module: " & sysModule      '& e.Exception.InnerException.Message & Chr(13)
    '        '"Module: " & sysModule & Chr(13) & _
    '        '"Error Message: " & errorMessage
    '        smtpServer.Send(mail)

    '        smtpServer.Dispose()
    '        mail.Dispose()

    '        MsgBox("System Unhandled Excemption is successfully forwarded to OIS Team" & Chr(13) & _
    '            "We will get back to you as soon as possible", MsgBoxStyle.Information, "Information")

    '    Catch ex As Exception
    '        MsgBox("Please verify that you specify the correct email account." & Chr(13) & _
    '                "For further details, please find below the system error" & Chr(13) & _
    '                ex.Message, MsgBoxStyle.Exclamation, "Warning")
    '    End Try
    'End Sub

    Public Function getRRFishBinDetails(ByVal rr As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = getConnectionString()
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_report_fishDepositInventory_byRR"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@rr"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.BigInt
            If Not IsNumeric(rr) Or rr = "" Then
                p1.Value = "0"
            Else
                p1.Value = rr
            End If

            cmd.Parameters.Add(p1)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("TRAKIM")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        End Try
    End Function

    Public Function getAllFishReceipts() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_displayAll_FishReceiptNumber"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter()
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function printBinsBySublot(ByVal lot As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_report_lotDetailsBySublot"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@lot"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = lot

            cmd.Parameters.Add(p1)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getRetortCode(ByVal prodnDate As String, ByVal shift As String, ByVal lot As String, ByVal sublot As String) As String

        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getProductionCode"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            If prodnDate = "" Then
                p1.Value = "1/1/1901"
            Else
                p1.Value = Format(CDate(prodnDate), "dd/MM/yyyy")
            End If

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@shift"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = shift

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@lot"
            p3.SqlDbType = SqlDbType.VarChar
            p3.Direction = ParameterDirection.Input
            p3.Value = lot

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@sublot"
            p4.SqlDbType = SqlDbType.VarChar
            p4.Direction = ParameterDirection.Input
            p4.Value = sublot

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As String
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetString(0)
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getRetortDetails(ByVal prodnDate As String, ByVal shift As String, _
  ByVal lot As String, ByVal sublot As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_display_ProductionDetails3"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            p1.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@prodnShift"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = shift

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@lot"
            p3.SqlDbType = SqlDbType.VarChar
            p3.Direction = ParameterDirection.Input
            p3.Value = lot

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@cases"
            p4.SqlDbType = SqlDbType.Float
            p4.Direction = ParameterDirection.Input
            p4.Value = 0

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@sublot"
            p5.SqlDbType = SqlDbType.VarChar
            p5.Direction = ParameterDirection.Input
            p5.Value = sublot

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub deleteProductionDetails(ByVal prodnDate As String, ByVal shift As String, ByVal lot As String, ByVal sublot As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_delete_ProductionDetails"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@retortCode"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = getRetortCode(prodnDate, shift, lot, sublot)

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Function getSublotWithdrawnForTheDay(ByVal prodnDate As String, ByVal shift As String, ByVal lot As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_display_SublotWithdrawnForTheDay"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            If prodnDate = "" Then
                p1.Value = "1/1/1901"
            Else
                p1.Value = Format(CDate(prodnDate), "dd/MM/yyyy")
            End If

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@shift"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = shift

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@lot"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = lot

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function displayProductOutputShift(ByVal pCode As String, ByVal subCode As String, ByVal lot As String, _
    ByVal prodnDate As String, ByVal shift As String, ByVal category As String, ByVal sublot As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getProductOutput_Shift"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            p1.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@pCode"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = pCode

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@pCode2"
            p3.SqlDbType = SqlDbType.VarChar
            p3.Direction = ParameterDirection.Input
            p3.Value = subCode

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@lot"
            p4.SqlDbType = SqlDbType.VarChar
            p4.Direction = ParameterDirection.Input
            p4.Value = lot

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@shift"
            p5.SqlDbType = SqlDbType.VarChar
            p5.Direction = ParameterDirection.Input
            p5.Value = shift

            Dim p6 As New SqlClient.SqlParameter
            p6.ParameterName = "@category"
            p6.SqlDbType = SqlDbType.VarChar
            p6.Direction = ParameterDirection.Input
            p6.Value = category

            Dim p7 As New SqlClient.SqlParameter
            p7.ParameterName = "@sublot"
            p7.SqlDbType = SqlDbType.VarChar
            p7.Direction = ParameterDirection.Input
            p7.Value = sublot

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)
            cmd.Parameters.Add(p7)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getProductOutputShift(ByVal pCode As String, ByVal subCode As String, ByVal lot As String, _
   ByVal prodnDate As String, ByVal shift As String, ByVal category As String, ByVal sublot As String) As String
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getProductOutput_Shift"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            p1.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@pCode"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = pCode

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@pCode2"
            p3.SqlDbType = SqlDbType.VarChar
            p3.Direction = ParameterDirection.Input
            p3.Value = subCode

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@lot"
            p4.SqlDbType = SqlDbType.VarChar
            p4.Direction = ParameterDirection.Input
            p4.Value = lot

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@shift"
            p5.SqlDbType = SqlDbType.VarChar
            p5.Direction = ParameterDirection.Input
            p5.Value = shift

            Dim p6 As New SqlClient.SqlParameter
            p6.ParameterName = "@category"
            p6.SqlDbType = SqlDbType.VarChar
            p6.Direction = ParameterDirection.Input
            p6.Value = category

            Dim p7 As New SqlClient.SqlParameter
            p7.ParameterName = "@sublot"
            p7.SqlDbType = SqlDbType.VarChar
            p7.Direction = ParameterDirection.Input
            p7.Value = sublot

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)
            cmd.Parameters.Add(p7)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As String
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    If category = "bbe" Then
                        returnValue = CStr(drCode.GetDateTime(0))
                    Else
                        returnValue = drCode.GetString(0)
                    End If
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getLotSublotCode(ByVal lot As String, ByVal sublotName As String) As String
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getLotSublotCode"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@lot"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = lot

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@sublot"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = sublotName

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As String
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetString(0)
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getPalletLockStatus(ByVal pallet As String) As String
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getPalletLockStatus"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@pallet#"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = pallet

            cmd.Parameters.Add(p1)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As String
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetString(0)
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getPalletTagCounter(ByVal yr As String, ByVal canType As String) As Integer
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getCounter_PalletTagNumber"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@yr"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.Int
            p1.Value = CInt(yr)

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@canType"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = canType

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim ctr As Integer
            If drCode.Read Then
                ctr = drCode.GetInt32(0) + 1
            Else
                ctr = 1
            End If

            drCode.Close()
            c.Close()
            Return ctr
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getPalletTare() As Double '(ByVal noOfBags As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getPalletTare"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            'Dim p1 As New SqlClient.SqlParameter
            'p1.ParameterName = "@qty"
            'p1.Direction = ParameterDirection.Input
            'p1.SqlDbType = SqlDbType.Float
            'p1.Value = CDbl(noOfBags)

            'cmd.Parameters.Add(p1)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim ctr As Double
            If drCode.Read Then
                ctr = drCode.GetDouble(0)
            Else
                ctr = 0
            End If

            drCode.Close()
            c.Close()

            Return ctr
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getProductDetails_BySeamersRecord(ByVal pCode As String, ByVal subCode As String, ByVal lot As String, _
   ByVal julian As String, ByVal category As String) As String
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getProductDetails_bySeamersRecord"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@julian"
            p1.SqlDbType = SqlDbType.Int
            p1.Direction = ParameterDirection.Input
            p1.Value = CInt(julian)

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@pCode"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = pCode

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@pCode2"
            p3.SqlDbType = SqlDbType.VarChar
            p3.Direction = ParameterDirection.Input
            p3.Value = subCode

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@lot"
            p4.SqlDbType = SqlDbType.VarChar
            p4.Direction = ParameterDirection.Input
            p4.Value = lot

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As String
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    Select Case category
                        Case "prodnDate"
                            returnValue = CStr(Format(drCode.GetDateTime(0), getTimeFormat()))
                        Case "shift"
                            returnValue = drCode.GetString(1)
                        Case "bbe"
                            returnValue = CStr(Format(drCode.GetDateTime(2), getTimeFormat()))
                        Case Else
                            returnValue = drCode.GetString(3)
                    End Select
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getPalletTagBuyer(ByVal pallet As String) As String
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getPalletTag_Buyer"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@pallet#"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = pallet

            cmd.Parameters.Add(p1)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim ctr As String
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    ctr = drCode.GetString(0)
                Else
                    ctr = ""
                End If
            Else
                ctr = ""
            End If

            drCode.Close()
            c.Close()

            Return ctr
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub updatePalletLockStatus(ByVal pallet As String, ByVal lock As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_updatePalletTagStatus"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@palletCode"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = getPalletCode(pallet)

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@lock"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = lock

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Function getFishRackQuantity2(ByVal prodnDate As String, ByVal shift As String, ByVal specie As String, ByVal size As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getFishRackQuantity"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            If prodnDate = "" Then
                p1.Value = Format(getServerDateTime, getTimeFormat())
            Else
                p1.Value = Format(CDate(prodnDate), getTimeFormat())
            End If

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@shift"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = shift

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@specie"
            p3.SqlDbType = SqlDbType.VarChar
            p3.Direction = ParameterDirection.Input
            p3.Value = specie

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@size"
            p4.SqlDbType = SqlDbType.VarChar
            p4.Direction = ParameterDirection.Input
            p4.Value = size

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)

            Dim dr As SqlClient.SqlDataReader
            dr = cmd.ExecuteReader

            Dim total As Double
            If dr.Read Then
                If Not dr(0) Is DBNull.Value Then
                    total = dr.GetDouble(0)
                Else
                    total = 0
                End If
            Else
                total = 0
            End If

            dr.Close()
            c.Close()

            Return total
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getFishSpecieTotalWeightByProdnDate(ByVal prodnDate As String, ByVal shift As String, _
  ByVal specie As String, ByVal size As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getFishSpecieSizeTotalWeight_ProdnDate"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            If prodnDate = "" Then
                p1.Value = Format(getServerDateTime(), getTimeFormat())
            Else
                p1.Value = Format(CDate(prodnDate), getTimeFormat())
            End If

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@shift"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = shift

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@specie"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = specie

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@size"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = size

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As Double
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetDouble(0)
                Else
                    returnValue = 0
                End If
            Else
                returnValue = 0
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getAllPalletAllocation() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_displayAll_PalletAllocation"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getProductTraceability(ByVal lot As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_display_ProductTraceability"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@lot"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = lot

            cmd.Parameters.Add(p1)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getLotTotalTonnageBySpecie(ByVal lot As String, ByVal prodnDate As String, _
  ByVal shift As String, ByVal specie As String) As Double
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getLotTotalTonnage_BySpecie"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            p1.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@shift"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = shift

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@lot"
            p3.SqlDbType = SqlDbType.VarChar
            p3.Direction = ParameterDirection.Input
            p3.Value = lot

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@specie"
            p4.SqlDbType = SqlDbType.VarChar
            p4.Direction = ParameterDirection.Input
            p4.Value = specie

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As Double
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    returnValue = drCode.GetDouble(0)
                Else
                    returnValue = 0
                End If
            Else
                returnValue = 0
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getContainerReleaseData(ByVal container As String, ByVal seal As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_report_releaseReport_tableView"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@container"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = container

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@seal"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = seal

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@loadingDate"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.DateTime
            p3.Value = DBNull.Value

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@loadStart"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.DateTime
            p4.Value = DBNull.Value

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@loadEnd"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.DateTime
            p5.Value = DBNull.Value

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getQAFGResults(ByVal prodnDate As String, ByVal lot As String, _
   ByVal specie As String, ByVal cycle As String, ByVal category As String) As String
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_display_QCFGAnalysisResults"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            p1.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@lot"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = lot

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@specie"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = specie

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@cycle"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = cycle

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)

            Dim drCode As SqlClient.SqlDataReader
            drCode = cmd.ExecuteReader

            Dim returnValue As String
            If drCode.Read Then
                If Not drCode(0) Is DBNull.Value Then
                    Select Case category
                        Case "dispo"
                            returnValue = drCode.GetString(0)
                        Case "histamine"
                            returnValue = drCode.GetString(1)
                        Case "salt"
                            returnValue = drCode.GetString(2)
                        Case "micro"
                            returnValue = drCode.GetString(3)
                        Case "moisture"
                            returnValue = drCode.GetString(4)
                        Case "driploss"
                            returnValue = drCode.GetString(5)
                        Case "sensory"
                            returnValue = drCode.GetString(6)
                        Case "nw"
                            returnValue = drCode.GetDouble(7)
                        Case "dw"
                            returnValue = drCode.GetDouble(8)
                        Case "flakes"
                            returnValue = drCode.GetDouble(9)
                        Case "oil"
                            returnValue = drCode.GetDouble(10)
                        Case "deviation"
                            returnValue = drCode.GetString(12)
                    End Select
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            drCode.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getContainerLoadingTime(ByVal container As String, ByVal seal As String, ByVal category As String) As DateTime
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_display_containerLoadingTime"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@container"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = container

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@seal"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = seal

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)

            Dim returnValue As DateTime

            Dim dr As SqlClient.SqlDataReader
            dr = cmd.ExecuteReader
            If dr.Read Then
                If Not dr(0) Is DBNull.Value Then
                    Select Case category
                        Case "start"
                            returnValue = dr.GetDateTime(0)
                        Case Else
                            returnValue = dr.GetDateTime(1)
                    End Select
                Else
                    returnValue = getServerDateTime()
                End If
            Else
                returnValue = getServerDateTime()
            End If

            dr.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub deletePrintReleaseReport()
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_delete_printReleaseReport"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Sub saveNewPrintReleaseReport(ByVal container As String, ByVal seal As String, ByVal buyer As String, ByVal pallet As String, _
   ByVal tag As String, ByVal loinGrade As String, ByVal pCode As String, ByVal prodnDate As String, ByVal lot As String, _
   ByVal cpfNo As String, ByVal bags As String, ByVal gw As String, ByVal nw As String, ByVal histamine As String, ByVal micro As String, _
   ByVal deviation As String, ByVal remarks As String, ByVal loadingDate As String, ByVal loadStart As String, ByVal loadEnd As String, _
   ByVal supervisor As String, ByVal prodnMgr As String, ByVal qcMgr As String, ByVal gm As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_addNew_printReleaseReport"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@container"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = container

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@seal#"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = seal

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@buyer"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = buyer

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@pallet#"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = pallet

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@tag#"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.VarChar
            p5.Value = tag

            Dim p6 As New SqlClient.SqlParameter
            p6.ParameterName = "@loinGrade"
            p6.Direction = ParameterDirection.Input
            p6.SqlDbType = SqlDbType.VarChar
            p6.Value = loinGrade

            Dim p7 As New SqlClient.SqlParameter
            p7.ParameterName = "@pCode"
            p7.Direction = ParameterDirection.Input
            p7.SqlDbType = SqlDbType.VarChar
            p7.Value = pCode

            Dim p8 As New SqlClient.SqlParameter
            p8.ParameterName = "@prodnDate"
            p8.Direction = ParameterDirection.Input
            p8.SqlDbType = SqlDbType.DateTime
            p8.Value = CDate(prodnDate)

            Dim p9 As New SqlClient.SqlParameter
            p9.ParameterName = "@lot#"
            p9.Direction = ParameterDirection.Input
            p9.SqlDbType = SqlDbType.VarChar
            p9.Value = lot

            Dim p10 As New SqlClient.SqlParameter
            p10.ParameterName = "@cpfNo"
            p10.Direction = ParameterDirection.Input
            p10.SqlDbType = SqlDbType.VarChar
            p10.Value = cpfNo

            Dim p11 As New SqlClient.SqlParameter
            p11.ParameterName = "@bags"
            p11.Direction = ParameterDirection.Input
            p11.SqlDbType = SqlDbType.Float
            p11.Value = CDbl(bags)

            Dim p12 As New SqlClient.SqlParameter
            p12.ParameterName = "@gw"
            p12.Direction = ParameterDirection.Input
            p12.SqlDbType = SqlDbType.Float
            p12.Value = CDbl(gw)

            Dim p13 As New SqlClient.SqlParameter
            p13.ParameterName = "@nw"
            p13.Direction = ParameterDirection.Input
            p13.SqlDbType = SqlDbType.Float
            p13.Value = CDbl(nw)

            Dim p14 As New SqlClient.SqlParameter
            p14.ParameterName = "@histamine"
            p14.Direction = ParameterDirection.Input
            p14.SqlDbType = SqlDbType.VarChar
            p14.Value = histamine

            Dim p15 As New SqlClient.SqlParameter
            p15.ParameterName = "@micro"
            p15.Direction = ParameterDirection.Input
            p15.SqlDbType = SqlDbType.VarChar
            p15.Value = micro

            Dim p16 As New SqlClient.SqlParameter
            p16.ParameterName = "@deviation"
            p16.Direction = ParameterDirection.Input
            p16.SqlDbType = SqlDbType.VarChar
            p16.Value = deviation

            Dim p17 As New SqlClient.SqlParameter
            p17.ParameterName = "@remarks"
            p17.Direction = ParameterDirection.Input
            p17.SqlDbType = SqlDbType.VarChar
            p17.Value = remarks

            Dim p18 As New SqlClient.SqlParameter
            p18.ParameterName = "@loadingDate"
            p18.Direction = ParameterDirection.Input
            p18.SqlDbType = SqlDbType.DateTime
            p18.Value = CDate(loadingDate)

            Dim p19 As New SqlClient.SqlParameter
            p19.ParameterName = "@loadStart"
            p19.Direction = ParameterDirection.Input
            p19.SqlDbType = SqlDbType.DateTime
            p19.Value = CDate(loadStart)

            Dim p20 As New SqlClient.SqlParameter
            p20.ParameterName = "@loadEnd"
            p20.Direction = ParameterDirection.Input
            p20.SqlDbType = SqlDbType.DateTime
            p20.Value = CDate(loadEnd)

            Dim p21 As New SqlClient.SqlParameter
            p21.ParameterName = "@monitorer"
            p21.Direction = ParameterDirection.Input
            p21.SqlDbType = SqlDbType.VarChar
            p21.Value = getUserFullName()

            Dim p22 As New SqlClient.SqlParameter
            p22.ParameterName = "@supervisor"
            p22.Direction = ParameterDirection.Input
            p22.SqlDbType = SqlDbType.VarChar
            p22.Value = supervisor

            Dim p23 As New SqlClient.SqlParameter
            p23.ParameterName = "@prodnMgr"
            p23.Direction = ParameterDirection.Input
            p23.SqlDbType = SqlDbType.VarChar
            p23.Value = prodnMgr

            Dim p24 As New SqlClient.SqlParameter
            p24.ParameterName = "@qcMgr"
            p24.Direction = ParameterDirection.Input
            p24.SqlDbType = SqlDbType.VarChar
            p24.Value = qcMgr

            Dim p25 As New SqlClient.SqlParameter
            p25.ParameterName = "@gm"
            p25.Direction = ParameterDirection.Input
            p25.SqlDbType = SqlDbType.VarChar
            p25.Value = gm

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)
            cmd.Parameters.Add(p7)
            cmd.Parameters.Add(p8)
            cmd.Parameters.Add(p9)
            cmd.Parameters.Add(p10)
            cmd.Parameters.Add(p11)
            cmd.Parameters.Add(p12)
            cmd.Parameters.Add(p13)
            cmd.Parameters.Add(p14)
            cmd.Parameters.Add(p15)
            cmd.Parameters.Add(p16)
            cmd.Parameters.Add(p17)
            cmd.Parameters.Add(p18)
            cmd.Parameters.Add(p19)
            cmd.Parameters.Add(p20)
            cmd.Parameters.Add(p21)
            cmd.Parameters.Add(p22)
            cmd.Parameters.Add(p23)
            cmd.Parameters.Add(p24)
            cmd.Parameters.Add(p25)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            daBuyer.Dispose()
            dsBuyer.Dispose()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub

    Public Function getSignatories(ByVal position As String, ByVal department As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getSignatories"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@position"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = position

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@department"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = department

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function printReleaseReport() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_report_ReleaseReport"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getShipmentContainerDetails(ByVal departureDate As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_display_ShipmentContainerDetails"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@departureDate"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            If departureDate = "" Then
                p1.Value = Format(getServerDateTime(), getTimeFormat())
            Else
                p1.Value = Format(CDate(departureDate), getTimeFormat())
            End If

            cmd.Parameters.Add(p1)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getAllSublotSpecie(ByVal lot As String, ByVal prodnDate As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_display_SublotSpecie"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@lot"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = lot

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@sublot"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = "%"

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@prodnDate"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.DateTime
            If prodnDate = "" Then
                p3.Value = Format(getServerDateTime(), getTimeFormat())
            Else
                p3.Value = Format(CDate(prodnDate), getTimeFormat())
            End If

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getProductionCycleByProductionDetails(ByVal prodnDate As String, _
   ByVal lot As String, ByVal sublot As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_display_ProductionCycleByProductionDetails"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            p1.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@lot"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = lot

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@sublot"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = "%"

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getAllQCDisposition() As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_displayAll_QCDisposition"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getProductPackTypeByProductionDetails(ByVal prodnDate As String, _
   ByVal lot As String, ByVal sublot As String, ByVal cycle As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_display_ProductPackTypeByProductionDetails"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            p1.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@lot"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = lot

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@sublot"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = "%"

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@cycle"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = cycle

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function validateQCFGAnalysis(ByVal prodnDate As String, ByVal lot As String, ByVal specie As String, ByVal cycle As String) As Boolean
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getExistence_QCFGAnalysisResults"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            p1.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@lot"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = lot

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@specieCode"
            p3.SqlDbType = SqlDbType.VarChar
            p3.Direction = ParameterDirection.Input
            p3.Value = getSpecieCode(specie)

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@cycle"
            p4.SqlDbType = SqlDbType.VarChar
            p4.Direction = ParameterDirection.Input
            p4.Value = cycle

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(paramRecCount)

            Dim da As New SqlClient.SqlDataAdapter
            Dim ds As New DataSet("dbPPICIS")

            da.SelectCommand = cmd
            da.Fill(ds)

            If Val(cmd.Parameters("@recCount").Value) > 0 Then
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return True
            Else
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return False
            End If
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Sub saveQCFGAnalysisResults(ByVal disposition As String, ByVal lot As String, ByVal sublot As String, _
   ByVal prodnDate As String, ByVal packType As String, ByVal histamine As String, ByVal salt As String, _
   ByVal micro As String, ByVal moisture As String, ByVal dripLoss As String, ByVal nw As String, _
   ByVal dw As String, ByVal flakes As String, ByVal oil As String, ByVal deviation As String, _
   ByVal sensory As String, ByVal cycle As String, ByVal specie As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_addNew_QCFGAnalysisResults"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@dispoCode"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = getDispositionCode(disposition)

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@lot#"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = lot

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@sublot"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = sublot

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@prodnDate"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.DateTime
            p4.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p18 As New SqlClient.SqlParameter
            p18.ParameterName = "@packType"
            p18.Direction = ParameterDirection.Input
            p18.SqlDbType = SqlDbType.VarChar
            p18.Value = packType

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@histamine"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.VarChar
            p5.Value = histamine

            Dim p6 As New SqlClient.SqlParameter
            p6.ParameterName = "@salt"
            p6.Direction = ParameterDirection.Input
            p6.SqlDbType = SqlDbType.VarChar
            p6.Value = salt

            Dim p7 As New SqlClient.SqlParameter
            p7.ParameterName = "@micro"
            p7.Direction = ParameterDirection.Input
            p7.SqlDbType = SqlDbType.VarChar
            p7.Value = micro

            Dim p8 As New SqlClient.SqlParameter
            p8.ParameterName = "@moisture"
            p8.Direction = ParameterDirection.Input
            p8.SqlDbType = SqlDbType.VarChar
            p8.Value = moisture

            Dim p9 As New SqlClient.SqlParameter
            p9.ParameterName = "@dripLoss"
            p9.Direction = ParameterDirection.Input
            p9.SqlDbType = SqlDbType.VarChar
            p9.Value = dripLoss

            Dim p10 As New SqlClient.SqlParameter
            p10.ParameterName = "@nw"
            p10.Direction = ParameterDirection.Input
            p10.SqlDbType = SqlDbType.Float
            p10.Value = CDbl(nw)

            Dim p11 As New SqlClient.SqlParameter
            p11.ParameterName = "@dw"
            p11.Direction = ParameterDirection.Input
            p11.SqlDbType = SqlDbType.Float
            p11.Value = CDbl(dw)

            Dim p12 As New SqlClient.SqlParameter
            p12.ParameterName = "@flakes"
            p12.Direction = ParameterDirection.Input
            p12.SqlDbType = SqlDbType.Float
            p12.Value = CDbl(flakes)

            Dim p13 As New SqlClient.SqlParameter
            p13.ParameterName = "@oil"
            p13.Direction = ParameterDirection.Input
            p13.SqlDbType = SqlDbType.Float
            p13.Value = CDbl(oil)

            Dim p14 As New SqlClient.SqlParameter
            p14.ParameterName = "@deviation"
            p14.Direction = ParameterDirection.Input
            p14.SqlDbType = SqlDbType.VarChar
            p14.Value = deviation

            Dim pOptr As New SqlClient.SqlParameter
            pOptr.ParameterName = "@optr"
            pOptr.Direction = ParameterDirection.Input
            pOptr.SqlDbType = SqlDbType.VarChar
            pOptr.Value = modModule.getUsername

            Dim pEncoded As New SqlClient.SqlParameter
            pEncoded.ParameterName = "@dateTimeEncoded"
            pEncoded.Direction = ParameterDirection.Input
            pEncoded.SqlDbType = SqlDbType.DateTime
            pEncoded.Value = getServerDateTime()

            Dim p15 As New SqlClient.SqlParameter
            p15.ParameterName = "@sensory"
            p15.Direction = ParameterDirection.Input
            p15.SqlDbType = SqlDbType.VarChar
            p15.Value = sensory

            Dim p16 As New SqlClient.SqlParameter
            p16.ParameterName = "@cycle"
            p16.Direction = ParameterDirection.Input
            p16.SqlDbType = SqlDbType.VarChar
            p16.Value = cycle

            Dim p17 As New SqlClient.SqlParameter
            p17.ParameterName = "@specieCode"
            p17.Direction = ParameterDirection.Input
            p17.SqlDbType = SqlDbType.VarChar
            p17.Value = getSpecieCode(specie)

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p18)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)
            cmd.Parameters.Add(p7)
            cmd.Parameters.Add(p8)
            cmd.Parameters.Add(p9)
            cmd.Parameters.Add(p10)
            cmd.Parameters.Add(p11)
            cmd.Parameters.Add(p12)
            cmd.Parameters.Add(p13)
            cmd.Parameters.Add(p14)
            cmd.Parameters.Add(pOptr)
            cmd.Parameters.Add(pEncoded)
            cmd.Parameters.Add(p15)
            cmd.Parameters.Add(p16)
            cmd.Parameters.Add(p17)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            daBuyer.Dispose()
            dsBuyer.Dispose()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub

    Public Function getDispositionCode(ByVal disposition As String) As String
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_get_QCDispositionCode"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@dispoDesc"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = disposition

            cmd.Parameters.Add(p1)

            Dim dr As SqlClient.SqlDataReader
            dr = cmd.ExecuteReader

            Dim returnValue As String
            If dr.Read Then
                If Not dr(0) Is DBNull.Value Then
                    returnValue = dr.GetString(0)
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            dr.Close()
            c.Close()

            Return returnValue
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Function

    Public Sub saveQCFGAnalysisResults_Logs(ByVal prodnDate As String, ByVal lot As String, ByVal specie As String, _
    ByVal cycle As String, ByVal remarks As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_addNew_QCFGAnalysisResults_Logs"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            p1.Value = CDate(prodnDate)

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@lot#"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = lot

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@specie"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = specie

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@cycle"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.VarChar
            p4.Value = cycle

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@remarks"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.VarChar
            p5.Value = remarks

            Dim pOptr As New SqlClient.SqlParameter
            pOptr.ParameterName = "@optr"
            pOptr.Direction = ParameterDirection.Input
            pOptr.SqlDbType = SqlDbType.VarChar
            pOptr.Value = modModule.getUsername

            Dim pEncoded As New SqlClient.SqlParameter
            pEncoded.ParameterName = "@dateTimeEncoded"
            pEncoded.Direction = ParameterDirection.Input
            pEncoded.SqlDbType = SqlDbType.DateTime
            pEncoded.Value = getServerDateTime()

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(pOptr)
            cmd.Parameters.Add(pEncoded)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            daBuyer.Dispose()
            dsBuyer.Dispose()
            c.Close()
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Sub

    Public Sub updateQCFGAnalysisResults(ByVal disposition As String, ByVal lot As String, ByVal sublot As String, _
  ByVal prodnDate As String, ByVal packType As String, ByVal histamine As String, ByVal salt As String, _
  ByVal micro As String, ByVal moisture As String, ByVal dripLoss As String, ByVal nw As String, _
  ByVal dw As String, ByVal flakes As String, ByVal oil As String, ByVal deviation As String, _
  ByVal sensory As String, ByVal cycle As String, ByVal specie As String)
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_update_QCFGAnalysisResults"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@dispoCode"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = getDispositionCode(disposition)

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@lot#"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = lot

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@sublot"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = sublot

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@prodnDate"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.DateTime
            p4.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p18 As New SqlClient.SqlParameter
            p18.ParameterName = "@packType"
            p18.Direction = ParameterDirection.Input
            p18.SqlDbType = SqlDbType.VarChar
            p18.Value = packType

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@histamine"
            p5.Direction = ParameterDirection.Input
            p5.SqlDbType = SqlDbType.VarChar
            p5.Value = histamine

            Dim p6 As New SqlClient.SqlParameter
            p6.ParameterName = "@salt"
            p6.Direction = ParameterDirection.Input
            p6.SqlDbType = SqlDbType.VarChar
            p6.Value = salt

            Dim p7 As New SqlClient.SqlParameter
            p7.ParameterName = "@micro"
            p7.Direction = ParameterDirection.Input
            p7.SqlDbType = SqlDbType.VarChar
            p7.Value = micro

            Dim p8 As New SqlClient.SqlParameter
            p8.ParameterName = "@moisture"
            p8.Direction = ParameterDirection.Input
            p8.SqlDbType = SqlDbType.VarChar
            p8.Value = moisture

            Dim p9 As New SqlClient.SqlParameter
            p9.ParameterName = "@dripLoss"
            p9.Direction = ParameterDirection.Input
            p9.SqlDbType = SqlDbType.VarChar
            p9.Value = dripLoss

            Dim p10 As New SqlClient.SqlParameter
            p10.ParameterName = "@nw"
            p10.Direction = ParameterDirection.Input
            p10.SqlDbType = SqlDbType.Float
            p10.Value = CDbl(nw)

            Dim p11 As New SqlClient.SqlParameter
            p11.ParameterName = "@dw"
            p11.Direction = ParameterDirection.Input
            p11.SqlDbType = SqlDbType.Float
            p11.Value = CDbl(dw)

            Dim p12 As New SqlClient.SqlParameter
            p12.ParameterName = "@flakes"
            p12.Direction = ParameterDirection.Input
            p12.SqlDbType = SqlDbType.Float
            p12.Value = CDbl(flakes)

            Dim p13 As New SqlClient.SqlParameter
            p13.ParameterName = "@oil"
            p13.Direction = ParameterDirection.Input
            p13.SqlDbType = SqlDbType.Float
            p13.Value = CDbl(oil)

            Dim p14 As New SqlClient.SqlParameter
            p14.ParameterName = "@deviation"
            p14.Direction = ParameterDirection.Input
            p14.SqlDbType = SqlDbType.VarChar
            p14.Value = deviation

            Dim pOptr As New SqlClient.SqlParameter
            pOptr.ParameterName = "@optr"
            pOptr.Direction = ParameterDirection.Input
            pOptr.SqlDbType = SqlDbType.VarChar
            pOptr.Value = modModule.getUsername

            Dim pEncoded As New SqlClient.SqlParameter
            pEncoded.ParameterName = "@dateTimeEncoded"
            pEncoded.Direction = ParameterDirection.Input
            pEncoded.SqlDbType = SqlDbType.DateTime
            pEncoded.Value = getServerDateTime()

            Dim p15 As New SqlClient.SqlParameter
            p15.ParameterName = "@sensory"
            p15.Direction = ParameterDirection.Input
            p15.SqlDbType = SqlDbType.VarChar
            p15.Value = sensory

            Dim p16 As New SqlClient.SqlParameter
            p16.ParameterName = "@cycle"
            p16.Direction = ParameterDirection.Input
            p16.SqlDbType = SqlDbType.VarChar
            p16.Value = cycle

            Dim p17 As New SqlClient.SqlParameter
            p17.ParameterName = "@specieCode"
            p17.Direction = ParameterDirection.Input
            p17.SqlDbType = SqlDbType.VarChar
            p17.Value = getSpecieCode(specie)

            Dim paramRecCount As New SqlClient.SqlParameter
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p18)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)
            cmd.Parameters.Add(p7)
            cmd.Parameters.Add(p8)
            cmd.Parameters.Add(p9)
            cmd.Parameters.Add(p10)
            cmd.Parameters.Add(p11)
            cmd.Parameters.Add(p12)
            cmd.Parameters.Add(p13)
            cmd.Parameters.Add(p14)
            cmd.Parameters.Add(pOptr)
            cmd.Parameters.Add(pEncoded)
            cmd.Parameters.Add(p15)
            cmd.Parameters.Add(p16)
            cmd.Parameters.Add(p17)
            cmd.Parameters.Add(paramRecCount)

            Dim daBuyer As New SqlClient.SqlDataAdapter
            daBuyer.SelectCommand = cmd

            Dim dsBuyer As New DataSet("dbPPICIS")
            daBuyer.Fill(dsBuyer)

            If cmd.Parameters("@recCount").Value > 0 Then
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return True
            Else
                daBuyer.Dispose()
                dsBuyer.Dispose()
                c.Close()
                'Return False
            End If
        Catch exception As Exception
            MsgBox(exception.Message)
        Finally
        End Try
    End Sub

    Public Function getAllQCFGAnalysisLogs(ByVal lot As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_displayAll_QCFGAnalysisResults_Logs"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@lot"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = lot

            cmd.Parameters.Add(p1)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function displayFishWithdrawalDetails_ForLabeling(ByVal pCode As String, ByVal subCode As String, ByVal lot As String, _
    ByVal prodnDate As String, ByVal shift As String, ByVal category As String, ByVal sublot As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_displayFishWithdrawal_DetailsForLabeling"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@prodnDate"
            p1.SqlDbType = SqlDbType.DateTime
            p1.Direction = ParameterDirection.Input
            p1.Value = Format(CDate(prodnDate), getTimeFormat())

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@pCode"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = pCode

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@pCode2"
            p3.SqlDbType = SqlDbType.VarChar
            p3.Direction = ParameterDirection.Input
            p3.Value = subCode

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@lot"
            p4.SqlDbType = SqlDbType.VarChar
            p4.Direction = ParameterDirection.Input
            p4.Value = lot

            Dim p5 As New SqlClient.SqlParameter
            p5.ParameterName = "@shift"
            p5.SqlDbType = SqlDbType.VarChar
            p5.Direction = ParameterDirection.Input
            p5.Value = shift

            Dim p6 As New SqlClient.SqlParameter
            p6.ParameterName = "@category"
            p6.SqlDbType = SqlDbType.VarChar
            p6.Direction = ParameterDirection.Input
            p6.Value = category

            Dim p7 As New SqlClient.SqlParameter
            p7.ParameterName = "@sublot"
            p7.SqlDbType = SqlDbType.VarChar
            p7.Direction = ParameterDirection.Input
            p7.Value = sublot

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)
            cmd.Parameters.Add(p5)
            cmd.Parameters.Add(p6)
            cmd.Parameters.Add(p7)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function validateProductionDetails(ByVal retortCode As String, ByVal pCode As String, ByVal pCode2 As String) As Boolean
        Try
            Dim c As New SqlClient.SqlConnection()
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand()
            cmd.CommandText = "proc_getExistence_ProductionDetails"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter()
            p1.ParameterName = "@retortCode"
            p1.SqlDbType = SqlDbType.VarChar
            p1.Direction = ParameterDirection.Input
            p1.Value = retortCode

            Dim p2 As New SqlClient.SqlParameter()
            p2.ParameterName = "@pCode"
            p2.SqlDbType = SqlDbType.VarChar
            p2.Direction = ParameterDirection.Input
            p2.Value = pCode

            Dim p3 As New SqlClient.SqlParameter()
            p3.ParameterName = "@pCode2"
            p3.SqlDbType = SqlDbType.VarChar
            p3.Direction = ParameterDirection.Input
            p3.Value = pCode2

            Dim paramRecCount As New SqlClient.SqlParameter()
            paramRecCount.ParameterName = "@recCount"
            paramRecCount.Direction = ParameterDirection.Output
            paramRecCount.SqlDbType = SqlDbType.SmallInt

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(paramRecCount)

            Dim da As New SqlClient.SqlDataAdapter()
            Dim ds As New DataSet("dbPPICIS")

            da.SelectCommand = cmd
            da.Fill(ds)

            If Val(cmd.Parameters("@recCount").Value) > 0 Then
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return True
            Else
                da.Dispose()
                ds.Dispose()
                c.Close()
                Return False
            End If
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getPalletTagInventory(ByVal packType As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_display_PalletTagInventory"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@packStyle"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = packType

            cmd.Parameters.Add(p1)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getPalletTagInventory(ByVal packType As String, ByVal container As String, ByVal seal As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_display_PalletTagInventoryWithContainerDetails"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@packStyle"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.Value = packType

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@loadingCode"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.Value = getLoadingCode(container, seal)

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getLotBinDetailsSettlement(ByVal lot As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_display_FishBinSettlement"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.ParameterName = "@lot"
            p1.Value = lot

            cmd.Parameters.Add(p1)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getFishLotBinProcessed(ByVal lot As String, ByVal bin As String) As String
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_get_FishBinProcessedDate"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.ParameterName = "@lot"
            p1.Value = lot

            Dim p2 As New SqlClient.SqlParameter
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.VarChar
            p2.ParameterName = "@bin"
            p2.Value = bin

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)

            Dim dr As SqlClient.SqlDataReader
            dr = cmd.ExecuteReader

            Dim returnValue As String
            If dr.Read Then
                If Not dr(0) Is DBNull.Value Then
                    returnValue = Format(CDate(dr.GetDateTime(0)), getTimeFormat())
                Else
                    returnValue = ""
                End If
            Else
                returnValue = ""
            End If

            dr.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getContainerShipmentStatus(ByVal loadingCode As String) As String
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_getContainerShipmentStatus"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.VarChar
            p1.ParameterName = "@loadingCode"
            p1.Value = loadingCode

            cmd.Parameters.Add(p1)

            Dim dr As SqlClient.SqlDataReader
            dr = cmd.ExecuteReader

            Dim returnValue As String
            If dr.Read Then
                If Not dr(0) Is DBNull.Value Then
                    returnValue = dr.GetString(0)
                Else
                    returnValue = "N"
                End If
            Else
                returnValue = "N"
            End If

            dr.Close()
            c.Close()

            Return returnValue
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function

    Public Function getSTP_FishInventory(ByVal dateFrom As String, ByVal dateTo As String, ByVal category As String) As DataSet
        Try
            Dim c As New SqlClient.SqlConnection
            c.ConnectionString = modModule.getConnectionString
            c.Open()

            Dim cmd As New SqlClient.SqlCommand
            cmd.CommandText = "proc_displaySTP_FishInventory"
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Connection = c

            Dim p1 As New SqlClient.SqlParameter
            p1.ParameterName = "@dateFrom"
            p1.Direction = ParameterDirection.Input
            p1.SqlDbType = SqlDbType.DateTime
            If dateFrom = "" Then
                p1.Value = Format(getServerDateTime(), getTimeFormat())
            Else
                p1.Value = Format(CDate(dateFrom), getTimeFormat())
            End If

            Dim p2 As New SqlClient.SqlParameter
            p2.ParameterName = "@dateTo"
            p2.Direction = ParameterDirection.Input
            p2.SqlDbType = SqlDbType.DateTime
            If dateFrom = "" Then
                p2.Value = Format(getServerDateTime(), getTimeFormat())
            Else
                p2.Value = Format(CDate(dateTo), getTimeFormat())
            End If

            Dim p3 As New SqlClient.SqlParameter
            p3.ParameterName = "@category"
            p3.Direction = ParameterDirection.Input
            p3.SqlDbType = SqlDbType.VarChar
            p3.Value = category

            Dim p4 As New SqlClient.SqlParameter
            p4.ParameterName = "@dateOut"
            p4.Direction = ParameterDirection.Input
            p4.SqlDbType = SqlDbType.DateTime
            p4.Value = DBNull.Value

            cmd.Parameters.Add(p1)
            cmd.Parameters.Add(p2)
            cmd.Parameters.Add(p3)
            cmd.Parameters.Add(p4)

            Dim da As New SqlClient.SqlDataAdapter
            da.SelectCommand = cmd

            Dim ds As New DataSet("dbPPICIS")
            da.Fill(ds)

            Dim d As DataSet = ds

            da.Dispose()
            ds.Dispose()
            c.Close()

            Return d
        Catch e As Exception
            MsgBox(e.Message)
        Finally
        End Try
    End Function
End Module